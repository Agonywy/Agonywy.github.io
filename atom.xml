<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>如你所是</title>
  
  <subtitle>Agonywy</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://agonywy.github.io/"/>
  <updated>2020-10-30T09:00:31.604Z</updated>
  <id>https://agonywy.github.io/</id>
  
  <author>
    <name>Agonywy</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>shiro入门</title>
    <link href="https://agonywy.github.io/2020/10/29/Shiro/"/>
    <id>https://agonywy.github.io/2020/10/29/Shiro/</id>
    <published>2020-10-29T03:12:35.000Z</published>
    <updated>2020-10-30T09:00:31.604Z</updated>
    
    <content type="html"><![CDATA[<h2 id="权限的管理"><a href="#权限的管理" class="headerlink" title="权限的管理"></a>权限的管理</h2><h3 id="1-1-什么是权限管理"><a href="#1-1-什么是权限管理" class="headerlink" title="1.1 什么是权限管理"></a>1.1 什么是权限管理</h3><p>基本上涉及到用户参与的系统都要进行权限管理，权限管理属于系统安全的范畴，权限管理实现<code>对用户访问系统的控制</code>，按照安全规则或者<a href="http://baike.baidu.com/view/160028.htm" target="_blank" rel="noopener">安全策略</a>控制用户可以访问而且只能访问自己被授权的资源。</p><a id="more"></a><p>权限管理包括用户<code>身份认证</code>和<code>授权</code>两部分，简称<code>认证授权</code>。对于需要访问控制的资源用户首先经过身份认证，认证通过后用户具有该资源的访问权限方可访问。</p><h3 id="1-2-什么是身份认证"><a href="#1-2-什么是身份认证" class="headerlink" title="1.2 什么是身份认证"></a>1.2 什么是身份认证</h3><p><code>身份认证</code>，就是判断一个用户是否为合法用户的处理过程。最常用的简单身份认证方式是系统通过核对用户输入的用户名和口令，看其是否与系统中存储的该用户的用户名和口令一致，来判断用户身份是否正确。对于采用<a href="http://baike.baidu.com/view/5628.htm" target="_blank" rel="noopener">指纹</a>等系统，则出示指纹；对于硬件Key等刷卡系统，则需要刷卡。</p><h3 id="1-3-什么是授权"><a href="#1-3-什么是授权" class="headerlink" title="1.3 什么是授权"></a>1.3 什么是授权</h3><p><code>授权，即访问控制</code>，控制谁能访问哪些资源。主体进行身份认证后需要分配权限方可访问系统的资源，对于某些资源没有权限是无法访问的</p><hr><h2 id="什么是shiro"><a href="#什么是shiro" class="headerlink" title="什么是shiro"></a>什么是shiro</h2><blockquote><p><strong>Apache Shiro™</strong> is a powerful and easy-to-use Java security framework that performs authentication, authorization, cryptography, and session management. With Shiro’s easy-to-understand API, you can quickly and easily secure any application – from the smallest mobile applications to the largest web and enterprise applications.  </p><p>Shiro 是一个功能强大且易于使用的Java安全框架，它执行身份验证、授权、加密和会话管理。使用Shiro易于理解的API，您可以快速轻松地保护任何应用程序—从最小的移动应用程序到最大的web和企业应用程序。</p></blockquote><p><code>Shiro是apache旗下一个开源框架，它将软件系统的安全认证相关的功能抽取出来，实现用户身份认证，权限授权、加密、会话管理等功能，组成了一个通用的安全认证框架。</code></p><hr><h2 id="Shiro的核心架构"><a href="#Shiro的核心架构" class="headerlink" title="Shiro的核心架构"></a>Shiro的核心架构</h2><p><img src="https://raw.githubusercontent.com/Agonywy/picGo/master/img/image-20200520220509344.png" alt></p><h3 id="3-1-Subject"><a href="#3-1-Subject" class="headerlink" title="3.1 Subject"></a>3.1 Subject</h3><p><code>Subject即主体</code>，外部应用与subject进行交互，subject记录了当前操作用户，将用户的概念理解为当前操作的主体，可能是一个通过浏览器请求的用户，也可能是一个运行的程序。    Subject在shiro中是一个接口，接口中定义了很多认证授相关的方法，外部程序通过subject进行认证授，而subject是通过SecurityManager安全管理器进行认证授权</p><h3 id="3-2-SecurityManager"><a href="#3-2-SecurityManager" class="headerlink" title="3.2 SecurityManager"></a>3.2 SecurityManager</h3><p><code>SecurityManager即安全管理器</code>，对全部的subject进行安全管理，它是shiro的核心，负责对所有的subject进行安全管理。通过SecurityManager可以完成subject的认证、授权等，实质上SecurityManager是通过Authenticator进行认证，通过Authorizer进行授权，通过SessionManager进行会话管理等。</p><p><code>SecurityManager是一个接口，继承了Authenticator, Authorizer, SessionManager这三个接口。</code></p><h3 id="3-3-Authenticator"><a href="#3-3-Authenticator" class="headerlink" title="3.3 Authenticator"></a>3.3 Authenticator</h3><p><code>Authenticator即认证器</code>，对用户身份进行认证，Authenticator是一个接口，shiro提供ModularRealmAuthenticator实现类，通过ModularRealmAuthenticator基本上可以满足大多数需求，也可以自定义认证器。</p><h3 id="3-4-Authorizer"><a href="#3-4-Authorizer" class="headerlink" title="3.4 Authorizer"></a>3.4 Authorizer</h3><p><code>Authorizer即授权器</code>，用户通过认证器认证通过，在访问功能时需要通过授权器判断用户是否有此功能的操作权限。</p><h3 id="3-5-Realm"><a href="#3-5-Realm" class="headerlink" title="3.5 Realm"></a>3.5 Realm</h3><p><code>Realm即领域</code>，相当于datasource数据源，securityManager进行安全认证需要通过Realm获取用户权限数据，比如：如果用户身份数据在数据库那么realm就需要从数据库获取用户身份信息。</p><ul><li>​    注意：不要把realm理解成只是从数据源取数据，在realm中还有认证授权校验的相关的代码。</li></ul><h3 id="3-6-SessionManager"><a href="#3-6-SessionManager" class="headerlink" title="3.6 SessionManager"></a>3.6 SessionManager</h3><p><code>sessionManager即会话管理</code>，shiro框架定义了一套会话管理，它不依赖web容器的session，所以shiro可以使用在非web应用上，也可以将分布式应用的会话集中在一点管理，此特性可使它实现单点登录。</p><h3 id="3-7-SessionDAO"><a href="#3-7-SessionDAO" class="headerlink" title="3.7 SessionDAO"></a>3.7 SessionDAO</h3><p><code>SessionDAO即会话dao</code>，是对session会话操作的一套接口，比如要将session存储到数据库，可以通过jdbc将会话存储到数据库。</p><h3 id="3-8-CacheManager"><a href="#3-8-CacheManager" class="headerlink" title="3.8 CacheManager"></a>3.8 CacheManager</h3><p><code>CacheManager即缓存管理</code>，将用户权限数据存储在缓存，这样可以提高性能。</p><h3 id="3-9-Cryptography"><a href="#3-9-Cryptography" class="headerlink" title="3.9 Cryptography"></a>3.9 Cryptography</h3><p>​    <code>Cryptography即密码管理</code>，shiro提供了一套加密/解密的组件，方便开发。比如提供常用的散列、加/解密等功能。</p><hr><h2 id="Shiro中的认证"><a href="#Shiro中的认证" class="headerlink" title="Shiro中的认证"></a>Shiro中的认证</h2><h3 id="4-1-认证"><a href="#4-1-认证" class="headerlink" title="4.1 认证"></a>4.1 认证</h3><p>身份认证，就是判断一个用户是否为合法用户的处理过程。最常用的简单身份认证方式是系统通过核对用户输入的用户名和口令，看其是否与系统中存储的该用户的用户名和口令一致，来判断用户身份是否正确。</p><h3 id="4-2-shiro中认证的关键对象"><a href="#4-2-shiro中认证的关键对象" class="headerlink" title="4.2 shiro中认证的关键对象"></a>4.2 shiro中认证的关键对象</h3><ul><li><strong>Subject：主体</strong></li></ul><p>访问系统的用户，主体可以是用户、程序等，进行认证的都称为主体； </p><ul><li><strong>Principal：身份信息</strong></li></ul><p>是主体（subject）进行身份认证的标识，标识必须具有<code>唯一性</code>，如用户名、手机号、邮箱地址等，一个主体可以有多个身份，但是必须有一个主身份（Primary Principal）。</p><ul><li><strong>credential：凭证信息</strong></li></ul><p>是只有主体自己知道的安全信息，如密码、证书等。</p><h3 id="4-3-认证流程"><a href="#4-3-认证流程" class="headerlink" title="4.3 认证流程"></a>4.3 认证流程</h3><p><img src="https://raw.githubusercontent.com/Agonywy/picGo/master/img/image-20200521204406302.png" alt></p><h3 id="4-4-认证的开发"><a href="#4-4-认证的开发" class="headerlink" title="4.4 认证的开发"></a>4.4 认证的开发</h3><h5 id="1-创建项目并引入依赖"><a href="#1-创建项目并引入依赖" class="headerlink" title="1. 创建项目并引入依赖"></a>1. 创建项目并引入依赖</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="2-引入shiro配置文件并加入如下配置"><a href="#2-引入shiro配置文件并加入如下配置" class="headerlink" title="2. 引入shiro配置文件并加入如下配置"></a>2. 引入shiro配置文件并加入如下配置</h5><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[users]</span></span><br><span class="line"><span class="attr">xiaochen</span>=<span class="number">123</span></span><br><span class="line"><span class="attr">zhangsan</span>=<span class="number">456</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Agonywy/picGo/master/img/image-20200521205203456.png" alt></p><h5 id="3-开发认证代码"><a href="#3-开发认证代码" class="headerlink" title="3.开发认证代码"></a>3.开发认证代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestAuthenticator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建securityManager</span></span><br><span class="line">        DefaultSecurityManager defaultSecurityManager = <span class="keyword">new</span> DefaultSecurityManager();</span><br><span class="line">        defaultSecurityManager.setRealm(<span class="keyword">new</span> IniRealm(<span class="string">"classpath:shiro.ini"</span>));</span><br><span class="line">        <span class="comment">//将安装工具类中设置默认安全管理器</span></span><br><span class="line">        SecurityUtils.setSecurityManager(defaultSecurityManager);</span><br><span class="line">        <span class="comment">//获取主体对象</span></span><br><span class="line">        Subject subject = SecurityUtils.getSubject();</span><br><span class="line">        <span class="comment">//创建token令牌</span></span><br><span class="line">        UsernamePasswordToken token = <span class="keyword">new</span> UsernamePasswordToken(<span class="string">"xiaochen1"</span>, <span class="string">"123"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            subject.login(token);<span class="comment">//用户登录</span></span><br><span class="line">            System.out.println(<span class="string">"登录成功~~"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnknownAccountException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">"用户名错误!!"</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IncorrectCredentialsException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">"密码错误!!!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>DisabledAccountException（帐号被禁用）</p></li><li><p>LockedAccountException（帐号被锁定）</p></li><li><p>ExcessiveAttemptsException（登录失败次数过多）</p></li><li><p>ExpiredCredentialsException（凭证过期）等</p></li></ul><hr><h3 id="自定义Realm"><a href="#自定义Realm" class="headerlink" title="自定义Realm"></a>自定义Realm</h3><p>上边的程序使用的是Shiro自带的IniRealm，IniRealm从ini配置文件中读取用户的信息，大部分情况下需要从系统的数据库中读取用户信息，所以需要自定义realm。</p><h5 id="1-shiro提供的Realm"><a href="#1-shiro提供的Realm" class="headerlink" title="1.shiro提供的Realm"></a>1.shiro提供的Realm</h5><p><img src="https://raw.githubusercontent.com/Agonywy/picGo/master/img/image-20200521212728541.png" alt></p><h5 id="2-根据认证源码认证使用的是SimpleAccountRealm"><a href="#2-根据认证源码认证使用的是SimpleAccountRealm" class="headerlink" title="2.根据认证源码认证使用的是SimpleAccountRealm"></a>2.根据认证源码认证使用的是SimpleAccountRealm</h5><p><img src="https://raw.githubusercontent.com/Agonywy/picGo/master/img/image-20200521213451998.png" alt></p><p><code>SimpleAccountRealm的部分源码中有两个方法一个是 认证 一个是 授权</code>,</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleAccountRealm</span> <span class="keyword">extends</span> <span class="title">AuthorizingRealm</span> </span>&#123;</span><br><span class="line"><span class="comment">//.......省略</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken token)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">        UsernamePasswordToken upToken = (UsernamePasswordToken) token;</span><br><span class="line">        SimpleAccount account = getUser(upToken.getUsername());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (account != <span class="keyword">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (account.isLocked()) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> LockedAccountException(<span class="string">"Account ["</span> + account + <span class="string">"] is locked."</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (account.isCredentialsExpired()) &#123;</span><br><span class="line">                String msg = <span class="string">"The credentials for account ["</span> + account + <span class="string">"] are expired"</span>;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ExpiredCredentialsException(msg);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> account;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principals)</span> </span>&#123;</span><br><span class="line">        String username = getUsername(principals);</span><br><span class="line">        USERS_LOCK.readLock().lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.users.get(username);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            USERS_LOCK.readLock().unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-自定义realm"><a href="#3-自定义realm" class="headerlink" title="3.自定义realm"></a>3.自定义realm</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义realm</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerRealm</span> <span class="keyword">extends</span> <span class="title">AuthorizingRealm</span> </span>&#123;</span><br><span class="line">    <span class="comment">//认证方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principals)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//授权方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken token)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">        String principal = (String) token.getPrincipal();</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">"xiaochen"</span>.equals(principal))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SimpleAuthenticationInfo(principal,<span class="string">"123"</span>,<span class="keyword">this</span>.getName());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-使用自定义Realm认证"><a href="#4-使用自定义Realm认证" class="headerlink" title="4.使用自定义Realm认证"></a>4.使用自定义Realm认证</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestAuthenticatorCusttomerRealm</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建securityManager</span></span><br><span class="line">        DefaultSecurityManager defaultSecurityManager = <span class="keyword">new</span> DefaultSecurityManager();</span><br><span class="line">        <span class="comment">//IniRealm realm = new IniRealm("classpath:shiro.ini");</span></span><br><span class="line">        <span class="comment">//设置为自定义realm获取认证数据</span></span><br><span class="line">        defaultSecurityManager.setRealm(<span class="keyword">new</span> CustomerRealm());</span><br><span class="line">        <span class="comment">//将安装工具类中设置默认安全管理器</span></span><br><span class="line">        SecurityUtils.setSecurityManager(defaultSecurityManager);</span><br><span class="line">        <span class="comment">//获取主体对象</span></span><br><span class="line">        Subject subject = SecurityUtils.getSubject();</span><br><span class="line">        <span class="comment">//创建token令牌</span></span><br><span class="line">        UsernamePasswordToken token = <span class="keyword">new</span> UsernamePasswordToken(<span class="string">"xiaochen"</span>, <span class="string">"123"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            subject.login(token);<span class="comment">//用户登录</span></span><br><span class="line">            System.out.println(<span class="string">"登录成功~~"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnknownAccountException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">"用户名错误!!"</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IncorrectCredentialsException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">"密码错误!!!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用MD5和Salt"><a href="#使用MD5和Salt" class="headerlink" title="使用MD5和Salt"></a>使用MD5和Salt</h3><blockquote><p>实际应用是将盐和散列后的值存在数据库中，自动realm从数据库取出盐和加密后的值由shiro完成密码校验。</p></blockquote><h5 id="1-自定义md5-salt的realm"><a href="#1-自定义md5-salt的realm" class="headerlink" title="1.自定义md5+salt的realm"></a>1.自定义md5+salt的realm</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义md5+salt realm</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerRealm</span> <span class="keyword">extends</span> <span class="title">AuthorizingRealm</span> </span>&#123;</span><br><span class="line">    <span class="comment">//认证方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principals)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//授权方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken token)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">        String principal = (String) token.getPrincipal();</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">"xiaochen"</span>.equals(principal))&#123;</span><br><span class="line">            String password = <span class="string">"3c88b338102c1a343bcb88cd3878758e"</span>;</span><br><span class="line">            String salt = <span class="string">"Q4F%"</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SimpleAuthenticationInfo(principal,password, </span><br><span class="line">                                                ByteSource.Util.bytes(salt),<span class="keyword">this</span>.getName());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="2-使用md5-salt-认证"><a href="#2-使用md5-salt-认证" class="headerlink" title="2.使用md5 + salt 认证"></a>2.使用md5 + salt 认证</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestAuthenticatorCusttomerRealm</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建securityManager</span></span><br><span class="line">        DefaultSecurityManager defaultSecurityManager = <span class="keyword">new</span> DefaultSecurityManager();</span><br><span class="line">        <span class="comment">//IniRealm realm = new IniRealm("classpath:shiro.ini");</span></span><br><span class="line">        <span class="comment">//设置为自定义realm获取认证数据</span></span><br><span class="line">        CustomerRealm customerRealm = <span class="keyword">new</span> CustomerRealm();</span><br><span class="line">        <span class="comment">//设置md5加密</span></span><br><span class="line">        HashedCredentialsMatcher credentialsMatcher = <span class="keyword">new</span> HashedCredentialsMatcher();</span><br><span class="line">        credentialsMatcher.setHashAlgorithmName(<span class="string">"MD5"</span>);</span><br><span class="line">        credentialsMatcher.setHashIterations(<span class="number">1024</span>);<span class="comment">//设置散列次数</span></span><br><span class="line">        customerRealm.setCredentialsMatcher(credentialsMatcher);</span><br><span class="line">        defaultSecurityManager.setRealm(customerRealm);</span><br><span class="line">        <span class="comment">//将安装工具类中设置默认安全管理器</span></span><br><span class="line">        SecurityUtils.setSecurityManager(defaultSecurityManager);</span><br><span class="line">        <span class="comment">//获取主体对象</span></span><br><span class="line">        Subject subject = SecurityUtils.getSubject();</span><br><span class="line">        <span class="comment">//创建token令牌</span></span><br><span class="line">        UsernamePasswordToken token = <span class="keyword">new</span> UsernamePasswordToken(<span class="string">"xiaochen"</span>, <span class="string">"123"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            subject.login(token);<span class="comment">//用户登录</span></span><br><span class="line">            System.out.println(<span class="string">"登录成功~~"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnknownAccountException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">"用户名错误!!"</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IncorrectCredentialsException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">"密码错误!!!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="Shiro中的授权"><a href="#Shiro中的授权" class="headerlink" title="Shiro中的授权"></a>Shiro中的授权</h2><h3 id="5-1-授权"><a href="#5-1-授权" class="headerlink" title="5.1 授权"></a>5.1 授权</h3><p>授权，即访问控制，控制谁能访问哪些资源。主体进行身份认证后需要分配权限方可访问系统的资源，对于某些资源没有权限是无法访问的。</p><h3 id="5-2-关键对象"><a href="#5-2-关键对象" class="headerlink" title="5.2 关键对象"></a>5.2 关键对象</h3><p><strong>授权可简单理解为who对what(which)进行How操作：</strong></p><p><code>Who，即主体（Subject）</code>，主体需要访问系统中的资源。</p><p><code>What，即资源（Resource)</code>，如系统菜单、页面、按钮、类方法、系统商品信息等。资源包括<code>资源类型</code>和<code>资源实例</code>，比如<code>商品信息为资源类型</code>，类型为t01的商品为<code>资源实例</code>，编号为001的商品信息也属于资源实例。</p><p><code>How，权限/许可（Permission)</code>，规定了主体对资源的操作许可，权限离开资源没有意义，如用户查询权限、用户添加权限、某个类方法的调用权限、编号为001用户的修改权限等，通过权限可知主体对哪些资源都有哪些操作许可。</p><h3 id="5-3-授权流程"><a href="#5-3-授权流程" class="headerlink" title="5.3 授权流程"></a>5.3 授权流程</h3><p><img src="https://raw.githubusercontent.com/Agonywy/picGo/master/img/image-20200521230705964.png" alt></p><h3 id="5-4-授权方式"><a href="#5-4-授权方式" class="headerlink" title="5.4 授权方式"></a>5.4 授权方式</h3><ul><li><p><strong>基于角色的访问控制</strong></p><ul><li><p>RBAC基于角色的访问控制（Role-Based Access Control）是以角色为中心进行访问控制</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(subject.hasRole(<span class="string">"admin"</span>))&#123;</span><br><span class="line">   <span class="comment">//操作什么资源</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>基于资源的访问控制</strong></p><ul><li><p>RBAC基于资源的访问控制（Resource-Based Access Control）是以资源为中心进行访问控制</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(subject.isPermission(<span class="string">"user:update:01"</span>))&#123; <span class="comment">//资源实例</span></span><br><span class="line">  <span class="comment">//对01用户进行修改</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(subject.isPermission(<span class="string">"user:update:*"</span>))&#123;  <span class="comment">//资源类型</span></span><br><span class="line">  <span class="comment">//对01用户进行修改</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="5-5-权限字符串"><a href="#5-5-权限字符串" class="headerlink" title="5.5 权限字符串"></a>5.5 权限字符串</h3><p>​        权限字符串的规则是：<strong>资源标识符：操作：资源实例标识符</strong>，意思是对哪个资源的哪个实例具有什么操作，“:”是资源/操作/实例的分割符，权限字符串也可以使用*通配符。</p><p>例子：</p><ul><li>用户创建权限：user:create，或user:create:*</li><li>用户修改实例001的权限：user:update:001</li><li>用户实例001的所有权限：user:*：001</li></ul><h3 id="5-6-shiro中授权编程实现方式"><a href="#5-6-shiro中授权编程实现方式" class="headerlink" title="5.6 shiro中授权编程实现方式"></a>5.6 shiro中授权编程实现方式</h3><ul><li><p><strong>编程式</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Subject subject = SecurityUtils.getSubject();</span><br><span class="line"><span class="keyword">if</span>(subject.hasRole(“admin”)) &#123;</span><br><span class="line"><span class="comment">//有权限</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//无权限</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>注解式</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequiresRoles</span>(<span class="string">"admin"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//有权限</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>标签式</strong></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">JSP/GSP 标签：在JSP/GSP 页面通过相应的标签完成：</span><br><span class="line">&lt;shiro:hasRole name=<span class="string">"admin"</span>&gt;</span><br><span class="line">&lt;!— 有权限—&gt;</span><br><span class="line">&lt;/shiro:hasRole&gt;</span><br><span class="line">注意: Thymeleaf 中使用shiro需要额外集成!</span><br></pre></td></tr></table></figure></li><li></li></ul><h3 id="5-7-开发授权"><a href="#5-7-开发授权" class="headerlink" title="5.7 开发授权"></a>5.7 开发授权</h3><h5 id="1-realm的实现"><a href="#1-realm的实现" class="headerlink" title="1.realm的实现"></a>1.realm的实现</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerRealm</span> <span class="keyword">extends</span> <span class="title">AuthorizingRealm</span> </span>&#123;</span><br><span class="line">    <span class="comment">//认证方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principals)</span> </span>&#123;</span><br><span class="line">        String primaryPrincipal = (String) principals.getPrimaryPrincipal();</span><br><span class="line">        System.out.println(<span class="string">"primaryPrincipal = "</span> + primaryPrincipal);</span><br><span class="line"></span><br><span class="line">        SimpleAuthorizationInfo simpleAuthorizationInfo = <span class="keyword">new</span> SimpleAuthorizationInfo();</span><br><span class="line"></span><br><span class="line">        simpleAuthorizationInfo.addRole(<span class="string">"admin"</span>);</span><br><span class="line"></span><br><span class="line">        simpleAuthorizationInfo.addStringPermission(<span class="string">"user:update:*"</span>);</span><br><span class="line">        simpleAuthorizationInfo.addStringPermission(<span class="string">"product:*:*"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> simpleAuthorizationInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//授权方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken token)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">        String principal = (String) token.getPrincipal();</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">"xiaochen"</span>.equals(principal))&#123;</span><br><span class="line">            String password = <span class="string">"3c88b338102c1a343bcb88cd3878758e"</span>;</span><br><span class="line">            String salt = <span class="string">"Q4F%"</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SimpleAuthenticationInfo(principal,password, </span><br><span class="line">                                                ByteSource.Util.bytes(salt),<span class="keyword">this</span>.getName());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-授权"><a href="#2-授权" class="headerlink" title="2.授权"></a>2.授权</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestAuthenticatorCusttomerRealm</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建securityManager</span></span><br><span class="line">        DefaultSecurityManager defaultSecurityManager = <span class="keyword">new</span> DefaultSecurityManager();</span><br><span class="line">        <span class="comment">//IniRealm realm = new IniRealm("classpath:shiro.ini");</span></span><br><span class="line">        <span class="comment">//设置为自定义realm获取认证数据</span></span><br><span class="line">        CustomerRealm customerRealm = <span class="keyword">new</span> CustomerRealm();</span><br><span class="line">        <span class="comment">//设置md5加密</span></span><br><span class="line">        HashedCredentialsMatcher credentialsMatcher = <span class="keyword">new</span> HashedCredentialsMatcher();</span><br><span class="line">        credentialsMatcher.setHashAlgorithmName(<span class="string">"MD5"</span>);</span><br><span class="line">        credentialsMatcher.setHashIterations(<span class="number">1024</span>);<span class="comment">//设置散列次数</span></span><br><span class="line">        customerRealm.setCredentialsMatcher(credentialsMatcher);</span><br><span class="line">        defaultSecurityManager.setRealm(customerRealm);</span><br><span class="line">        <span class="comment">//将安装工具类中设置默认安全管理器</span></span><br><span class="line">        SecurityUtils.setSecurityManager(defaultSecurityManager);</span><br><span class="line">        <span class="comment">//获取主体对象</span></span><br><span class="line">        Subject subject = SecurityUtils.getSubject();</span><br><span class="line">        <span class="comment">//创建token令牌</span></span><br><span class="line">        UsernamePasswordToken token = <span class="keyword">new</span> UsernamePasswordToken(<span class="string">"xiaochen"</span>, <span class="string">"123"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            subject.login(token);<span class="comment">//用户登录</span></span><br><span class="line">            System.out.println(<span class="string">"登录成功~~"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnknownAccountException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">"用户名错误!!"</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IncorrectCredentialsException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">"密码错误!!!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//认证通过</span></span><br><span class="line">        <span class="keyword">if</span>(subject.isAuthenticated())&#123;</span><br><span class="line">            <span class="comment">//基于角色权限管理</span></span><br><span class="line">            <span class="keyword">boolean</span> admin = subject.hasRole(<span class="string">"admin"</span>);</span><br><span class="line">            System.out.println(admin);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">boolean</span> permitted = subject.isPermitted(<span class="string">"product:create:001"</span>);</span><br><span class="line">            System.out.println(permitted);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="整合SpringBoot项目实战"><a href="#整合SpringBoot项目实战" class="headerlink" title="整合SpringBoot项目实战"></a>整合SpringBoot项目实战</h2><h3 id="6-0-整合思路"><a href="#6-0-整合思路" class="headerlink" title="6.0 整合思路"></a>6.0 整合思路</h3><p><img src="https://raw.githubusercontent.com/Agonywy/picGo/master/img/image-20200525185630463.png" alt></p><h3 id="6-1-创建springboot项目"><a href="#6-1-创建springboot项目" class="headerlink" title="6.1 创建springboot项目"></a>6.1 创建springboot项目</h3><p><img src="https://raw.githubusercontent.com/Agonywy/picGo/master/img/image-20200523100842032.png" alt></p><h3 id="6-2-引入shiro依赖"><a href="#6-2-引入shiro依赖" class="headerlink" title="6.2 引入shiro依赖"></a>6.2 引入shiro依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="6-3-配置shiro环境"><a href="#6-3-配置shiro环境" class="headerlink" title="6.3 配置shiro环境"></a>6.3 配置shiro环境</h3><h5 id="0-创建配置类"><a href="#0-创建配置类" class="headerlink" title="0.创建配置类"></a>0.创建配置类</h5><p><img src="https://raw.githubusercontent.com/Agonywy/picGo/master/img/image-20200523101256446.png" alt></p><h5 id="1-配置shiroFilterFactoryBean"><a href="#1-配置shiroFilterFactoryBean" class="headerlink" title="1.配置shiroFilterFactoryBean"></a>1.配置shiroFilterFactoryBean</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ShiroFilterFactoryBean <span class="title">getShiroFilterFactoryBean</span><span class="params">(SecurityManager securityManager)</span></span>&#123;</span><br><span class="line">  <span class="comment">//创建shiro的filter</span></span><br><span class="line">  ShiroFilterFactoryBean shiroFilterFactoryBean = <span class="keyword">new</span> ShiroFilterFactoryBean();</span><br><span class="line">  <span class="comment">//注入安全管理器</span></span><br><span class="line">  shiroFilterFactoryBean.setSecurityManager(securityManager);</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">return</span> shiroFilterFactoryBean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-配置WebSecurityManager"><a href="#2-配置WebSecurityManager" class="headerlink" title="2.配置WebSecurityManager"></a>2.配置WebSecurityManager</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> DefaultWebSecurityManager <span class="title">getSecurityManager</span><span class="params">(Realm realm)</span></span>&#123;</span><br><span class="line">  DefaultWebSecurityManager defaultWebSecurityManager = <span class="keyword">new</span> DefaultWebSecurityManager();</span><br><span class="line">  defaultWebSecurityManager.setRealm(realm);</span><br><span class="line">  <span class="keyword">return</span> defaultWebSecurityManager;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-创建自定义realm"><a href="#3-创建自定义realm" class="headerlink" title="3.创建自定义realm"></a>3.创建自定义realm</h5><p><img src="https://raw.githubusercontent.com/Agonywy/picGo/master/img/image-20200523101402213.png" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerRealm</span> <span class="keyword">extends</span> <span class="title">AuthorizingRealm</span> </span>&#123;</span><br><span class="line">    <span class="comment">//处理授权</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principals)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//处理认证</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken token)</span> <span class="keyword">throws</span> </span></span><br><span class="line"><span class="function">      AuthenticationException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-配置自定义realm"><a href="#4-配置自定义realm" class="headerlink" title="4.配置自定义realm"></a>4.配置自定义realm</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建自定义realm</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Realm <span class="title">getRealm</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> CustomerRealm();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="5-编写控制器跳转至index-html"><a href="#5-编写控制器跳转至index-html" class="headerlink" title="5.编写控制器跳转至index.html"></a>5.编写控制器跳转至index.html</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IndexController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"index"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"跳转至主页"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Agonywy/picGo/master/img/image-20200523101733157.png" alt></p><p><img src="https://raw.githubusercontent.com/Agonywy/picGo/master/img/image-20200523101857528.png" alt></p><h5 id="6-启动springboot应用访问index"><a href="#6-启动springboot应用访问index" class="headerlink" title="6.启动springboot应用访问index"></a>6.启动springboot应用访问index</h5><p><img src="https://raw.githubusercontent.com/Agonywy/picGo/master/img/image-20200523101955121.png" alt></p><ul><li>注意:<ul><li><strong>默认在配置好shiro环境后默认环境中没有对项目中任何资源进行权限控制,所有现在项目中所有资源都可以通过路径访问</strong></li></ul></li></ul><h5 id="7-加入权限控制"><a href="#7-加入权限控制" class="headerlink" title="7.加入权限控制"></a>7.加入权限控制</h5><ul><li><p>修改ShiroFilterFactoryBean配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注入安全管理器</span></span><br><span class="line">shiroFilterFactoryBean.setSecurityManager(securityManager);</span><br><span class="line">Map&lt;String,String&gt; map =  <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">map.put(<span class="string">"/**"</span>,<span class="string">"authc"</span>);</span><br><span class="line"><span class="comment">//配置认证和授权规则</span></span><br><span class="line">shiroFilterFactoryBean.setFilterChainDefinitionMap(map);</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Agonywy/picGo/master/img/image-20200523102303320.png" alt></p><ul><li><strong>/**</strong> 代表拦截项目中一切资源  <strong>authc</strong> 代表shiro中的一个filter的别名,详细内容看文档的shirofilter列表</li></ul></li></ul><h5 id="8-重启项目访问查看"><a href="#8-重启项目访问查看" class="headerlink" title="8.重启项目访问查看"></a>8.重启项目访问查看</h5><p><img src="https://raw.githubusercontent.com/Agonywy/picGo/master/img/image-20200523102831750.png" alt></p><h3 id="6-4-常见过滤器"><a href="#6-4-常见过滤器" class="headerlink" title="6.4 常见过滤器"></a>6.4 常见过滤器</h3><ul><li>注意: <strong>shiro提供和多个默认的过滤器，我们可以用这些过滤器来配置控制指定url的权限：</strong></li></ul><table><thead><tr><th>配置缩写</th><th>对应的过滤器</th><th>功能</th></tr></thead><tbody><tr><td>anon</td><td>AnonymousFilter</td><td>指定url可以匿名访问</td></tr><tr><td>authc</td><td>FormAuthenticationFilter</td><td>指定url需要form表单登录，默认会从请求中获取<code>username</code>、<code>password</code>,<code>rememberMe</code>等参数并尝试登录，如果登录不了就会跳转到loginUrl配置的路径。我们也可以用这个过滤器做默认的登录逻辑，但是一般都是我们自己在控制器写登录逻辑的，自己写的话出错返回的信息都可以定制嘛。</td></tr><tr><td>authcBasic</td><td>BasicHttpAuthenticationFilter</td><td>指定url需要basic登录</td></tr><tr><td>logout</td><td>LogoutFilter</td><td>登出过滤器，配置指定url就可以实现退出功能，非常方便</td></tr><tr><td>noSessionCreation</td><td>NoSessionCreationFilter</td><td>禁止创建会话</td></tr><tr><td>perms</td><td>PermissionsAuthorizationFilter</td><td>需要指定权限才能访问</td></tr><tr><td>port</td><td>PortFilter</td><td>需要指定端口才能访问</td></tr><tr><td>rest</td><td>HttpMethodPermissionFilter</td><td>将http请求方法转化成相应的动词来构造一个权限字符串，这个感觉意义不大，有兴趣自己看源码的注释</td></tr><tr><td>roles</td><td>RolesAuthorizationFilter</td><td>需要指定角色才能访问</td></tr><tr><td>ssl</td><td>SslFilter</td><td>需要https请求才能访问</td></tr><tr><td>user</td><td>UserFilter</td><td>需要已登录或“记住我”的用户才能访问</td></tr></tbody></table><h3 id="6-5-认证实现"><a href="#6-5-认证实现" class="headerlink" title="6.5 认证实现"></a>6.5 认证实现</h3><h5 id="1-在login-jsp中开发认证界面"><a href="#1-在login-jsp中开发认证界面" class="headerlink" title="1. 在login.jsp中开发认证界面"></a>1. 在login.jsp中开发认证界面</h5><p><img src="https://raw.githubusercontent.com/Agonywy/picGo/master/img/image-20200526083148253.png" alt></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"$&#123;pageContext.request.contextPath&#125;/user/login"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">  用户名:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> &gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">  密码  : <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"登录"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="2-开发controller"><a href="#2-开发controller" class="headerlink" title="2. 开发controller"></a>2. 开发controller</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 用来处理身份认证</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> username</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> password</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">  <span class="meta">@RequestMapping</span>(<span class="string">"login"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(String username,String password)</span></span>&#123;</span><br><span class="line">    <span class="comment">//获取主体对象</span></span><br><span class="line">    Subject subject = SecurityUtils.getSubject();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      subject.login(<span class="keyword">new</span> UsernamePasswordToken(username,password));</span><br><span class="line">      <span class="keyword">return</span>  <span class="string">"redirect:/index.jsp"</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (UnknownAccountException e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">      System.out.println(<span class="string">"用户名错误!"</span>);</span><br><span class="line">    &#125;<span class="keyword">catch</span> (IncorrectCredentialsException e)&#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">      System.out.println(<span class="string">"密码错误!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"redirect:/login.jsp"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>在认证过程中使用subject.login进行认证</strong></li></ul><h5 id="3-开发realm中返回静态数据-未连接数据库"><a href="#3-开发realm中返回静态数据-未连接数据库" class="headerlink" title="3.开发realm中返回静态数据(未连接数据库)"></a>3.开发realm中返回静态数据(未连接数据库)</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken token)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"=========================="</span>);</span><br><span class="line">        String principal = (String) token.getPrincipal();</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">"xiaochen"</span>.equals(principal))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SimpleAuthenticationInfo(principal,<span class="string">"123"</span>,<span class="keyword">this</span>.getName());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-启动项目以realm中定义静态数据进行认证"><a href="#4-启动项目以realm中定义静态数据进行认证" class="headerlink" title="4.启动项目以realm中定义静态数据进行认证"></a>4.启动项目以realm中定义静态数据进行认证</h5><p><img src="https://raw.githubusercontent.com/Agonywy/picGo/master/img/image-20200526083148253.png" alt></p><p><img src="https://raw.githubusercontent.com/Agonywy/picGo/master/img/image-20200526082639318.png" alt></p><p><img src="https://raw.githubusercontent.com/Agonywy/picGo/master/img/image-20200526082620621.png" alt></p><ul><li>有md5和随机盐的认证就实现啦**</li></ul><h3 id="6-6-退出认证"><a href="#6-6-退出认证" class="headerlink" title="6.6 退出认证"></a>6.6 退出认证</h3><h5 id="1-开发页面退出连接"><a href="#1-开发页面退出连接" class="headerlink" title="1.开发页面退出连接"></a>1.开发页面退出连接</h5><p><img src="https://raw.githubusercontent.com/Agonywy/picGo/master/img/image-20200526082851800.png" alt></p><h5 id="2-开发controller-1"><a href="#2-开发controller-1" class="headerlink" title="2.开发controller"></a>2.开发controller</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 退出登录</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">  <span class="meta">@RequestMapping</span>(<span class="string">"logout"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">logout</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Subject subject = SecurityUtils.getSubject();</span><br><span class="line">    subject.logout();<span class="comment">//退出用户</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"redirect:/login.jsp"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-修改退出连接访问退出路径"><a href="#3-修改退出连接访问退出路径" class="headerlink" title="3.修改退出连接访问退出路径"></a>3.修改退出连接访问退出路径</h5><p><img src="https://raw.githubusercontent.com/Agonywy/picGo/master/img/image-20200526083056062.png" alt></p><h5 id="4-退出之后访问受限资源立即返回认证界面"><a href="#4-退出之后访问受限资源立即返回认证界面" class="headerlink" title="4.退出之后访问受限资源立即返回认证界面"></a>4.退出之后访问受限资源立即返回认证界面</h5><p><img src="https://raw.githubusercontent.com/Agonywy/picGo/master/img/image-20200526083148253.png" alt></p><h3 id="6-7-MD5、Salt的认证实现"><a href="#6-7-MD5、Salt的认证实现" class="headerlink" title="6.7 MD5、Salt的认证实现"></a>6.7 MD5、Salt的认证实现</h3><h4 id="1-开发数据库注册"><a href="#1-开发数据库注册" class="headerlink" title="1.开发数据库注册"></a>1.开发数据库注册</h4><h5 id="0-开发注册界面"><a href="#0-开发注册界面" class="headerlink" title="0.开发注册界面"></a>0.开发注册界面</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>用户注册<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"$&#123;pageContext.request.contextPath&#125;/user/register"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">  用户名:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> &gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">  密码  : <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"立即注册"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Agonywy/picGo/master/img/20201030161202.png" alt></p><h5 id="1-创建数据表结构"><a href="#1-创建数据表结构" class="headerlink" title="1.创建数据表结构"></a>1.创建数据表结构</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="keyword">NAMES</span> utf8mb4;</span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS = <span class="number">0</span>;</span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for t_user</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`t_user`</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`t_user`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">6</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`username`</span> <span class="built_in">varchar</span>(<span class="number">40</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`password`</span> <span class="built_in">varchar</span>(<span class="number">40</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`salt`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">2</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Agonywy/picGo/master/img/20201030161231.png" alt></p><h5 id="2-项目引入依赖"><a href="#2-项目引入依赖" class="headerlink" title="2.项目引入依赖"></a>2.项目引入依赖</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--mybatis相关依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--mysql--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.38<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--druid--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.19<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="3-配置application-properties配置文件"><a href="#3-配置application-properties配置文件" class="headerlink" title="3.配置application.properties配置文件"></a>3.配置application.properties配置文件</h5><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">server.port</span>=<span class="string">8888</span></span><br><span class="line"><span class="meta">server.servlet.context-path</span>=<span class="string">/shiro</span></span><br><span class="line"><span class="meta">spring.application.name</span>=<span class="string">shiro</span></span><br><span class="line"></span><br><span class="line"><span class="meta">spring.mvc.view.prefix</span>=<span class="string">/</span></span><br><span class="line"><span class="meta">spring.mvc.view.suffix</span>=<span class="string">.jsp</span></span><br><span class="line"><span class="comment">#新增配置</span></span><br><span class="line"><span class="meta">spring.datasource.type</span>=<span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"><span class="meta">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="meta">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3306/shiro?characterEncoding=UTF-8</span></span><br><span class="line"><span class="meta">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">spring.datasource.password</span>=<span class="string">root</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">mybatis.type-aliases-package</span>=<span class="string">com.baizhi.springboot_jsp_shiro.entity</span></span><br><span class="line"><span class="meta">mybatis.mapper-locations</span>=<span class="string">classpath:com/baizhi/mapper/*.xml</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Agonywy/picGo/master/img/20201030161530.png" alt></p><h5 id="4-创建entity"><a href="#4-创建entity" class="headerlink" title="4.创建entity"></a>4.创建entity</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Accessors</span>(chain = <span class="keyword">true</span>)</span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String  id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String salt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="5-创建DAO接口"><a href="#5-创建DAO接口" class="headerlink" title="5.创建DAO接口"></a>5.创建DAO接口</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDAO</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">save</span><span class="params">(User user)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="6-开发mapper配置文件"><a href="#6-开发mapper配置文件" class="headerlink" title="6.开发mapper配置文件"></a>6.开发mapper配置文件</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"save"</span> <span class="attr">parameterType</span>=<span class="string">"User"</span> <span class="attr">useGeneratedKeys</span>=<span class="string">"true"</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line">  insert into t_user values(#&#123;id&#125;,#&#123;username&#125;,#&#123;password&#125;,#&#123;salt&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="7-开发service接口"><a href="#7-开发service接口" class="headerlink" title="7.开发service接口"></a>7.开发service接口</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="comment">//注册用户方法</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">register</span><span class="params">(User user)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="8-创建salt工具类"><a href="#8-创建salt工具类" class="headerlink" title="8.创建salt工具类"></a>8.创建salt工具类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SaltUtils</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成salt的静态方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> n</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getSalt</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">char</span>[] chars = <span class="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz01234567890!@#$%^&amp;*()"</span>.toCharArray();</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">char</span> aChar = chars[<span class="keyword">new</span> Random().nextInt(chars.length)];</span><br><span class="line">            sb.append(aChar);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="9-开发service实现类"><a href="#9-开发service实现类" class="headerlink" title="9.开发service实现类"></a>9.开发service实现类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDAO userDAO;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//处理业务调用dao</span></span><br><span class="line">        <span class="comment">//1.生成随机盐</span></span><br><span class="line">        String salt = SaltUtils.getSalt(<span class="number">8</span>);</span><br><span class="line">        <span class="comment">//2.将随机盐保存到数据</span></span><br><span class="line">        user.setSalt(salt);</span><br><span class="line">        <span class="comment">//3.明文密码进行md5 + salt + hash散列</span></span><br><span class="line">        Md5Hash md5Hash = <span class="keyword">new</span> Md5Hash(user.getPassword(),salt,<span class="number">1024</span>);</span><br><span class="line">        user.setPassword(md5Hash.toHex());</span><br><span class="line">        userDAO.save(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="10-开发Controller"><a href="#10-开发Controller" class="headerlink" title="10.开发Controller"></a>10.开发Controller</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户注册</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"register"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">register</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            userService.register(user);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"redirect:/login.jsp"</span>;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"redirect:/register.jsp"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="11-启动项目进行注册"><a href="#11-启动项目进行注册" class="headerlink" title="11.启动项目进行注册"></a>11.启动项目进行注册</h5><p><img src="https://raw.githubusercontent.com/Agonywy/picGo/master/img/20201030161607.png" alt></p><hr><h4 id="2-开发数据库认证"><a href="#2-开发数据库认证" class="headerlink" title="2.开发数据库认证"></a>2.开发数据库认证</h4><h5 id="0-开发DAO"><a href="#0-开发DAO" class="headerlink" title="0.开发DAO"></a>0.开发DAO</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDAO</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">save</span><span class="params">(User user)</span></span>;</span><br><span class="line"><span class="comment">//根据身份信息认证的方法</span></span><br><span class="line">    <span class="function">User <span class="title">findByUserName</span><span class="params">(String username)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1-开发mapper配置文件"><a href="#1-开发mapper配置文件" class="headerlink" title="1.开发mapper配置文件"></a>1.开发mapper配置文件</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findByUserName"</span> <span class="attr">parameterType</span>=<span class="string">"String"</span> <span class="attr">resultType</span>=<span class="string">"User"</span>&gt;</span></span><br><span class="line">  select id,username,password,salt from t_user</span><br><span class="line">  where username = #&#123;username&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="2-开发Service接口"><a href="#2-开发Service接口" class="headerlink" title="2.开发Service接口"></a>2.开发Service接口</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="comment">//注册用户方法</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">register</span><span class="params">(User user)</span></span>;</span><br><span class="line">    <span class="comment">//根据用户名查询业务的方法</span></span><br><span class="line">    <span class="function">User <span class="title">findByUserName</span><span class="params">(String username)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-开发Service实现类"><a href="#3-开发Service实现类" class="headerlink" title="3.开发Service实现类"></a>3.开发Service实现类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Service</span>(<span class="string">"userService"</span>)</span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDAO userDAO;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findByUserName</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userDAO.findByUserName(username);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-开发在工厂中获取bean对象的工具类"><a href="#4-开发在工厂中获取bean对象的工具类" class="headerlink" title="4.开发在工厂中获取bean对象的工具类"></a>4.开发在工厂中获取bean对象的工具类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationContextUtils</span> <span class="keyword">implements</span> <span class="title">ApplicationContextAware</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ApplicationContext context;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.context = applicationContext;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据bean名字获取工厂中指定bean 对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getBean</span><span class="params">(String beanName)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> context.getBean(beanName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="5-修改自定义realm"><a href="#5-修改自定义realm" class="headerlink" title="5.修改自定义realm"></a>5.修改自定义realm</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken token)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">       System.out.println(<span class="string">"=========================="</span>);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//根据身份信息</span></span><br><span class="line">       String principal = (String) token.getPrincipal();</span><br><span class="line">       <span class="comment">//在工厂中获取service对象</span></span><br><span class="line">       UserService userService = (UserService) ApplicationContextUtils.getBean(<span class="string">"userService"</span>);</span><br><span class="line"><span class="comment">//根据身份信息查询</span></span><br><span class="line">       User user = userService.findByUserName(principal);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span>(!ObjectUtils.isEmpty(user))&#123;</span><br><span class="line">           <span class="comment">//返回数据库信息</span></span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">new</span> SimpleAuthenticationInfo(user.getUsername(),user.getPassword(), </span><br><span class="line">                                              ByteSource.Util.bytes(user.getSalt()),<span class="keyword">this</span>.getName());</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h5 id="6-修改ShiroConfig中realm使用凭证匹配器以及hash散列"><a href="#6-修改ShiroConfig中realm使用凭证匹配器以及hash散列" class="headerlink" title="6.修改ShiroConfig中realm使用凭证匹配器以及hash散列"></a>6.修改ShiroConfig中realm使用凭证匹配器以及hash散列</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Realm <span class="title">getRealm</span><span class="params">()</span></span>&#123;</span><br><span class="line">  CustomerRealm customerRealm = <span class="keyword">new</span> CustomerRealm();</span><br><span class="line">  <span class="comment">//设置hashed凭证匹配器</span></span><br><span class="line">  HashedCredentialsMatcher credentialsMatcher = <span class="keyword">new</span> HashedCredentialsMatcher();</span><br><span class="line">  <span class="comment">//设置md5加密</span></span><br><span class="line">  credentialsMatcher.setHashAlgorithmName(<span class="string">"md5"</span>);</span><br><span class="line">  <span class="comment">//设置散列次数</span></span><br><span class="line">  credentialsMatcher.setHashIterations(<span class="number">1024</span>);</span><br><span class="line">  customerRealm.setCredentialsMatcher(credentialsMatcher);</span><br><span class="line">  <span class="keyword">return</span> customerRealm;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Agonywy/picGo/master/img/20201030161720.png" alt></p><h3 id="6-8-授权实现"><a href="#6-8-授权实现" class="headerlink" title="6.8 授权实现"></a>6.8 授权实现</h3><h5 id="0-页面资源授权"><a href="#0-页面资源授权" class="headerlink" title="0.页面资源授权"></a>0.页面资源授权</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;%<span class="meta">@taglib</span> prefix=<span class="string">"shiro"</span> uri=<span class="string">"http://shiro.apache.org/tags"</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;shiro:hasAnyRoles name=<span class="string">"user,admin"</span>&gt;</span><br><span class="line">        &lt;li&gt;&lt;a href=""&gt;用户管理&lt;/a&gt;</span><br><span class="line">            &lt;ul&gt;</span><br><span class="line">                &lt;shiro:hasPermission name=<span class="string">"user:add:*"</span>&gt;</span><br><span class="line">                &lt;li&gt;&lt;a href=""&gt;添加&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                &lt;/shiro:hasPermission&gt;</span><br><span class="line">                &lt;shiro:hasPermission name=<span class="string">"user:delete:*"</span>&gt;</span><br><span class="line">                    &lt;li&gt;&lt;a href=""&gt;删除&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                &lt;/shiro:hasPermission&gt;</span><br><span class="line">                &lt;shiro:hasPermission name=<span class="string">"user:update:*"</span>&gt;</span><br><span class="line">                    &lt;li&gt;&lt;a href=""&gt;修改&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                &lt;/shiro:hasPermission&gt;</span><br><span class="line">                &lt;shiro:hasPermission name=<span class="string">"user:find:*"</span>&gt;</span><br><span class="line">                    &lt;li&gt;&lt;a href=""&gt;查询&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                &lt;/shiro:hasPermission&gt;</span><br><span class="line">            &lt;/ul&gt;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">        &lt;/shiro:hasAnyRoles&gt;</span><br><span class="line">        &lt;shiro:hasRole name=<span class="string">"admin"</span>&gt;</span><br><span class="line">            &lt;li&gt;&lt;a href=""&gt;商品管理&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;&lt;a href=""&gt;订单管理&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;&lt;a href=""&gt;物流管理&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">        &lt;/shiro:hasRole&gt;</span><br></pre></td></tr></table></figure><h5 id="1-代码方式授权"><a href="#1-代码方式授权" class="headerlink" title="1.代码方式授权"></a>1.代码方式授权</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"save"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">save</span><span class="params">()</span></span>&#123;</span><br><span class="line">  System.out.println(<span class="string">"进入方法"</span>);</span><br><span class="line">  <span class="comment">//获取主体对象</span></span><br><span class="line">  Subject subject = SecurityUtils.getSubject();</span><br><span class="line">  <span class="comment">//代码方式</span></span><br><span class="line">  <span class="keyword">if</span> (subject.hasRole(<span class="string">"admin"</span>)) &#123;</span><br><span class="line">    System.out.println(<span class="string">"保存订单!"</span>);</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"无权访问!"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//基于权限字符串</span></span><br><span class="line">  <span class="comment">//....</span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">"redirect:/index.jsp"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Agonywy/picGo/master/img/20201030161740.png" alt></p><h5 id="2-方法调用授权"><a href="#2-方法调用授权" class="headerlink" title="2.方法调用授权"></a>2.方法调用授权</h5><ul><li>@RequiresRoles               用来基于角色进行授权</li><li>@RequiresPermissions    用来基于权限进行授权</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequiresRoles</span>(value=&#123;<span class="string">"admin"</span>,<span class="string">"user"</span>&#125;)<span class="comment">//用来判断角色  同时具有 admin user</span></span><br><span class="line"><span class="meta">@RequiresPermissions</span>(<span class="string">"user:update:01"</span>) <span class="comment">//用来判断权限字符串</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"save"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">save</span><span class="params">()</span></span>&#123;</span><br><span class="line">  System.out.println(<span class="string">"进入方法"</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">"redirect:/index.jsp"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Agonywy/picGo/master/img/20201030161750.png" alt></p><hr><h5 id="3-授权数据持久化"><a href="#3-授权数据持久化" class="headerlink" title="3.授权数据持久化"></a>3.授权数据持久化</h5><p><img src="https://raw.githubusercontent.com/Agonywy/picGo/master/img/20201030161757.png" alt></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="keyword">NAMES</span> utf8mb4;</span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for t_pers</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`t_pers`</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`t_pers`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">6</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">80</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`url`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for t_role</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`t_role`</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`t_role`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">6</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">60</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for t_role_perms</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`t_role_perms`</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`t_role_perms`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">6</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`roleid`</span> <span class="built_in">int</span>(<span class="number">6</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`permsid`</span> <span class="built_in">int</span>(<span class="number">6</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for t_user</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`t_user`</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`t_user`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">6</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`username`</span> <span class="built_in">varchar</span>(<span class="number">40</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`password`</span> <span class="built_in">varchar</span>(<span class="number">40</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`salt`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">2</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for t_user_role</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`t_user_role`</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`t_user_role`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">6</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`userid`</span> <span class="built_in">int</span>(<span class="number">6</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`roleid`</span> <span class="built_in">int</span>(<span class="number">6</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><hr><h5 id="4-创建dao方法"><a href="#4-创建dao方法" class="headerlink" title="4.创建dao方法"></a>4.创建dao方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//根据用户名查询所有角色</span></span><br><span class="line"><span class="function">User <span class="title">findRolesByUserName</span><span class="params">(String username)</span></span>;</span><br><span class="line"><span class="comment">//根据角色id查询权限集合</span></span><br><span class="line"><span class="function">List&lt;Perms&gt; <span class="title">findPermsByRoleId</span><span class="params">(String id)</span></span>;</span><br></pre></td></tr></table></figure><h5 id="5-mapper实现"><a href="#5-mapper实现" class="headerlink" title="5.mapper实现"></a>5.mapper实现</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"userMap"</span> <span class="attr">type</span>=<span class="string">"User"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"uid"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"username"</span> <span class="attr">property</span>=<span class="string">"username"</span>/&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--角色信息--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"roles"</span> <span class="attr">javaType</span>=<span class="string">"list"</span> <span class="attr">ofType</span>=<span class="string">"Role"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"rname"</span> <span class="attr">property</span>=<span class="string">"name"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findRolesByUserName"</span> <span class="attr">parameterType</span>=<span class="string">"String"</span> <span class="attr">resultMap</span>=<span class="string">"userMap"</span>&gt;</span></span><br><span class="line">  SELECT u.id uid,u.username,r.id,r.NAME rname</span><br><span class="line">  FROM t_user u</span><br><span class="line">  LEFT JOIN t_user_role ur</span><br><span class="line">  ON u.id=ur.userid</span><br><span class="line">  LEFT JOIN t_role r</span><br><span class="line">  ON ur.roleid=r.id</span><br><span class="line">  WHERE u.username=#&#123;username&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findPermsByRoleId"</span> <span class="attr">parameterType</span>=<span class="string">"String"</span> <span class="attr">resultType</span>=<span class="string">"Perms"</span>&gt;</span></span><br><span class="line">  SELECT p.id,p.NAME,p.url,r.NAME</span><br><span class="line">  FROM t_role r</span><br><span class="line">  LEFT JOIN t_role_perms rp</span><br><span class="line">  ON r.id=rp.roleid</span><br><span class="line">  LEFT JOIN t_perms p ON rp.permsid=p.id</span><br><span class="line">  WHERE r.id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="6-Service接口"><a href="#6-Service接口" class="headerlink" title="6.Service接口"></a>6.Service接口</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据用户名查询所有角色</span></span><br><span class="line"><span class="function">User <span class="title">findRolesByUserName</span><span class="params">(String username)</span></span>;</span><br><span class="line"><span class="comment">//根据角色id查询权限集合</span></span><br><span class="line"><span class="function">List&lt;Perms&gt; <span class="title">findPermsByRoleId</span><span class="params">(String id)</span></span>;</span><br></pre></td></tr></table></figure><h5 id="7-Service实现"><a href="#7-Service实现" class="headerlink" title="7.Service实现"></a>7.Service实现</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Perms&gt; <span class="title">findPermsByRoleId</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> userDAO.findPermsByRoleId(id);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">findRolesByUserName</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> userDAO.findRolesByUserName(username);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="8-修改自定义realm"><a href="#8-修改自定义realm" class="headerlink" title="8.修改自定义realm"></a>8.修改自定义realm</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerRealm</span> <span class="keyword">extends</span> <span class="title">AuthorizingRealm</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principals)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取身份信息</span></span><br><span class="line">        String primaryPrincipal = (String) principals.getPrimaryPrincipal();</span><br><span class="line">        System.out.println(<span class="string">"调用授权验证: "</span>+primaryPrincipal);</span><br><span class="line">        <span class="comment">//根据主身份信息获取角色 和 权限信息</span></span><br><span class="line">        UserService userService = (UserService) ApplicationContextUtils.getBean(<span class="string">"userService"</span>);</span><br><span class="line">        User user = userService.findRolesByUserName(primaryPrincipal);</span><br><span class="line">        <span class="comment">//授权角色信息</span></span><br><span class="line">        <span class="keyword">if</span>(!CollectionUtils.isEmpty(user.getRoles()))&#123;</span><br><span class="line">            SimpleAuthorizationInfo simpleAuthorizationInfo = <span class="keyword">new</span> SimpleAuthorizationInfo();</span><br><span class="line">            user.getRoles().forEach(role-&gt;&#123;</span><br><span class="line">                simpleAuthorizationInfo.addRole(role.getName());</span><br><span class="line">                <span class="comment">//权限信息</span></span><br><span class="line">                List&lt;Perms&gt; perms = userService.findPermsByRoleId(role.getId());</span><br><span class="line">                <span class="keyword">if</span>(!CollectionUtils.isEmpty(perms))&#123;</span><br><span class="line">                    perms.forEach(perm-&gt;&#123;</span><br><span class="line">                        simpleAuthorizationInfo.addStringPermission(perm.getName());</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">return</span> simpleAuthorizationInfo;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Agonywy/picGo/master/img/20201030161806.png" alt></p><h5 id="9-启动测试"><a href="#9-启动测试" class="headerlink" title="9.启动测试"></a>9.启动测试</h5><hr><h3 id="6-9-使用CacheManager"><a href="#6-9-使用CacheManager" class="headerlink" title="6.9 使用CacheManager"></a>6.9 使用CacheManager</h3><h4 id="1-Cache-作用"><a href="#1-Cache-作用" class="headerlink" title="1.Cache 作用"></a>1.Cache 作用</h4><ul><li>Cache 缓存: <strong>计算机内存中一段数据</strong>  </li><li>作用: <strong>用来减轻DB的访问压力,从而提高系统的查询效率</strong></li><li>流程: </li></ul><p><img src="https://raw.githubusercontent.com/Agonywy/picGo/master/img/20201030162007.png" alt></p><h4 id="2-使用shiro中默认EhCache实现缓存"><a href="#2-使用shiro中默认EhCache实现缓存" class="headerlink" title="2.使用shiro中默认EhCache实现缓存"></a>2.使用shiro中默认EhCache实现缓存</h4><h5 id="1-引入依赖"><a href="#1-引入依赖" class="headerlink" title="1.引入依赖"></a>1.引入依赖</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--引入shiro和ehcache--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-ehcache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="2-开启缓存"><a href="#2-开启缓存" class="headerlink" title="2.开启缓存"></a>2.开启缓存</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//3.创建自定义realm</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Realm <span class="title">getRealm</span><span class="params">()</span></span>&#123;</span><br><span class="line">        CustomerRealm customerRealm = <span class="keyword">new</span> CustomerRealm();</span><br><span class="line">        <span class="comment">//修改凭证校验匹配器</span></span><br><span class="line">        HashedCredentialsMatcher credentialsMatcher = <span class="keyword">new</span> HashedCredentialsMatcher();</span><br><span class="line">        <span class="comment">//设置加密算法为md5</span></span><br><span class="line">        credentialsMatcher.setHashAlgorithmName(<span class="string">"MD5"</span>);</span><br><span class="line">        <span class="comment">//设置散列次数</span></span><br><span class="line">        credentialsMatcher.setHashIterations(<span class="number">1024</span>);</span><br><span class="line">        customerRealm.setCredentialsMatcher(credentialsMatcher);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//开启缓存管理器</span></span><br><span class="line">        customerRealm.setCachingEnabled(<span class="keyword">true</span>);</span><br><span class="line">        customerRealm.setAuthorizationCachingEnabled(<span class="keyword">true</span>);</span><br><span class="line">        customerRealm.setAuthorizationCachingEnabled(<span class="keyword">true</span>);</span><br><span class="line">        customerRealm.setCacheManager(<span class="keyword">new</span> EhCacheManager());</span><br><span class="line">        <span class="keyword">return</span> customerRealm;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="面进行测试"><a href="#面进行测试" class="headerlink" title="面进行测试"></a><img src="https://raw.githubusercontent.com/Agonywy/picGo/master/img/20201030161814.png" alt>面进行测试</h5><ul><li>注意:如果控制台没有任何sql展示说明缓存已经开启</li></ul><h4 id="3-shiro中使用Redis作为缓存实现"><a href="#3-shiro中使用Redis作为缓存实现" class="headerlink" title="3.shiro中使用Redis作为缓存实现"></a>3.shiro中使用Redis作为缓存实现</h4><h5 id="1-引入redis依赖"><a href="#1-引入redis依赖" class="headerlink" title="1.引入redis依赖"></a>1.引入redis依赖</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--redis整合springboot--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="2-配置redis连接"><a href="#2-配置redis连接" class="headerlink" title="2.配置redis连接"></a>2.配置redis连接</h5><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.redis.port</span>=<span class="string">6379</span></span><br><span class="line"><span class="meta">spring.redis.host</span>=<span class="string">localhost</span></span><br><span class="line"><span class="meta">spring.redis.database</span>=<span class="string">0</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Agonywy/picGo/master/img/20201030163910.png" alt></p><h5 id="3-启动redis服务"><a href="#3-启动redis服务" class="headerlink" title="3.启动redis服务"></a>3.启动redis服务</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">➜  bin ls</span><br><span class="line">dump.rdb        redis<span class="literal">-check</span><span class="literal">-aof</span> redis<span class="literal">-cli</span>       redis<span class="literal">-server</span>    redis.conf</span><br><span class="line">redis<span class="literal">-benchmark</span> redis<span class="literal">-check</span><span class="literal">-rdb</span> redis<span class="literal">-sentinel</span>  redis<span class="literal">-trib</span>.rb</span><br><span class="line">➜  bin ./redis<span class="literal">-server</span> redis.conf</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Agonywy/picGo/master/img/20201030163938.png" alt></p><h5 id="4-开发RedisCacheManager"><a href="#4-开发RedisCacheManager" class="headerlink" title="4.开发RedisCacheManager"></a>4.开发RedisCacheManager</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisCacheManager</span> <span class="keyword">implements</span> <span class="title">CacheManager</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;K, V&gt; <span class="function">Cache&lt;K, V&gt; <span class="title">getCache</span><span class="params">(String cacheName)</span> <span class="keyword">throws</span> CacheException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"缓存名称: "</span>+cacheName);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RedisCache&lt;K,V&gt;(cacheName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="5-开RedisCache实现"><a href="#5-开RedisCache实现" class="headerlink" title="5.开RedisCache实现"></a>5.开RedisCache实现</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisCache</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Cache</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String cacheName;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RedisCache</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RedisCache</span><span class="params">(String cacheName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cacheName = cacheName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(K k)</span> <span class="keyword">throws</span> CacheException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"获取缓存:"</span>+ k);</span><br><span class="line">        <span class="keyword">return</span> (V) getRedisTemplate().opsForHash().get(<span class="keyword">this</span>.cacheName,k.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K k, V v)</span> <span class="keyword">throws</span> CacheException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"设置缓存key: "</span>+k+<span class="string">" value:"</span>+v);</span><br><span class="line">        getRedisTemplate().opsForHash().put(<span class="keyword">this</span>.cacheName,k.toString(),v);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">remove</span><span class="params">(K k)</span> <span class="keyword">throws</span> CacheException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (V) getRedisTemplate().opsForHash().delete(<span class="keyword">this</span>.cacheName,k.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> v <span class="title">remove</span><span class="params">(k k)</span> <span class="keyword">throws</span> CacheException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (v) getRedisTemplate().opsForHash().delete(<span class="keyword">this</span>.cacheName,k.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> <span class="keyword">throws</span> CacheException </span>&#123;</span><br><span class="line">        getRedisTemplate().delete(<span class="keyword">this</span>.cacheName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getRedisTemplate().opsForHash().size(<span class="keyword">this</span>.cacheName).intValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;k&gt; <span class="title">keys</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getRedisTemplate().opsForHash().keys(<span class="keyword">this</span>.cacheName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Collection&lt;v&gt; <span class="title">values</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getRedisTemplate().opsForHash().values(<span class="keyword">this</span>.cacheName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> RedisTemplate <span class="title">getRedisTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        RedisTemplate redisTemplate = (RedisTemplate) ApplicationContextUtils.getBean(<span class="string">"redisTemplate"</span>);</span><br><span class="line">        redisTemplate.setKeySerializer(<span class="keyword">new</span> StringRedisSerializer());</span><br><span class="line">        redisTemplate.setHashKeySerializer(<span class="keyword">new</span> StringRedisSerializer());</span><br><span class="line">        <span class="keyword">return</span> redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//封装获取redisTemplate</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> RedisTemplate <span class="title">getRedisTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        RedisTemplate redisTemplate = (RedisTemplate) ApplicationContextUtils.getBean(<span class="string">"redisTemplate"</span>);</span><br><span class="line">        redisTemplate.setKeySerializer(<span class="keyword">new</span> StringRedisSerializer());</span><br><span class="line">        redisTemplate.setHashKeySerializer(<span class="keyword">new</span> StringRedisSerializer());</span><br><span class="line">        <span class="keyword">return</span> redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="6-启动项目测试发现报错"><a href="#6-启动项目测试发现报错" class="headerlink" title="6.启动项目测试发现报错"></a>6.启动项目测试发现报错</h5><p><img src="https://raw.githubusercontent.com/Agonywy/picGo/master/img/20201030164013.png" alt></p><p><img src="https://raw.githubusercontent.com/Agonywy/picGo/master/img/20201030164034.png" alt></p><ul><li><p>错误解释: <strong>由于shiro中提供的simpleByteSource实现没有实现序列化,所有在认证时出现错误信息</strong></p></li><li><p>解决方案: <strong>需要自动salt实现序列化</strong></p><ul><li><p>自定义salt实现序列化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自定义salt实现  实现序列化接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyByteSource</span> <span class="keyword">extends</span> <span class="title">SimpleByteSource</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyByteSource</span><span class="params">(String string)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(string);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在realm中使用自定义salt</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken token)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">  System.out.println(<span class="string">"=========================="</span>);</span><br><span class="line">  <span class="comment">//根据身份信息</span></span><br><span class="line">  String principal = (String) token.getPrincipal();</span><br><span class="line">  <span class="comment">//在工厂中获取service对象</span></span><br><span class="line">  UserService userService = (UserService) ApplicationContextUtils.getBean(<span class="string">"userService"</span>);</span><br><span class="line">  User user = userService.findByUserName(principal);</span><br><span class="line">  <span class="keyword">if</span>(!ObjectUtils.isEmpty(user))&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> SimpleAuthenticationInfo(user.getUsername(),user.getPassword(), </span><br><span class="line">                                      <span class="keyword">new</span> MyByteSource(user.getSalt()),<span class="keyword">this</span>.getName());</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Agonywy/picGo/master/img/20201030164103.png" alt></p></li></ul></li></ul><h5 id="7-再次启动测试-发现可以成功放入redis缓存"><a href="#7-再次启动测试-发现可以成功放入redis缓存" class="headerlink" title="7.再次启动测试,发现可以成功放入redis缓存"></a>7.再次启动测试,发现可以成功放入redis缓存</h5><p><img src="https://raw.githubusercontent.com/Agonywy/picGo/master/img/20201030164140.png" alt></p><hr><h4 id="4-加入验证码验证"><a href="#4-加入验证码验证" class="headerlink" title="4. 加入验证码验证"></a>4. 加入验证码验证</h4><h5 id="0-开发页面加入验证码"><a href="#0-开发页面加入验证码" class="headerlink" title="0.开发页面加入验证码"></a>0.开发页面加入验证码</h5><ul><li><p>开发控制器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"getImage"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getImage</span><span class="params">(HttpSession session, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">  <span class="comment">//生成验证码</span></span><br><span class="line">  String code = VerifyCodeUtils.generateVerifyCode(<span class="number">4</span>);</span><br><span class="line">  <span class="comment">//验证码放入session</span></span><br><span class="line">  session.setAttribute(<span class="string">"code"</span>,code);</span><br><span class="line">  <span class="comment">//验证码存入图片</span></span><br><span class="line">  ServletOutputStream os = response.getOutputStream();</span><br><span class="line">  response.setContentType(<span class="string">"image/png"</span>);</span><br><span class="line">  VerifyCodeUtils.outputImage(<span class="number">220</span>,<span class="number">60</span>,os,code);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>放行验证码</p><p><img src="https://raw.githubusercontent.com/Agonywy/picGo/master/img/20201030164202.png" alt></p></li><li><p>开发页面</p><p><img src="https://raw.githubusercontent.com/Agonywy/picGo/master/img/20201030164211.png" alt></p></li><li><p>修改认证流程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"login"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(String username, String password,String code,HttpSession session)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//比较验证码</span></span><br><span class="line">        String codes = (String) session.getAttribute(<span class="string">"code"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (codes.equalsIgnoreCase(code))&#123;</span><br><span class="line">                <span class="comment">//获取主体对象</span></span><br><span class="line">                Subject subject = SecurityUtils.getSubject();</span><br><span class="line">                    subject.login(<span class="keyword">new</span> UsernamePasswordToken(username, password));</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">"redirect:/index.jsp"</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"验证码错误!"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnknownAccountException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">"用户名错误!"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IncorrectCredentialsException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">"密码错误!"</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"redirect:/login.jsp"</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>修改salt不能序列化的问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自定义salt实现  实现序列化接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyByteSource</span> <span class="keyword">implements</span> <span class="title">ByteSource</span>,<span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">byte</span>[] bytes;</span><br><span class="line">    <span class="keyword">private</span> String cachedHex;</span><br><span class="line">    <span class="keyword">private</span> String cachedBase64;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//加入无参数构造方法实现序列化和反序列化</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyByteSource</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyByteSource</span><span class="params">(<span class="keyword">byte</span>[] bytes)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.bytes = bytes;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyByteSource</span><span class="params">(<span class="keyword">char</span>[] chars)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.bytes = CodecSupport.toBytes(chars);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyByteSource</span><span class="params">(String string)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.bytes = CodecSupport.toBytes(string);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyByteSource</span><span class="params">(ByteSource source)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.bytes = source.getBytes();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyByteSource</span><span class="params">(File file)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.bytes = (<span class="keyword">new</span> MyByteSource.BytesHelper()).getBytes(file);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyByteSource</span><span class="params">(InputStream stream)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.bytes = (<span class="keyword">new</span> MyByteSource.BytesHelper()).getBytes(stream);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isCompatible</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> o <span class="keyword">instanceof</span> <span class="keyword">byte</span>[] || o <span class="keyword">instanceof</span> <span class="keyword">char</span>[] || o <span class="keyword">instanceof</span> String || o <span class="keyword">instanceof</span> ByteSource || o <span class="keyword">instanceof</span> File || o <span class="keyword">instanceof</span> InputStream;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">byte</span>[] getBytes() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.bytes;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.bytes == <span class="keyword">null</span> || <span class="keyword">this</span>.bytes.length == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toHex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.cachedHex == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.cachedHex = Hex.encodeToString(<span class="keyword">this</span>.getBytes());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.cachedHex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toBase64</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.cachedBase64 == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.cachedBase64 = Base64.encodeToString(<span class="keyword">this</span>.getBytes());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.cachedBase64;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.toBase64();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.bytes != <span class="keyword">null</span> &amp;&amp; <span class="keyword">this</span>.bytes.length != <span class="number">0</span> ? Arrays.hashCode(<span class="keyword">this</span>.bytes) : <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (o <span class="keyword">instanceof</span> ByteSource) &#123;</span><br><span class="line">            ByteSource bs = (ByteSource)o;</span><br><span class="line">            <span class="keyword">return</span> Arrays.equals(<span class="keyword">this</span>.getBytes(), bs.getBytes());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">BytesHelper</span> <span class="keyword">extends</span> <span class="title">CodecSupport</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">BytesHelper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">byte</span>[] getBytes(File file) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.toBytes(file);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">byte</span>[] getBytes(InputStream stream) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.toBytes(stream);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr></li></ul><h2 id="Shiro整合springboot之thymeleaf权限控制"><a href="#Shiro整合springboot之thymeleaf权限控制" class="headerlink" title="Shiro整合springboot之thymeleaf权限控制"></a>Shiro整合springboot之thymeleaf权限控制</h2><h3 id="1-引入扩展依赖"><a href="#1-引入扩展依赖" class="headerlink" title="1.引入扩展依赖"></a>1.引入扩展依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.theborakompanioni<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-extras-shiro<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-页面中引入命名空间"><a href="#2-页面中引入命名空间" class="headerlink" title="2.页面中引入命名空间"></a>2.页面中引入命名空间</h3><ul><li>xmlns:shiro=”<a href="http://www.pollix.at/thymeleaf/shiro&quot;" target="_blank" rel="noopener">http://www.pollix.at/thymeleaf/shiro&quot;</a></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/1999/xhtml"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:shiro</span>=<span class="string">"http://www.pollix.at/thymeleaf/shiro"</span>&gt;</span></span><br><span class="line">......</span><br></pre></td></tr></table></figure><h3 id="3-常见权限控制标签使用"><a href="#3-常见权限控制标签使用" class="headerlink" title="3.常见权限控制标签使用"></a>3.常见权限控制标签使用</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 验证当前用户是否为“访客”，即未认证（包含未记住）的用户。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">shiro:guest</span>=<span class="string">""</span>&gt;</span>Please <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"login.html"</span>&gt;</span>login<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 认证通过或已记住的用户。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">shiro:user</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    Welcome back John! Not John? Click <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"login.html"</span>&gt;</span>here<span class="tag">&lt;/<span class="name">a</span>&gt;</span> to login.</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 已认证通过的用户。不包含已记住的用户，这是与user标签的区别所在。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">shiro:authenticated</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    Hello, <span class="tag">&lt;<span class="name">span</span> <span class="attr">shiro:principal</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>, how are you today?</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">shiro:authenticated</span>=<span class="string">""</span> <span class="attr">href</span>=<span class="string">"updateAccount.html"</span>&gt;</span>Update your contact information<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 输出当前用户信息，通常为登录帐号信息。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello, <span class="tag">&lt;<span class="name">shiro:principal</span>/&gt;</span>, how are you today?<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 未认证通过用户，与authenticated标签相对应。与guest标签的区别是，该标签包含已记住用户。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">shiro:notAuthenticated</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    Please <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"login.html"</span>&gt;</span>login<span class="tag">&lt;/<span class="name">a</span>&gt;</span> in order to update your credit card information.</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 验证当前用户是否属于该角色。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">shiro:hasRole</span>=<span class="string">"admin"</span> <span class="attr">href</span>=<span class="string">"admin.html"</span>&gt;</span>Administer the system<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="comment">&lt;!-- 拥有该角色 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 与hasRole标签逻辑相反，当用户不属于该角色时验证通过。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">shiro:lacksRole</span>=<span class="string">"developer"</span>&gt;</span><span class="comment">&lt;!-- 没有该角色 --&gt;</span></span><br><span class="line">    Sorry, you are not allowed to developer the system.</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 验证当前用户是否属于以下所有角色。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">shiro:hasAllRoles</span>=<span class="string">"developer, 2"</span>&gt;</span><span class="comment">&lt;!-- 角色与判断 --&gt;</span></span><br><span class="line">    You are a developer and a admin.</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 验证当前用户是否属于以下任意一个角色。  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">shiro:hasAnyRoles</span>=<span class="string">"admin, vip, developer,1"</span>&gt;</span><span class="comment">&lt;!-- 角色或判断 --&gt;</span></span><br><span class="line">    You are a admin, vip, or developer.</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--验证当前用户是否拥有指定权限。  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">shiro:hasPermission</span>=<span class="string">"userInfo:add"</span> <span class="attr">href</span>=<span class="string">"createUser.html"</span>&gt;</span>添加用户<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="comment">&lt;!-- 拥有权限 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 与hasPermission标签逻辑相反，当前用户没有制定权限时，验证通过。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">shiro:lacksPermission</span>=<span class="string">"userInfo:del"</span>&gt;</span><span class="comment">&lt;!-- 没有权限 --&gt;</span></span><br><span class="line">    Sorry, you are not allowed to delete user accounts.</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 验证当前用户是否拥有以下所有角色。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">shiro:hasAllPermissions</span>=<span class="string">"userInfo:view, userInfo:add"</span>&gt;</span><span class="comment">&lt;!-- 权限与判断 --&gt;</span></span><br><span class="line">    You can see or add users.</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 验证当前用户是否拥有以下任意一个权限。  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">shiro:hasAnyPermissions</span>=<span class="string">"userInfo:view, userInfo:del"</span>&gt;</span><span class="comment">&lt;!-- 权限或判断 --&gt;</span></span><br><span class="line">    You can see or delete users.</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">shiro:hasPermission</span>=<span class="string">"pp"</span> <span class="attr">href</span>=<span class="string">"createUser.html"</span>&gt;</span>Create a new User<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-加入shiro的方言配置"><a href="#4-加入shiro的方言配置" class="headerlink" title="4.加入shiro的方言配置"></a>4.加入shiro的方言配置</h3><ul><li>页面标签不起作用一定要记住加入方言处理</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span>(name = <span class="string">"shiroDialect"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ShiroDialect <span class="title">shiroDialect</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> ShiroDialect();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Agonywy/picGo/master/img/20201030164259.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;权限的管理&quot;&gt;&lt;a href=&quot;#权限的管理&quot; class=&quot;headerlink&quot; title=&quot;权限的管理&quot;&gt;&lt;/a&gt;权限的管理&lt;/h2&gt;&lt;h3 id=&quot;1-1-什么是权限管理&quot;&gt;&lt;a href=&quot;#1-1-什么是权限管理&quot; class=&quot;headerlink&quot; title=&quot;1.1 什么是权限管理&quot;&gt;&lt;/a&gt;1.1 什么是权限管理&lt;/h3&gt;&lt;p&gt;基本上涉及到用户参与的系统都要进行权限管理，权限管理属于系统安全的范畴，权限管理实现&lt;code&gt;对用户访问系统的控制&lt;/code&gt;，按照安全规则或者&lt;a href=&quot;http://baike.baidu.com/view/160028.htm&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;安全策略&lt;/a&gt;控制用户可以访问而且只能访问自己被授权的资源。&lt;/p&gt;
    
    </summary>
    
    
      <category term="shiro" scheme="https://Agonywy.github.io/categories/shiro/"/>
    
    
      <category term="shiro" scheme="https://Agonywy.github.io/tags/shiro/"/>
    
  </entry>
  
  <entry>
    <title>谁是真正的IOC容器</title>
    <link href="https://agonywy.github.io/2020/10/16/2020-10-16-%E8%B0%81%E6%98%AF%E7%9C%9F%E6%AD%A3%E7%9A%84IOC%E5%AE%B9%E5%99%A8/"/>
    <id>https://agonywy.github.io/2020/10/16/2020-10-16-%E8%B0%81%E6%98%AF%E7%9C%9F%E6%AD%A3%E7%9A%84IOC%E5%AE%B9%E5%99%A8/</id>
    <published>2020-10-16T11:12:35.000Z</published>
    <updated>2020-10-16T13:54:21.074Z</updated>
    
    <content type="html"><![CDATA[<h4 id="尖锐的问题！"><a href="#尖锐的问题！" class="headerlink" title="尖锐的问题！"></a>尖锐的问题！</h4><p><strong>BeanFactory和SpringApplication到底谁才是真正的Spring IOC容器？</strong></p><a id="more"></a><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">之前我们了解到依赖查找，依赖注入，元信息配置还有依赖的来源，可以大致上了解到其实</span></span><br><span class="line"><span class="attr">我们的IOC容器是完全依赖于这些特性来进行支持的，那么BeanFactory和SpringApplication</span></span><br><span class="line"><span class="attr">到底谁才是真正的Spring容器呢？</span></span><br></pre></td></tr></table></figure><h4 id="先看看我们注入的BeanFactory"><a href="#先看看我们注入的BeanFactory" class="headerlink" title="先看看我们注入的BeanFactory"></a>先看看我们注入的BeanFactory</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserRepository</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**内建的非Bean的对象*/</span></span><br><span class="line">    <span class="keyword">private</span> BeanFactory beanFactory;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">whoIsIoContainer</span><span class="params">(UserRepository userRepository, BeanFactory beanFactory)</span> </span>&#123;</span><br><span class="line">    BeanFactory beanFactory = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"classpath:/META-INF/dependency-injection-context.xml"</span>);</span><br><span class="line">    <span class="comment">/**1.....自定义的Bean*/</span></span><br><span class="line">    UserRepository userRepository = beanFactory.getBean(<span class="string">"userRepository"</span>, UserRepository<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 按照感官印象，我们注入的beanFactory应该和外面容器的beanFactory是同一个</span></span><br><span class="line"><span class="comment">     * 但是为什么这个表达式不成立呢？</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    System.out.println(userRepository.getBeanFactory() == beanFactory);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实这个结果能想到哈，因为首先ApplicationContext就是BeanFactory，那么既然你就是BeanFactory为什么他不相等呢？实际上他们是两个不同的对象，这个是非常好理解的，官网中对于SpringIOC的描述很有概括性。</p><h4 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">The</span> <span class="string">BeanFactory interface provides an advanced configuration mechanism capable of managing any type of object. ApplicationContext is a sub-interface of BeanFactory. It adds easier integration with Spring's AOP features; message resource handling (for use in internationalization), event publication; and application-layer specific contexts such as the WebApplicationContext for use in web applications.</span></span><br><span class="line"><span class="attr">该BeanFactory接口提供了一种高级配置机制，能够管理任何类型的对象。</span></span><br><span class="line"><span class="meta">ApplicationContext是BeanFactory的子接口。</span> <span class="string"></span></span><br><span class="line"><span class="attr">--它增加了与Spring的AOP功能的集成；</span></span><br><span class="line"><span class="attr">--消息资源处理（用于国际化），事件发布；</span></span><br><span class="line"><span class="meta">--以及特定于应用程序层的上下文（例如WebApplicationContext</span> <span class="string">用于Web应用程序中的）</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>:该BeanFactory接口提供了一种高级配置机制，能够管理任何类型的<strong>对象</strong><br>这里说的是管理对象，而不是说管理Bean，我们知道一个事情，因为说我们的依赖来源并不只是限于Bean，所以他用对象是描述的非常精确的</p><p>总而言之BeanFactory是提供了一个配置的框架，并且是提供了基本的功能，那么我们是不是可以认为BeanFactory就是个很基本的IOC容器，而ApplicationContext是BeanFactory的一个超集，就是说他提供一个有更多企业特性的功能性。如果这个结论是正确的话，那么我们如何理解他的一个特征呢！</p><h4 id="好我们再来看看我们接口"><a href="#好我们再来看看我们接口" class="headerlink" title="好我们再来看看我们接口"></a>好我们再来看看我们接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">1</span>)<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassPathXmlApplicationContext</span> <span class="keyword">extends</span> <span class="title">AbstractXmlApplicationContext</span> </span>&#123;&#125;</span><br><span class="line">(<span class="number">2</span>)<span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractXmlApplicationContext</span> <span class="keyword">extends</span> <span class="title">AbstractRefreshableConfigApplicationContext</span> </span>&#123;&#125;</span><br><span class="line">(<span class="number">3</span>)<span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractRefreshableConfigApplicationContext</span> </span></span><br><span class="line"><span class="class">    <span class="keyword">extends</span> <span class="title">AbstractRefreshableApplicationContext</span></span>&#123;&#125;</span><br><span class="line">(<span class="number">4</span>)<span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractRefreshableApplicationContext</span> <span class="keyword">extends</span> <span class="title">AbstractApplicationContext</span> </span>&#123;&#125;</span><br><span class="line">(<span class="number">5</span>)<span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractApplicationContext</span> <span class="keyword">implements</span> <span class="title">ConfigurableApplicationContext</span> </span>&#123;&#125;</span><br><span class="line">(<span class="number">6</span>)<span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ConfigurableApplicationContext</span> <span class="keyword">extends</span> <span class="title">ApplicationContext</span> </span>&#123;</span><br><span class="line">    <span class="comment">//真正重要的方法出现了 getBeanFactory()</span></span><br><span class="line">    <span class="function">ConfigurableListableBeanFactory <span class="title">getBeanFactory</span><span class="params">()</span> <span class="keyword">throws</span> IllegalStateException</span>;</span><br><span class="line">&#125;</span><br><span class="line">(<span class="number">7</span>)<span class="class"><span class="keyword">interface</span> <span class="title">ApplicationContext</span> <span class="keyword">extends</span> <span class="title">ListableBeanFactory</span>, <span class="title">HierarchicalBeanFactory</span></span>&#123;&#125;</span><br><span class="line">(<span class="number">8</span>)<span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ListableBeanFactory</span> <span class="keyword">extends</span> <span class="title">BeanFactory</span> </span>&#123;&#125;</span><br><span class="line">(<span class="number">9</span>)<span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HierarchicalBeanFactory</span> <span class="keyword">extends</span> <span class="title">BeanFactory</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><h4 id="分析一下ConfigurableApplicationContext"><a href="#分析一下ConfigurableApplicationContext" class="headerlink" title="分析一下ConfigurableApplicationContext"></a>分析一下ConfigurableApplicationContext</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ConfigurableApplicationContext他是一个Configurable</span></span><br><span class="line"><span class="comment">//自然有对Environment提供get/set方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ConfigurableApplicationContext</span> <span class="keyword">extends</span> <span class="title">ApplicationContext</span>, <span class="title">Lifecycle</span>, <span class="title">Closeable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setParent</span><span class="params">(@Nullable ApplicationContext parent)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setEnvironment</span><span class="params">(ConfigurableEnvironment environment)</span></span>;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function">ConfigurableEnvironment <span class="title">getEnvironment</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">ConfigurableListableBeanFactory <span class="title">getBeanFactory</span><span class="params">()</span> <span class="keyword">throws</span> IllegalStateException</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 可是这里除了setEnvironment()方法之外，还有一个特殊的setParent()方法</span></span><br><span class="line"><span class="comment">* void setParent(<span class="doctag">@Nullable</span> ApplicationContext parent);</span></span><br><span class="line"><span class="comment">* 也就是说他可以把他的父类传递过来进行设置</span></span><br><span class="line"><span class="comment">* 你是不是发现了这里有getBeanFactory()方法,BeanFactory也是父类啊</span></span><br><span class="line"><span class="comment">* 可以你找不到setBeanFactory()方法，注意这里是不可以的，为什么呀？</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><strong>那么这里底层到底是怎么实现的？</strong><br>我们找一个具体实现，从ConfigurableApplicationContext一层一层寻找子类查看具体实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//AbstractApplicationContext</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> ConfigurableListableBeanFactory <span class="title">getBeanFactory</span><span class="params">()</span> <span class="keyword">throws</span> IllegalStateException</span>;</span><br><span class="line"><span class="comment">//AbstractRefreshableApplicationContext这里就有具体实现了</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">private</span> DefaultListableBeanFactory beanFactory;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> ConfigurableListableBeanFactory <span class="title">getBeanFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>.beanFactoryMonitor) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.beanFactory == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"BeanFactory not initialized or already closed - "</span> +</span><br><span class="line">                                            <span class="string">"call 'refresh' before accessing beans via the ApplicationContext"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.beanFactory;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 这是几个意思，类中定了一个private DefaultListableBeanFactory beanFactory;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h4 id="自己想一想这句代码"><a href="#自己想一想这句代码" class="headerlink" title="自己想一想这句代码"></a>自己想一想这句代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> DefaultListableBeanFactory beanFactory;</span><br></pre></td></tr></table></figure><p>这个地方其实是个组合的，什么意思呢？就相当于说我这个代码其实是把我这个BeanFactory的实现DefaultListableBeanFactory给组合进来了，并不是玩完完全全去抽象或者继承这个类，那么我们再来看看我们刚才输出的控制台</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**内建依赖---内建的非Bean的对象*/</span></span><br><span class="line">System.out.println(userRepository.getBeanFactory());</span><br><span class="line"><span class="comment">//输出结果：DefaultListableBeanFactory</span></span><br><span class="line"><span class="comment">//org.springframework.beans.factory.support.DefaultListableBeanFactory@3b81a1bc: </span></span><br><span class="line"><span class="comment">//defining beans [user,objectFactory,superUser,userRepository]; root of factory hierarchy</span></span><br></pre></td></tr></table></figure><p>这下清楚了这个DefaultListableBeanFactory对象是从哪里来的了吧</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//是不是逻辑闭环了嘻嘻</span></span><br><span class="line"><span class="keyword">private</span> DefaultListableBeanFactory beanFactory;</span><br></pre></td></tr></table></figure><h4 id="概述一下"><a href="#概述一下" class="headerlink" title="概述一下"></a>概述一下</h4><p>我们通过源码分析可以看出这些细节，但是你又不太愿意进入到源码中去看。所以我给你一些先入为主的一个概念，所以大家可以这么去记住</p><p><strong>就说在上下文里面的实现其实是组合了一个方式，同时他又在接口上面又是extends的关系，这种方式有点像什么呢？有点像代理的方式</strong></p><h4 id="我们在看一下getBean-的实现"><a href="#我们在看一下getBean-的实现" class="headerlink" title="我们在看一下getBean()的实现"></a>我们在看一下getBean()的实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在AbstractApplicationContext中各种getBean()的重载</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getBean</span><span class="params">(String name)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">    assertBeanFactoryActive();</span><br><span class="line">    <span class="keyword">return</span> getBeanFactory().getBean(name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">getBean</span><span class="params">(String name, Class&lt;T&gt; requiredType)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">    assertBeanFactoryActive();</span><br><span class="line">    <span class="keyword">return</span> getBeanFactory().getBean(name, requiredType);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getBean</span><span class="params">(String name, Object... args)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">    assertBeanFactoryActive();</span><br><span class="line">    <span class="keyword">return</span> getBeanFactory().getBean(name, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">getBean</span><span class="params">(Class&lt;T&gt; requiredType)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">    assertBeanFactoryActive();</span><br><span class="line">    <span class="keyword">return</span> getBeanFactory().getBean(requiredType);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">getBean</span><span class="params">(Class&lt;T&gt; requiredType, Object... args)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">    assertBeanFactoryActive();</span><br><span class="line">    <span class="keyword">return</span> getBeanFactory().getBean(requiredType, args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这些getBean()重载方法的实现就是先getBeanFactory，然后去getBean()，那么相当于什么呢？相当于我是用代理对象去去查这个东西，他并不是自己要具备这个能力，而是外面组装了一个组合对象来帮助我去做这个事情，所以这就是我们所说的两者的区别</p><p>这里就会说明一个事情，实际的结论就是我们可以看出一个道理，BeanFactory是一个底层的IOC容器，ApplicationContext是在这个基础之上增加了一些他的特性，那么再来理解官方文档这句话。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">In</span> <span class="string">short, the BeanFactory provides the configuration framework and basic functionality, and the ApplicationContext adds more enterprise-specific functionality. The ApplicationContext is a complete superset of the BeanFactory.</span></span><br><span class="line"></span><br><span class="line"><span class="attr">简而言之，BeanFactory提供了配置框架和基本功能，而ApplicationContext添加了更多企业应用特定的功能。ApplicationContext是BeanFactory的一个完整超集。</span></span><br></pre></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>**BeanFactory和ApplicationContext其实是同一类事物，只不过在底层实现的时候，ApplicationContex组合了一个BeanFactory的实现，我们我们再去看表达式的时候，为什么ApplicationContext不等于BeanFactory就是这个道理，他们毕竟是两个对象，不是一个对象。尽管他们复用了同一个接口，都复用了BeanFactory，所以呢这就是他实现的一个细节，当你去理解实现的时候，千万注意把Beanfactory和ApplicationContext区分开来。如果你得到ApplicationContext的时候，千万去调用他的getBeanFactory()方法，去获取真正底层的实现，而非直接去进行替换。</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;尖锐的问题！&quot;&gt;&lt;a href=&quot;#尖锐的问题！&quot; class=&quot;headerlink&quot; title=&quot;尖锐的问题！&quot;&gt;&lt;/a&gt;尖锐的问题！&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;BeanFactory和SpringApplication到底谁才是真正的Spring IOC容器？&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="think-in-spring" scheme="https://Agonywy.github.io/categories/think-in-spring/"/>
    
    
      <category term="think-in-spring" scheme="https://Agonywy.github.io/tags/think-in-spring/"/>
    
  </entry>
  
  <entry>
    <title>From依赖来源To配置元信息</title>
    <link href="https://agonywy.github.io/2020/10/16/2020-10-16-From%E4%BE%9D%E8%B5%96%E6%9D%A5%E6%BA%90To%E9%85%8D%E7%BD%AE%E5%85%83%E4%BF%A1%E6%81%AF/"/>
    <id>https://agonywy.github.io/2020/10/16/2020-10-16-From%E4%BE%9D%E8%B5%96%E6%9D%A5%E6%BA%90To%E9%85%8D%E7%BD%AE%E5%85%83%E4%BF%A1%E6%81%AF/</id>
    <published>2020-10-16T08:42:35.000Z</published>
    <updated>2020-10-16T09:44:02.709Z</updated>
    
    <content type="html"><![CDATA[<h3 id="依赖来源"><a href="#依赖来源" class="headerlink" title="依赖来源"></a>依赖来源</h3><p>之前我们发现依赖来源并不是都来自我们自定义的bean，那么还有一部分来自于其他地方，那么所谓的那些地方到底是在什么地方呢？这一篇文章就是进行一个初步的讨论。</p><a id="more"></a><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">我们之前在依赖查找和依赖注入的时候，我们都看到了一些bean的定义，这些Bean的定义他仅仅</span></span><br><span class="line"><span class="attr">局限于我们的XML文件，其实还有更多的Bean的定义会在后面的配置源信息来进行分享</span></span><br><span class="line"><span class="meta">(1)自定义的bean</span>:<span class="string"></span></span><br><span class="line"><span class="attr">我们知道第一方面他的Bean是来自于自定义的Bean，就是我们业务的上面的Bean</span></span><br><span class="line"><span class="meta">(2)容器内建的Bean对象</span>:<span class="string"></span></span><br><span class="line"><span class="attr">第二方面是它来自于容器内部的一些Bean对象，那么这个部分我们要去怎么呈现呢？</span></span><br><span class="line"><span class="attr">比如说我们之前所看到的BeanFactory对象，到底是不是内建的Bean对象呢</span></span><br><span class="line"><span class="attr">显然答案是否定的，如果是的话，那么完全可以通过getBean的方式，通过类型的方式查出来</span></span><br><span class="line"><span class="attr">然而报错了肯定并不是内建Bean对象了，那么这个东西到底是什么？</span></span><br><span class="line"><span class="meta">(3)容器内建依赖</span>:<span class="string"></span></span><br><span class="line"><span class="attr">其实我们之前所看到的BeanFactory对象是容器内建的一些依赖，他就是非SpringBean</span></span><br></pre></td></tr></table></figure><p>就是说依赖可以大致分为两大类：第一种是普通的Bean，第二种方式是非Bean，这里怎么理解呀，没关系我们可以用案例去分析一下，但是首先我们还是要去了解一下什么是内建的Bean对象？</p><h3 id="容器内建的Bean"><a href="#容器内建的Bean" class="headerlink" title="容器内建的Bean"></a>容器内建的Bean</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">所谓的容器内建的Bean，那么这个不是我们自己业务方或者我们自己的应用来帮我构建的，而是内部他自己建的，那么是什么地方呢？我们这里可以随便举个例子</span></span><br></pre></td></tr></table></figure><h4 id="Environment"><a href="#Environment" class="headerlink" title="Environment"></a>Environment</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Environment</span> <span class="keyword">extends</span> <span class="title">PropertyResolver</span> </span>&#123;&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 这个Environment抽象，这个是外部化配置和profile的一个综合体</span></span><br><span class="line"><span class="comment">* 因此我们通过getBean的方法去找，我们看会不会报错</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h4 id="验证一些结果"><a href="#验证一些结果" class="headerlink" title="验证一些结果"></a>验证一些结果</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DependencyInjectionDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 配置 XML 配置文件</span></span><br><span class="line">        <span class="comment">// 启动 Spring 应用上下文</span></span><br><span class="line">        BeanFactory beanFactory = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"classpath:/META-INF/dependency-injection-context.xml"</span>);</span><br><span class="line">        Environment environment = beanFactory.getBean(Environment<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        System.out.println(environment);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果: StandardEnvironment &#123;activeProfiles=[], defaultProfiles=[default], propertySources=[PropertiesPropertySource &#123;name='systemProperties'&#125;, SystemEnvironmentPropertySource &#123;name='systemEnvironment'&#125;]&#125;</span></span><br></pre></td></tr></table></figure><h4 id="分析结果"><a href="#分析结果" class="headerlink" title="分析结果"></a>分析结果</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">结果显然我们获取到了这个Bean，那么我们压根没有定义这个Bean呀，他是怎么获取到的呢？</span></span><br><span class="line"><span class="attr">其实就是内部给我们默认初始化了一些Bean，那么看出来获取Environment类型的Bean他等于什么</span></span><br><span class="line"><span class="attr">StandardEnvironment</span>: <span class="string">activeProfiles,defaultProfiles,propertySources</span></span><br><span class="line"><span class="attr">这些东西我们后面在Environment抽象的章节中可以单独讨论一下，因为实在有点复杂</span></span><br></pre></td></tr></table></figure><h3 id="我们把示例代码整合一下看看"><a href="#我们把示例代码整合一下看看" class="headerlink" title="我们把示例代码整合一下看看"></a>我们把示例代码整合一下看看</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DependencyInjectionDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 配置 XML 配置文件</span></span><br><span class="line">        <span class="comment">// 启动 Spring 应用上下文</span></span><br><span class="line">        BeanFactory beanFactory = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"classpath:/META-INF/dependency-injection-context.xml"</span>);</span><br><span class="line">        <span class="comment">/**1.....自定义的Bean*/</span></span><br><span class="line">        UserRepository userRepository = beanFactory.getBean(<span class="string">"userRepository"</span>, UserRepository<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">      System.out.println(userRepository);</span><br><span class="line">        <span class="comment">/**2......内建依赖*/</span></span><br><span class="line">        System.out.println(userRepository.getBeanFactory());</span><br><span class="line">        <span class="comment">/** 依赖查找：下面这句代码就有问题:因为他不是一个内置非bean对象不能这样用</span></span><br><span class="line"><span class="comment">         *  其实他是一个容器内建依赖</span></span><br><span class="line"><span class="comment">         *  System.out.println(beanFactory.getBean(BeanFactory.class));</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">/**3......容器内建Bean*/</span></span><br><span class="line">        Environment environment = beanFactory.getBean(Environment<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        System.out.println(environment);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="输出结果"><a href="#输出结果" class="headerlink" title="输出结果"></a>输出结果</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">自定义的Bean</span>:<span class="string">org.geekbang.thinking.in.spring.ioc.overview.repository.UserRepository@4e7dc304</span></span><br><span class="line"><span class="meta">内建依赖</span>:<span class="string">org.springframework.beans.factory.support.DefaultListableBeanFactory@3b81a1bc: defining beans [user,objectFactory,superUser,userRepository]; root of factory hierarchy</span></span><br><span class="line"><span class="meta">容器内建Bean</span>:<span class="string">StandardEnvironment &#123;activeProfiles=[], defaultProfiles=[default], propertySources=[PropertiesPropertySource &#123;name='systemProperties'&#125;, SystemEnvironmentPropertySource &#123;name='systemEnvironment'&#125;]&#125;</span></span><br></pre></td></tr></table></figure><h4 id="引入新问题？"><a href="#引入新问题？" class="headerlink" title="引入新问题？"></a>引入新问题？</h4><p><strong>从依赖来源又引出了一个非常重要的议题，就是这些Bean的来源是来自于配置，那么配置又称为什么，称为我们说的配置元信息，这就是我们接下来要讨论的</strong></p><h3 id="配制元信息"><a href="#配制元信息" class="headerlink" title="配制元信息"></a>配制元信息</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">我们已经知道了依赖查找，依赖注入以及依赖的来源，那么这些其实都隐藏了一个问题，就是注入和配置到底是从哪里来的呢？我们能不能通过配置的方式去影响容器的行为，答案是肯定的！</span></span><br></pre></td></tr></table></figure><h4 id="相关的IOC配置元信息的一些基本的要素"><a href="#相关的IOC配置元信息的一些基本的要素" class="headerlink" title="相关的IOC配置元信息的一些基本的要素"></a>相关的IOC配置元信息的一些基本的要素</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">配置元信息</span>:<span class="string">其实配置元信息一个是分为你自己的Bean，那么这个Bean通常来说就是你业务要进行感知的，那么IOC容器配置呢主要是对IOC容器做一个控制，那么这个通常来说是非核心的，非功能性的一些特性，就是说这个东西不会影响到你的功能行为，又不会影响到你的业务行为。外部化配置属性，其实比如说我们在@Value的时候我们在Spring Boot中经常用到这个注解，这个注解其实他是外部化的一个配置元信息，那么基本上配置元信息我们可以认为他就是元编程的一部分，那么他通过这种配置的方式影响这个行为</span></span><br><span class="line"><span class="meta">Bean定义配置</span>:<span class="string">关于Bean的配置</span></span><br><span class="line"><span class="attr">---基于xml文件</span></span><br><span class="line"><span class="attr">---基于Properties文件</span></span><br><span class="line"><span class="attr">---基于Java注解</span></span><br><span class="line"><span class="meta">---基于Java</span> <span class="string">API(之后专题讨论)</span></span><br><span class="line"><span class="meta">IOC容器配置</span>:<span class="string">关于容器的配置</span></span><br><span class="line"><span class="attr">---基于xml文件</span></span><br><span class="line"><span class="attr">---基于Java注解</span></span><br><span class="line"><span class="meta">---基于Java</span> <span class="string">API(之后专题讨论)</span></span><br><span class="line"><span class="meta">外部化属性配置</span>:<span class="string">外部化配置</span></span><br><span class="line"><span class="attr">---基于Java注解</span></span><br></pre></td></tr></table></figure><h4 id="元信息配置"><a href="#元信息配置" class="headerlink" title="元信息配置"></a>元信息配置</h4><p>这三个配置其实在后续的工作中会经常遇到，我们放开这部分先不讨论，还有一个更重要的环节要先弄清楚，就是到底谁才是真正的IOC容器的底层。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;依赖来源&quot;&gt;&lt;a href=&quot;#依赖来源&quot; class=&quot;headerlink&quot; title=&quot;依赖来源&quot;&gt;&lt;/a&gt;依赖来源&lt;/h3&gt;&lt;p&gt;之前我们发现依赖来源并不是都来自我们自定义的bean，那么还有一部分来自于其他地方，那么所谓的那些地方到底是在什么地方呢？这一篇文章就是进行一个初步的讨论。&lt;/p&gt;
    
    </summary>
    
    
      <category term="think-in-spring" scheme="https://Agonywy.github.io/categories/think-in-spring/"/>
    
    
      <category term="think-in-spring" scheme="https://Agonywy.github.io/tags/think-in-spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring IOC依赖注入</title>
    <link href="https://agonywy.github.io/2020/10/15/2020-10-15-Spring-IOC%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/"/>
    <id>https://agonywy.github.io/2020/10/15/2020-10-15-Spring-IOC%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/</id>
    <published>2020-10-15T04:26:35.000Z</published>
    <updated>2020-10-15T07:08:18.595Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Spring-IOC依赖注入部分"><a href="#Spring-IOC依赖注入部分" class="headerlink" title="Spring IOC依赖注入部分"></a>Spring IOC依赖注入部分</h4><p>我们现在知道了Spring IOC进行依赖查找比较麻烦，接下来我们会进入到IOC依赖注入部分，同样Spring IOC 的依赖注入可会分为以下几个方面</p><a id="more"></a><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">(1)根据Bean名称注入</span></span><br><span class="line"><span class="meta">(2)根据Bean类型注入</span><span class="string">--单个Bean对象--集合Bean对象</span></span><br><span class="line"><span class="attr">(3)注入容器内建Bean对象</span></span><br><span class="line"><span class="attr">(4)注入非Bean对象</span></span><br><span class="line"><span class="meta">(5)注入类型</span><span class="string">--实时注入--延迟注入</span></span><br></pre></td></tr></table></figure><h3 id="一：根据Bean名称依赖注入"><a href="#一：根据Bean名称依赖注入" class="headerlink" title="一：根据Bean名称依赖注入"></a>一：根据Bean名称依赖注入</h3><h4 id="先写一个类用来进行注入"><a href="#先写一个类用来进行注入" class="headerlink" title="先写一个类用来进行注入"></a>先写一个类用来进行注入</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用户信息仓库：管理很多用户的相应的信息</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserRepository</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**注入一个集合对象*/</span></span><br><span class="line">    <span class="keyword">private</span> Collection&lt;User&gt; users;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Collection&lt;User&gt; <span class="title">getUsers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> users;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsers</span><span class="params">(Collection&lt;User&gt; users)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.users = users;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="我们先来看一下之前依赖查找的配置文件信息"><a href="#我们先来看一下之前依赖查找的配置文件信息" class="headerlink" title="我们先来看一下之前依赖查找的配置文件信息"></a>我们先来看一下之前依赖查找的配置文件信息</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"org.geekbang.thinking.in.spring.ioc.overview.domain.User"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">value</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"Agony"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"objectFactory"</span> <span class="attr">class</span>=<span class="string">"org.springframework.beans.factory.config.ObjectFactoryCreatingFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"targetBeanName"</span> <span class="attr">value</span>=<span class="string">"user"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 指定parent 继承user这个Bean的信息 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指定primary表示主要,因为当使用类型注入的时候,符合Type的Bean需要保证唯一</span></span><br><span class="line"><span class="comment">SuperUser依然是User,不能唯一匹配就会报错,所以使用primary来解决这个问题 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"superUser"</span> <span class="attr">class</span>=<span class="string">"org.geekbang.thinking.in.spring.ioc.overview.domain.SuperUser"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">parent</span>=<span class="string">"user"</span> <span class="attr">primary</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"address"</span> <span class="attr">value</span>=<span class="string">"西安"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="直接通过import复用dependency-lookup-context-xml"><a href="#直接通过import复用dependency-lookup-context-xml" class="headerlink" title="直接通过import复用dependency-lookup-context.xml"></a>直接通过import复用dependency-lookup-context.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 通过导入复用 dependency-lookup-context.xml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"dependency-lookup-context.xml"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--首先我们使用的是手动注入的方式--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userRepository"</span> <span class="attr">class</span>=<span class="string">"org.geekbang.thinking.in.spring.ioc.overview.repository.UserRepository"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"users"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">util:list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"superUser"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"user"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">util:list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="我们来main函数看一下能够完成注入"><a href="#我们来main函数看一下能够完成注入" class="headerlink" title="我们来main函数看一下能够完成注入"></a>我们来main函数看一下能够完成注入</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 配置 XML 配置文件</span></span><br><span class="line">    <span class="comment">// 启动 Spring 应用上下文</span></span><br><span class="line">    BeanFactory beanFactory = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"classpath:/META-INF/dependency-injection-context.xml"</span>);</span><br><span class="line">    UserRepository userRepository = beanFactory.getBean(<span class="string">"userRepository"</span>, UserRepository<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    Collection&lt;User&gt; users = userRepository.getUsers();</span><br><span class="line">    System.out.println(users);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="分析一下结果"><a href="#分析一下结果" class="headerlink" title="分析一下结果"></a>分析一下结果</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">[SuperUser&#123;address</span>=<span class="string">'西安'&#125; User&#123;id=1, name='Agony'&#125;, User&#123;id=1, name='Agony'&#125;]</span></span><br><span class="line"><span class="attr">在injection.xml中,我们虽然把superUser配置在前面,user配置在后面,这就决定了注入顺序</span></span><br><span class="line"><span class="meta">注意</span>: <span class="string">自动注入会有变化</span></span><br></pre></td></tr></table></figure><h3 id="二：我们使用ByType来自动注入一下"><a href="#二：我们使用ByType来自动注入一下" class="headerlink" title="二：我们使用ByType来自动注入一下"></a>二：我们使用ByType来自动注入一下</h3><h4 id="有个小细节要注意"><a href="#有个小细节要注意" class="headerlink" title="有个小细节要注意"></a>有个小细节要注意</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--primary 一定要设置成false,因为他默认就是true,会导致ByType配置了多个可注入的bean--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"org.geekbang.thinking.in.spring.ioc.overview.domain.User"</span> <span class="attr">primary</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">value</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"Agony"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"objectFactory"</span> <span class="attr">class</span>=<span class="string">"org.springframework.beans.factory.config.ObjectFactoryCreatingFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"targetBeanName"</span> <span class="attr">value</span>=<span class="string">"user"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 指定parent 继承user这个Bean的信息 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指定primary表示主要/优先,因为当使用类型注入的时候,SuperUser依然是User,不能唯一匹配就会报错 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"superUser"</span> <span class="attr">class</span>=<span class="string">"org.geekbang.thinking.in.spring.ioc.overview.domain.SuperUser"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">parent</span>=<span class="string">"user"</span> <span class="attr">primary</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"address"</span> <span class="attr">value</span>=<span class="string">"西安"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="我们将injection-xml修改成自动注入"><a href="#我们将injection-xml修改成自动注入" class="headerlink" title="我们将injection.xml修改成自动注入"></a>我们将injection.xml修改成自动注入</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 通过导入复用 dependency-lookup-context.xml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"dependency-lookup-context.xml"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Auto-Wiring 他就是使用自动绑定的方式来进行注入 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userRepository"</span> <span class="attr">class</span>=<span class="string">"org.geekbang.thinking.in.spring.ioc.overview.repository.UserRepository"</span> <span class="attr">autowire</span>=<span class="string">"byType"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="结果很尴尬"><a href="#结果很尴尬" class="headerlink" title="结果很尴尬"></a>结果很尴尬</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">[User&#123;id</span>=<span class="string">1, name='Agony'&#125;, SuperUser&#123;address='西安'&#125; User&#123;id=1, name='Agony'&#125;]</span></span><br><span class="line"><span class="meta">诶呀</span>:<span class="string">User怎么跑到SuperUser前面去了呀,很明显,自动注入可不管你primary管不管用,直接按照配置文件中Bean定义的顺序来注入了,所以要意识到这个顺序是很重要的东西,所以如果别人定义好的Bean,那么千万不能够调整,会出大麻烦的!</span></span><br></pre></td></tr></table></figure><h4 id="对于ByType注入我再给大家提个醒哈"><a href="#对于ByType注入我再给大家提个醒哈" class="headerlink" title="对于ByType注入我再给大家提个醒哈"></a>对于ByType注入我再给大家提个醒哈</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">父子关系的类,在type上是一样的属于一类,byType是要求我们匹配的Bean必须是唯一的才可以的呀</span></span><br><span class="line"><span class="attr">所以当你出现这种情况,就会一直报错,先来看看报错信息长什么样</span></span><br><span class="line"><span class="attr">Error</span>:<span class="string">Could not autowire. There is more than one bean of 'Collection&lt;User&gt;' type. Beans: user,superUser. Properties: 'users'</span></span><br></pre></td></tr></table></figure><h4 id="那么如何解决呢？前面已经提到了-我完善一下"><a href="#那么如何解决呢？前面已经提到了-我完善一下" class="headerlink" title="那么如何解决呢？前面已经提到了,我完善一下"></a>那么如何解决呢？前面已经提到了,我完善一下</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">(1)primary</span>:<span class="string">用来指明一个bean是否被装配的第一选择,比如当设置primary="true"以后,就是告诉那个需要装配的bean,先选我先选我,我是最好的,然后有一个很有趣的事情,就是Spring是将primary的默认值设置的true,所有这就意味着所有供选择的bean都是最好的,这样还是无法选择,因此必须将除了一个之外的其他所有bean的primary值都给设置成false才不会引起报错</span></span><br><span class="line"><span class="meta">注意</span>:<span class="string">更奇怪的是,我测试了发现,这个primary在手动注入的时候起作用,在自动注入的时候没有起作用,这就很奇怪,最终的结果依旧是按照我们对bean的配置顺序来决定的那个被优先注入进去</span></span><br><span class="line"><span class="meta">提醒</span>:<span class="string">配置好的xml就尽量不要改动,尤其是bean配置的顺序,影响很大,必须要注意</span></span><br><span class="line"></span><br><span class="line"><span class="meta">(2)autowire-candidate</span>:<span class="string">用来指明bean是否作为"候选人",当我们设置成false的时候就意味着这个bean不被用来提供给你们进行注入了,所以你就不会选择这个bean进行装配了</span></span><br><span class="line"><span class="meta">注意</span>:<span class="string">这个直接就不装配了,而不是优先不优先的问题了,亲测有效,无论树4手动注入还是自动注入都生效</span></span><br></pre></td></tr></table></figure><h3 id="三：注入容器内建非Bean对象—–我们以BeanFactory对象为例"><a href="#三：注入容器内建非Bean对象—–我们以BeanFactory对象为例" class="headerlink" title="三：注入容器内建非Bean对象—–我们以BeanFactory对象为例"></a>三：注入容器内建非Bean对象—–我们以BeanFactory对象为例</h3><h4 id="首先更新一下UserRepository类"><a href="#首先更新一下UserRepository类" class="headerlink" title="首先更新一下UserRepository类"></a>首先更新一下UserRepository类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserRepository</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**注入一个集合对象*/</span></span><br><span class="line">    <span class="comment">/**自定义Bean*/</span></span><br><span class="line">    <span class="keyword">private</span> Collection&lt;User&gt; users;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**内建的非Bean的对象*/</span></span><br><span class="line">    <span class="keyword">private</span> BeanFactory beanFactory;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BeanFactory <span class="title">getBeanFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> beanFactory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBeanFactory</span><span class="params">(BeanFactory beanFactory)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.beanFactory = beanFactory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Collection&lt;User&gt; <span class="title">getUsers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> users;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsers</span><span class="params">(Collection&lt;User&gt; users)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.users = users;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="引入外部BeanFactory"><a href="#引入外部BeanFactory" class="headerlink" title="引入外部BeanFactory"></a>引入外部BeanFactory</h4><p><strong>为什么我要引入一个外部的BeanFactory，因为我要知道当我们注入一个BeanFactory的时候，他到底是不是内置的，和我们外部的BeanFactory是不是一个，所以我需要验证一下</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//还是通过之前的方式进行注入的,我们就看一下到底是不是一个对象</span></span><br><span class="line">BeanFactory beanFactory = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"classpath:/META-INF/dependency-injection-context.xml"</span>);</span><br><span class="line">UserRepository userRepository = beanFactory.getBean(<span class="string">"userRepository"</span>, UserRepository<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">System.out.println(userRepository.getBeanFactory() == beanFactory);</span><br><span class="line"><span class="comment">//结果输出: false</span></span><br><span class="line"><span class="comment">//再来看一个神奇的东西</span></span><br><span class="line">System.out.println(userRepository.getBeanFactory());</span><br><span class="line"><span class="comment">//结果输出: </span></span><br><span class="line"><span class="comment">//org.springframework.beans.factory.support.DefaultListableBeanFactory@3b81a1bc: defining beans [user,objectFactory,superUser,userRepository]; root of factory hierarchy</span></span><br></pre></td></tr></table></figure><h4 id="user-superUser-objectFactory-userRepository"><a href="#user-superUser-objectFactory-userRepository" class="headerlink" title="[user,superUser,objectFactory,userRepository]"></a>[user,superUser,objectFactory,userRepository]</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">//还是通过之前的方式进行注入的,我们就看一下到底是不是一个对象</span></span><br><span class="line"><span class="attr">你看,把我们定义的四个bean给注入进来了,神奇吧,我们注入的beanFactory并不是一个bean对象,他是一个内建的对象</span></span><br><span class="line"><span class="attr">那么我们怎么去说明他是一个内建的对象呢?我们可以把bean的名称全部给打印出来看看</span></span><br><span class="line"></span><br><span class="line"><span class="attr">如果beanFactory是个bean的话,那么他就是一个对象或者是一个定义的bean,我们试试</span></span><br><span class="line"><span class="attr">//依赖查找</span></span><br><span class="line"><span class="attr">System.out.println(beanFactory.getBean(BeanFactory.class));</span></span><br><span class="line"><span class="meta">输出</span>: <span class="string">Exception in thread "main" org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type 'org.springframework.beans.factory.BeanFactory' available</span></span><br><span class="line"><span class="attr">显然没有这个bean的定义,那没问题就来了呀,说明依赖查找和依赖注入不一样,那么依赖查找和依赖注入都属于依赖</span></span><br><span class="line"><span class="attr">那么这个依赖他是不是来自于同一个地方呢?从这个例子中能看出来答案肯定是否定的</span></span><br><span class="line"><span class="attr">这个beanFactory并不是一个普通的bean,那么他如果不是普通的bean,他又是什么呢?我们暂时存疑!</span></span><br></pre></td></tr></table></figure><h3 id="四：实时注入与非实时注入"><a href="#四：实时注入与非实时注入" class="headerlink" title="四：实时注入与非实时注入"></a>四：实时注入与非实时注入</h3><p><strong>其实上面所有的操作都是实时注入，那么非实时注入或者是叫延迟注入怎么来做呢?其实方法和ObjectFactory非常类似</strong></p><h4 id="我们给UserRepository再加一个bean来做延迟注入"><a href="#我们给UserRepository再加一个bean来做延迟注入" class="headerlink" title="我们给UserRepository再加一个bean来做延迟注入"></a>我们给UserRepository再加一个bean来做延迟注入</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserRepository</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**注入一个集合对象*/</span></span><br><span class="line">    <span class="comment">/**自定义Bean*/</span></span><br><span class="line">    <span class="keyword">private</span> Collection&lt;User&gt; users;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**内建的非Bean的对象*/</span></span><br><span class="line">    <span class="keyword">private</span> BeanFactory beanFactory;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**用来测试延迟注入使用的*/</span></span><br><span class="line">    <span class="keyword">private</span> ObjectFactory&lt;User&gt; userObjectFactory;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//getter()/setter()方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="我们来写一下延迟注入的代码"><a href="#我们来写一下延迟注入的代码" class="headerlink" title="我们来写一下延迟注入的代码"></a>我们来写一下延迟注入的代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//延迟注入</span></span><br><span class="line">ObjectFactory&lt;User&gt; userObjectFactory = userRepository.getUserObjectFactory();</span><br><span class="line">User user = userObjectFactory.getObject();</span><br><span class="line">System.out.println(user);</span><br></pre></td></tr></table></figure><h4 id="分析一下结果哈"><a href="#分析一下结果哈" class="headerlink" title="分析一下结果哈"></a>分析一下结果哈</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">输出结果</span>:<span class="string">SuperUser&#123;address='西安'&#125; User&#123;id=1, name='Agony'&#125;</span></span><br><span class="line"><span class="attr">很神奇,我们成功的拿到了一个SuperUser类型的对象</span></span><br><span class="line"><span class="attr">userObjectFactory&lt;User&gt;自动注入，我们调用getObject()方法拿到了User对象</span></span><br><span class="line"><span class="attr">欸？为什么是SuperUser而不是普通User呢？</span></span><br><span class="line"><span class="attr">这就是我们之前提到了primary的作用的原因？ByType按照类型注入SuperUser优先了</span></span><br></pre></td></tr></table></figure><h4 id="重难点：我们以另一种方式来看看UserRepository"><a href="#重难点：我们以另一种方式来看看UserRepository" class="headerlink" title="重难点：我们以另一种方式来看看UserRepository"></a>重难点：我们以另一种方式来看看UserRepository</h4><p><strong>注意：我们对第三个属性的泛型进行了修改，这时候我们再来看看这个对象</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserRepository</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**注入一个集合对象*/</span></span><br><span class="line">    <span class="comment">/**自定义Bean*/</span></span><br><span class="line">    <span class="keyword">private</span> Collection&lt;User&gt; users;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**内建的非Bean的对象*/</span></span><br><span class="line">    <span class="keyword">private</span> BeanFactory beanFactory;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**注意：这里仅仅是对泛型进行了修改的*/</span></span><br><span class="line">    <span class="keyword">private</span>  ObjectFactory&lt;ApplicationContext&gt; objectFactory;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//getter()/setter()方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="我们再来输出一下"><a href="#我们再来输出一下" class="headerlink" title="我们再来输出一下"></a>我们再来输出一下</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ObjectFactory&lt;ApplicationContext&gt; objectFactory = userRepository.getObjectFactory();</span><br><span class="line">ApplicationContext object = objectFactory.getObject();</span><br><span class="line">System.out.println(object);</span><br></pre></td></tr></table></figure><h4 id="结果一定改变了嘛"><a href="#结果一定改变了嘛" class="headerlink" title="结果一定改变了嘛"></a>结果一定改变了嘛</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">输出结果</span>: <span class="string">org.springframework.context.support.ClassPathXmlApplicationContext@1a6c5a9e, started on Thu Oct 15 14:40:43 CST 2020</span></span><br><span class="line"><span class="attr">由于泛型的修改，输出对象从SuperUser变成我们现在当前的ClassPathXmlApplicationContext@1a6c5a9e</span></span><br><span class="line"><span class="meta">诶呀</span>: <span class="string">那我现在有点疑惑了，那么这个对象是不是和我们当前的这个Spring应用上下文BeanFactory是一样的呀</span></span><br></pre></td></tr></table></figure><h4 id="为什么会有这样的疑惑呢？你往这里看"><a href="#为什么会有这样的疑惑呢？你往这里看" class="headerlink" title="为什么会有这样的疑惑呢？你往这里看"></a>为什么会有这样的疑惑呢？你往这里看</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ApplicationContext</span> <span class="keyword">extends</span>  <span class="title">ListableBeanFactory</span>, <span class="title">HierarchicalBeanFactory</span></span>&#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ListableBeanFactory</span> <span class="keyword">extends</span> <span class="title">BeanFactory</span> </span>&#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HierarchicalBeanFactory</span> <span class="keyword">extends</span> <span class="title">BeanFactory</span> </span>&#123;&#125;</span><br><span class="line"><span class="comment">//所以我有理由怀疑了嘛</span></span><br><span class="line"><span class="comment">//当前的ClassPathXmlApplicationContext和当前的这个Spring应用上下文BeanFactory是不是一样的呀</span></span><br></pre></td></tr></table></figure><h4 id="所以我测试一下"><a href="#所以我测试一下" class="headerlink" title="所以我测试一下"></a>所以我测试一下</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Spring应用上下文----BeanFactory</span></span><br><span class="line">BeanFactory beanFactory = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"classpath:/META-INF/dependency-injection-context.xml"</span>);</span><br><span class="line">UserRepository userRepository = beanFactory.getBean(<span class="string">"userRepository"</span>, UserRepository<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">ObjectFactory&lt;ApplicationContext&gt; objectFactory = userRepository.getObjectFactory();</span><br><span class="line"><span class="comment">/**当前的ClassPathXmlApplicationContext和当前的这个Spring应用上下文BeanFactory是不是一样的呀*/</span></span><br><span class="line">System.out.println(<span class="string">"===================="</span>);</span><br><span class="line">System.out.println(beanFactory);</span><br><span class="line">System.out.println(objectFactory.getObject());</span><br><span class="line">System.out.println(beanFactory == objectFactory.getObject());</span><br></pre></td></tr></table></figure><h4 id="结果嘻嘻很快乐—-猜对了"><a href="#结果嘻嘻很快乐—-猜对了" class="headerlink" title="结果嘻嘻很快乐—-猜对了"></a>结果嘻嘻很快乐—-猜对了</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">====================</span><br><span class="line"><span class="attr">org.springframework.context.support.ClassPathXmlApplicationContext@1a6c5a9e</span></span><br><span class="line"><span class="attr">started</span> <span class="string">on Thu Oct 15 15:01:13 CST 2020</span></span><br><span class="line"><span class="attr">org.springframework.context.support.ClassPathXmlApplicationContext@1a6c5a9e</span></span><br><span class="line"><span class="attr">started</span> <span class="string">on Thu Oct 15 15:01:13 CST 2020</span></span><br><span class="line"><span class="attr">true</span></span><br></pre></td></tr></table></figure><h4 id="这个结果说明了什么呢"><a href="#这个结果说明了什么呢" class="headerlink" title="这个结果说明了什么呢"></a>这个结果说明了什么呢</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">属性</span>: <span class="string">private  ObjectFactory&lt;ApplicationContext&gt; objectFactory;</span></span><br><span class="line"><span class="attr">说明ObjectFactory在autowried的时候，帮我们注入了一个ApplicationContext，那么因为这个ApplicationContext他本身又是一个BeanFactory，依赖注入对象的来源我们还不清楚？所以我们暂时搁置一下，先记住这个神奇的结果~~~</span></span><br><span class="line"><span class="meta">既然依赖查找和依赖注入的来源不同</span>:<span class="string">那么我们之后再看看到底依赖注入来源于哪个地方!!!</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;Spring-IOC依赖注入部分&quot;&gt;&lt;a href=&quot;#Spring-IOC依赖注入部分&quot; class=&quot;headerlink&quot; title=&quot;Spring IOC依赖注入部分&quot;&gt;&lt;/a&gt;Spring IOC依赖注入部分&lt;/h4&gt;&lt;p&gt;我们现在知道了Spring IOC进行依赖查找比较麻烦，接下来我们会进入到IOC依赖注入部分，同样Spring IOC 的依赖注入可会分为以下几个方面&lt;/p&gt;
    
    </summary>
    
    
      <category term="think-in-spring" scheme="https://Agonywy.github.io/categories/think-in-spring/"/>
    
    
      <category term="think-in-spring" scheme="https://Agonywy.github.io/tags/think-in-spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring IOC依赖查找</title>
    <link href="https://agonywy.github.io/2020/10/13/2020-10-13-Spring%20IOC%E4%BE%9D%E8%B5%96%E6%9F%A5%E6%89%BE/"/>
    <id>https://agonywy.github.io/2020/10/13/2020-10-13-Spring%20IOC%E4%BE%9D%E8%B5%96%E6%9F%A5%E6%89%BE/</id>
    <published>2020-10-13T04:26:35.000Z</published>
    <updated>2020-10-13T10:00:21.837Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Spring-IOC"><a href="#Spring-IOC" class="headerlink" title="Spring IOC"></a>Spring IOC</h4><p>我们现在理解的IOC实现大致上可以分为两种实现方式—-分别是依赖查找和依赖注入</p><a id="more"></a><h4 id="Spring-IOC依赖查找"><a href="#Spring-IOC依赖查找" class="headerlink" title="Spring IOC依赖查找"></a>Spring IOC依赖查找</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">(1)根据Bean名称(id/name)查找</span> <span class="string">--实时查找;     --延迟查找(和延迟加载Bean不是一回事)</span></span><br><span class="line"><span class="meta">(2)根据Bean类型查找</span>  <span class="string">--单个Bean对象; --集合Bean对象</span></span><br><span class="line"><span class="attr">(3)根据Bean名称+类型查找</span></span><br><span class="line"><span class="meta">(4)根据Java注解查找</span>   <span class="string">--单个Bean对象; --集合Bean对象</span></span><br></pre></td></tr></table></figure><h3 id="一：按照名称依赖查找之实时查找"><a href="#一：按照名称依赖查找之实时查找" class="headerlink" title="一：按照名称依赖查找之实时查找"></a>一：按照名称依赖查找之实时查找</h3><h4 id="试一下使用xml按照id来加载配置文件进行依赖查找"><a href="#试一下使用xml按照id来加载配置文件进行依赖查找" class="headerlink" title="试一下使用xml按照id来加载配置文件进行依赖查找"></a>试一下使用xml按照id来加载配置文件进行依赖查找</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实体类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"><span class="comment">// getter() + setter() + toString()</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- XML配置文件中对于bean的配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"org.geekbang.thinking.in.spring.ioc.overview.domain.User"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">value</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"Agony"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>测试类查看依赖查找的结果</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DependencyLookupDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 配置XML配置文件; 启动Spring应用上下文</span></span><br><span class="line">        BeanFactory beanFactory = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"META-INF/dependency-lookup-context.xml"</span>);</span><br><span class="line">        User user = beanFactory.getBean(<span class="string">"user"</span>, User<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/** 输出:User&#123;id=1, name='Agony'&#125;  */</span></span><br></pre></td></tr></table></figure><h3 id="二：按照名称依赖查找之延迟查找"><a href="#二：按照名称依赖查找之延迟查找" class="headerlink" title="二：按照名称依赖查找之延迟查找"></a>二：按照名称依赖查找之延迟查找</h3><h4 id="依赖ObjectFactory"><a href="#依赖ObjectFactory" class="headerlink" title="依赖ObjectFactory"></a>依赖ObjectFactory</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 首先看一下他需要依赖哪个接口</span></span><br><span class="line"><span class="comment">/** <span class="doctag">@see</span> FactoryBean</span></span><br><span class="line"><span class="comment">*  他只是一个接口,我们如何使用这个接口呢,他有一个FactoryBean的实现我们来看看</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ObjectFactory</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">// 如果不加泛型的话,objectFactory.getObject()返回就是Object类型</span></span><br><span class="line"><span class="function">T <span class="title">getObject</span><span class="params">()</span> <span class="keyword">throws</span> BeansException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ObjectFactoryCreatingFactoryBean"><a href="#ObjectFactoryCreatingFactoryBean" class="headerlink" title="ObjectFactoryCreatingFactoryBean"></a>ObjectFactoryCreatingFactoryBean</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectFactoryCreatingFactoryBean</span> <span class="keyword">extends</span> <span class="title">AbstractFactoryBean</span>&lt;<span class="title">ObjectFactory</span>&lt;<span class="title">Object</span>&gt;&gt; </span>&#123;</span><br><span class="line"><span class="comment">// 这个属性就是说他需要关联一个Bean的方式</span></span><br><span class="line"><span class="keyword">private</span> String targetBeanName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="那我们再xml中关联一下"><a href="#那我们再xml中关联一下" class="headerlink" title="那我们再xml中关联一下"></a>那我们再xml中关联一下</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"objectFactory"</span> <span class="attr">class</span>=<span class="string">"org.springframework.beans.factory.config.ObjectFactoryCreatingFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 将id为"user"的这个Bean进行关联 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"targetBeanName"</span> <span class="attr">value</span>=<span class="string">"user"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>这样看起来就清楚了，objectFactory可以帮助我们间接的去获取targetBeanName，也就是说当我得到objectFactory的时候，并不是马上去初始化或者马上去get这个Bean</strong></p><h4 id="我们将main方法重构一下"><a href="#我们将main方法重构一下" class="headerlink" title="我们将main方法重构一下"></a>我们将main方法重构一下</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DependencyLookupDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 配置XML配置文件; 启动Spring应用上下文</span></span><br><span class="line">        BeanFactory beanFactory = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"META-INF/dependency-lookup-context.xml"</span>);</span><br><span class="line">        lookupInRealTime(beanFactory);</span><br><span class="line">        lookupInLazy(beanFactory);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 重构实时查找 */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">lookupInRealTime</span><span class="params">(BeanFactory beanFactory)</span></span>&#123;</span><br><span class="line">        User user = beanFactory.getBean(<span class="string">"user"</span>,User<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        System.out.println(<span class="string">"实时查找："</span>+user);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** 重构延迟查找 */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">lookupInLazy</span><span class="params">(BeanFactory beanFactory)</span> </span>&#123;</span><br><span class="line">        ObjectFactory&lt;User&gt; objectFactory = (ObjectFactory&lt;User&gt;) beanFactory.getBean(<span class="string">"objectFactory"</span>);</span><br><span class="line">        <span class="comment">// 如果不加泛型的话,返回就是Object</span></span><br><span class="line">        User user = objectFactory.getObject();</span><br><span class="line">        System.out.println(<span class="string">"延迟查找："</span>+user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 实时查找：User&#123;id=1, name='Agony'&#125;</span></span><br><span class="line"><span class="comment">// 延迟查找：User&#123;id=1, name='Agony'&#125;</span></span><br></pre></td></tr></table></figure><h3 id="三：按照类型依赖查找单个Bean对象"><a href="#三：按照类型依赖查找单个Bean对象" class="headerlink" title="三：按照类型依赖查找单个Bean对象"></a>三：按照类型依赖查找单个Bean对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 按照类型查找的单一对象---单一接口 */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">lookupByType</span><span class="params">(BeanFactory beanFactory)</span> </span>&#123;</span><br><span class="line">    User user = beanFactory.getBean(User<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    System.out.println(<span class="string">"按照类型实时查找："</span>+user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="四：按照类型依赖查找集合对象"><a href="#四：按照类型依赖查找集合对象" class="headerlink" title="四：按照类型依赖查找集合对象"></a>四：按照类型依赖查找集合对象</h3><h4 id="认识新工厂接口–ListableBeanFactory"><a href="#认识新工厂接口–ListableBeanFactory" class="headerlink" title="认识新工厂接口–ListableBeanFactory"></a>认识新工厂接口–ListableBeanFactory</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ListableBeanFactory</span> <span class="string">是对 BeanFactory 接口的扩展,和 BeanFactory 每次获取单个 bean 不同, ListableBeanFactory 可以一次性枚举出符合条件的 bean, 如果这个 BeanFactory 继承了 HierarchicalBeanFactory, ListableBeanFactory 接口面列出的 bean 不会列出祖先 BeanFactory 中的 bean, 并且会忽略通过其他方式注册的任何单例 bean, 如 ConfigurableBeanFactory 的 registerSingleton 方法, 但 getBeanNamesOfType 和 getBeansOfType 除外, 源码如下:</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ListableBeanFactory</span> <span class="keyword">extends</span> <span class="title">BeanFactory</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 当前容器是否包含指定名称 bean</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">containsBeanDefinition</span><span class="params">(String beanName)</span></span>;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 当前容器注册的 bean 的数量</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getBeanDefinitionCount</span><span class="params">()</span></span>;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 返回容器中注册的全部 bean 的名称</span></span><br><span class="line">    String[] getBeanDefinitionNames();</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 获取指定类型 (包括其子类) bean 的名称</span></span><br><span class="line">    <span class="comment">// includeNonSingletons: 是否包含原型或范围Bean或仅包含单例</span></span><br><span class="line">    <span class="comment">// allowEagerInit: 是否初始化lazy-init单例和由FactoryBeans(或包含"factory-bean"引用的工厂方法)创建的对象以进行类型检查.</span></span><br><span class="line">    <span class="comment">//请注意,需要积极初始化FactoryBeans以确定其类型!请注意,将"true"传递给此标志会初始化FactoryBeans和"factory-bean"引用</span></span><br><span class="line">    String[] getBeanNamesForType(ResolvableType type);</span><br><span class="line">    String[] getBeanNamesForType(<span class="meta">@Nullable</span> Class&lt;?&gt; type);</span><br><span class="line">    String[] getBeanNamesForType(<span class="meta">@Nullable</span> Class&lt;?&gt; type,</span><br><span class="line">                               <span class="keyword">boolean</span> includeNonSingletons,</span><br><span class="line">                               <span class="keyword">boolean</span> allowEagerInit);</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 获取指定类型的bean,符合条件的bean存放在一个map中</span></span><br><span class="line">    <span class="comment">// 这个map的key值为bean的名称, value为对应的实例</span></span><br><span class="line">    &lt;T&gt; <span class="function">Map&lt;String, T&gt; <span class="title">getBeansOfType</span><span class="params">(@Nullable Class&lt;T&gt; type)</span> <span class="keyword">throws</span> BeansException</span>;</span><br><span class="line">    &lt;T&gt; <span class="function">Map&lt;String, T&gt; <span class="title">getBeansOfType</span><span class="params">(@Nullable Class&lt;T&gt; type,</span></span></span><br><span class="line"><span class="function"><span class="params">                                    <span class="keyword">boolean</span> includeNonSingletons,</span></span></span><br><span class="line"><span class="function"><span class="params">                                    <span class="keyword">boolean</span> allowEagerInit)</span> <span class="keyword">throws</span> BeansException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取使用了指定注解的bean的名称</span></span><br><span class="line">    String[] getBeanNamesForAnnotation(Class&lt;? extends Annotation&gt; annotationType);</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 获取使用了指定注解的bean, 符合条件的bean存放在一个map中</span></span><br><span class="line">    <span class="function">Map&lt;String, Object&gt; <span class="title">getBeansWithAnnotation</span><span class="params">(Class&lt;? extends Annotation&gt; annotationType)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> BeansException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 或者指定bean的注解信息</span></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    &lt;A extends Annotation&gt; <span class="function">A <span class="title">findAnnotationOnBean</span><span class="params">(String beanName, Class&lt;A&gt; annotationType)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> NoSuchBeanDefinitionException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="编写测试代码"><a href="#编写测试代码" class="headerlink" title="编写测试代码"></a>编写测试代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**按照类型查找集合对象---集合接口*/</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">lookupByCollectionType</span><span class="params">(BeanFactory beanFactory)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(beanFactory <span class="keyword">instanceof</span> ListableBeanFactory)&#123;</span><br><span class="line">        ListableBeanFactory listableBeanFactory = (ListableBeanFactory) beanFactory;</span><br><span class="line">        Map&lt;String, User&gt; users = listableBeanFactory.getBeansOfType(User<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        System.out.println(<span class="string">"查找所有的user集合对象"</span>+users);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出: 查找所有的user集合对象&#123;user=User&#123;id=1, name='Agony'&#125;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="五：根据注解方式依赖查找"><a href="#五：根据注解方式依赖查找" class="headerlink" title="五：根据注解方式依赖查找"></a>五：根据注解方式依赖查找</h3><h4 id="我们先通过-Component来看看注解什么样"><a href="#我们先通过-Component来看看注解什么样" class="headerlink" title="我们先通过@Component来看看注解什么样"></a>我们先通过@Component来看看注解什么样</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)<span class="comment">//注解的标记范围：可以标记在什么上</span></span><br><span class="line"><span class="comment">//注解不仅被保存到class文件中,jvm加载class文件之后,仍然存在</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="comment">//@Documented 注解表明这个注解应该被 javadoc工具记录. 默认情况下,javadoc是不包括注解的. </span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="comment">//对于使用了模式注解的类上加上@Indexed注解,它可以为Spring的模式注解添加索引,以提升应用启动性能。使用了@Indexed之后，编译打包的时候会在项目中自动生成META-INT/spring.components文件。</span></span><br><span class="line"><span class="comment">//当Spring应用上下文执行ComponentScan扫描时，META-INT/spring.components将会被CandidateComponentsIndexLoader 读取并加载，转换为CandidateComponentsIndex对象，这样的话@ComponentScan不在扫描指定的package，而是读取CandidateComponentsIndex对象，从而达到提升性能的目的</span></span><br><span class="line"><span class="meta">@Indexed</span>   </span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Component &#123;</span><br><span class="line"><span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="我们自己写一个Super注解"><a href="#我们自己写一个Super注解" class="headerlink" title="我们自己写一个Super注解"></a>我们自己写一个Super注解</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这样Super就可以作为一个注解使用了</span></span><br><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Super &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="我们写一个SuperUser类就可以使用-Super注解了"><a href="#我们写一个SuperUser类就可以使用-Super注解了" class="headerlink" title="我们写一个SuperUser类就可以使用@Super注解了"></a>我们写一个SuperUser类就可以使用@Super注解了</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//明显：User类没有使用注解，SuperUser类使用了注解</span></span><br><span class="line"><span class="comment">//我们对比着看看注解依赖查找怎么用</span></span><br><span class="line"><span class="meta">@Super</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SuperUser</span> <span class="keyword">extends</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(String address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"SuperUser&#123;"</span> +</span><br><span class="line">                <span class="string">"address='"</span> + address + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">"&#125; "</span> + <span class="keyword">super</span>.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="我们先到XML文件中添加SuperUser的配置信息"><a href="#我们先到XML文件中添加SuperUser的配置信息" class="headerlink" title="我们先到XML文件中添加SuperUser的配置信息"></a>我们先到XML文件中添加SuperUser的配置信息</h4><p><strong>在通过注解方式依赖查找之前，我们先用XML查找一下SuperUser</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 指定parent 继承user这个Bean的信息 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指定primary表示主要,因为当使用类型注入的时候,SuperUser依然是User,不能唯一匹配就会报错 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"superUser"</span> <span class="attr">class</span>=<span class="string">"org.geekbang.thinking.in.spring.ioc.overview.domain.SuperUser"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">parent</span>=<span class="string">"user"</span> <span class="attr">primary</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"address"</span> <span class="attr">value</span>=<span class="string">"西安"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="我们再来看看main方法的输出"><a href="#我们再来看看main方法的输出" class="headerlink" title="我们再来看看main方法的输出"></a>我们再来看看main方法的输出</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DependencyLookupDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 配置XML配置文件; 启动Spring应用上下文</span></span><br><span class="line">        BeanFactory beanFactory = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"META-INF/dependency-lookup-context.xml"</span>);</span><br><span class="line">        <span class="comment">// 输出---实时查找：User&#123;id=1, name='Agony'&#125;</span></span><br><span class="line">        lookupInRealTime(beanFactory);</span><br><span class="line">        <span class="comment">// 输出---延迟查找：User&#123;id=1, name='Agony'&#125;</span></span><br><span class="line">        lookupInLazy(beanFactory);</span><br><span class="line">        <span class="comment">// 输出---按照类型实时查找：SuperUser&#123;address='西安'&#125; User&#123;id=1, name='Agony'&#125;</span></span><br><span class="line">        lookupByType(beanFactory);</span><br><span class="line">        <span class="comment">// 输出---&#123;user=User&#123;id=1, name='Agony'&#125;, superUser=SuperUser&#123;address='西安'&#125; User&#123;id=1, name='Agony'&#125;&#125;</span></span><br><span class="line">lookupByCollectionType(beanFactory);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/** 按照类型查找集合对象---集合接口 */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">lookupByCollectionType</span><span class="params">(BeanFactory beanFactory)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(beanFactory <span class="keyword">instanceof</span> ListableBeanFactory)&#123;</span><br><span class="line">            ListableBeanFactory listableBeanFactory = (ListableBeanFactory) beanFactory;</span><br><span class="line">            Map&lt;String, User&gt; users = listableBeanFactory.getBeansOfType(User<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            System.out.println(<span class="string">"查找所有的user集合对象"</span>+users);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 按照类型查找的单一对象---单一接口 */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">lookupByType</span><span class="params">(BeanFactory beanFactory)</span> </span>&#123;</span><br><span class="line">        User user = beanFactory.getBean(User<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        System.out.println(<span class="string">"按照类型实时查找："</span>+user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 按照名称实时查找 */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">lookupInRealTime</span><span class="params">(BeanFactory beanFactory)</span></span>&#123;</span><br><span class="line">        User user = beanFactory.getBean(<span class="string">"user"</span>,User<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        System.out.println(<span class="string">"实时查找："</span>+user);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/** 按照名称延迟查找 **/</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">lookupInLazy</span><span class="params">(BeanFactory beanFactory)</span> </span>&#123;</span><br><span class="line">        ObjectFactory&lt;User&gt; objectFactory = (ObjectFactory&lt;User&gt;) beanFactory.getBean(<span class="string">"objectFactory"</span>);</span><br><span class="line">        <span class="comment">// 如果不加泛型的话,返回就是Object</span></span><br><span class="line">        User user = objectFactory.getObject();</span><br><span class="line">        System.out.println(<span class="string">"延迟查找："</span>+user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="输出正常，我们再看看通过注解的方式来进行依赖查找"><a href="#输出正常，我们再看看通过注解的方式来进行依赖查找" class="headerlink" title="输出正常，我们再看看通过注解的方式来进行依赖查找"></a>输出正常，我们再看看通过注解的方式来进行依赖查找</h4><p><strong>其实通过注解他也是一个集合类型，那我们就再来看看ListableBeanFactory有没有为我们提供根据注解返回指定Bean的方法——-显然有，只能说很幸福</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ListableBeanFactory</span> <span class="keyword">extends</span> <span class="title">BeanFactory</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 获取使用了指定注解的bean的名称</span></span><br><span class="line">    String[] getBeanNamesForAnnotation(Class&lt;? extends Annotation&gt; annotationType);</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 获取使用了指定注解的bean, 符合条件的bean存放在一个map中</span></span><br><span class="line">    <span class="function">Map&lt;String, Object&gt; <span class="title">getBeansWithAnnotation</span><span class="params">(Class&lt;? extends Annotation&gt; annotationType)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> BeansException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 或者指定bean的注解信息</span></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    &lt;A extends Annotation&gt; <span class="function">A <span class="title">findAnnotationOnBean</span><span class="params">(String beanName, Class&lt;A&gt; annotationType)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> NoSuchBeanDefinitionException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="这样好办了，我们写一个方法来看看"><a href="#这样好办了，我们写一个方法来看看" class="headerlink" title="这样好办了，我们写一个方法来看看"></a>这样好办了，我们写一个方法来看看</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 通过注解方式进行依赖查找 */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">lookupByAnnotationType</span><span class="params">(BeanFactory beanFactory)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(beanFactory <span class="keyword">instanceof</span>  ListableBeanFactory)&#123;</span><br><span class="line">        ListableBeanFactory listableBeanFactory = (ListableBeanFactory) beanFactory;</span><br><span class="line">        <span class="comment">//强制类型转换成map,不然返回结果会是Map&lt;String , Object&gt;</span></span><br><span class="line">        Map&lt;String, User&gt; users = (Map) listableBeanFactory.getBeansWithAnnotation(Super<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        System.out.println(<span class="string">"查找标注了@Super注解的User集合对象"</span> + users);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果: 查找标注了@Super注解的User集合对象&#123;superUser=SuperUser&#123;address='西安'&#125; User&#123;id=1, name='Agony'&#125;&#125;</span></span><br></pre></td></tr></table></figure><h4 id="结果分析"><a href="#结果分析" class="headerlink" title="结果分析"></a>结果分析</h4><p><strong>当我们没有加注解的时候，集合对象是两个，User和SuperUser，添加了自定义@Super注解之后，结果上集合对象就只剩下了SuperUser，说明什么？其实Spring底层他做了一层过滤，到底做了什么过滤，我还没看懂，我看了更新</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;Spring-IOC&quot;&gt;&lt;a href=&quot;#Spring-IOC&quot; class=&quot;headerlink&quot; title=&quot;Spring IOC&quot;&gt;&lt;/a&gt;Spring IOC&lt;/h4&gt;&lt;p&gt;我们现在理解的IOC实现大致上可以分为两种实现方式—-分别是依赖查找和依赖注入&lt;/p&gt;
    
    </summary>
    
    
      <category term="think-in-spring" scheme="https://Agonywy.github.io/categories/think-in-spring/"/>
    
    
      <category term="think-in-spring" scheme="https://Agonywy.github.io/tags/think-in-spring/"/>
    
  </entry>
  
  <entry>
    <title>重新认识IOC</title>
    <link href="https://agonywy.github.io/2020/10/11/2020-10-11-%E9%87%8D%E6%96%B0%E8%AE%A4%E8%AF%86IOC/"/>
    <id>https://agonywy.github.io/2020/10/11/2020-10-11-%E9%87%8D%E6%96%B0%E8%AE%A4%E8%AF%86IOC/</id>
    <published>2020-10-11T10:52:35.000Z</published>
    <updated>2020-10-13T08:52:30.770Z</updated>
    
    <content type="html"><![CDATA[<h4 id="重新认识IOC"><a href="#重新认识IOC" class="headerlink" title="重新认识IOC"></a>重新认识IOC</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">IOC</span>:<span class="string">简单的说就是控制反转,主要有依赖查找和依赖注入的实现</span></span><br><span class="line"><span class="attr">我个人认为推模式在消息事件以及各种这样类似于这种反向的观察者模式的扩展都属于IOC</span></span><br><span class="line"><span class="attr">比如：Zookeeper中的Watcher监听，他是推拉相结合的方式，有兴趣的可以去了解一下</span></span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="IOC容器的职责"><a href="#IOC容器的职责" class="headerlink" title="IOC容器的职责"></a>IOC容器的职责</h4><ul><li><p>第一个是所谓的实现与执行的任务之间要产生解耦</p></li><li><p>第二个是使模块专注于其设计的任务，就是要关注你的设计上的最终目标，而不是他的实现</p></li><li><p>第三个是说要释放这个模块，他是说这个系统，就是其它系统知道他怎么去运作，但是不是依赖于某个契约</p></li><li><p>第四个是当模块取消的时候，他的一个边缘的效应或者我们的副作用，这个副作用可能是说如果我们发生依赖变更的时候，这个时候可能会产生一些相关的副作用</p></li><li><p>第五个是IOC通常又被用作另一种想法，就是不要来找我们，我们会来找你，这里的我们就是指你所需要的一些资源</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">IOC容器的职责总结</span>:<span class="string"></span></span><br><span class="line"><span class="meta">(1)依赖处理</span>:<span class="string">依赖查找，依赖注入</span></span><br><span class="line"><span class="meta">(2)生命周期管理</span>:<span class="string">容器，托管的资源(Java Beans或其他资源比如外部的监听对象)</span></span><br><span class="line"><span class="meta">(3)配置</span>:<span class="string">容器，外部化配置，托管的资源(Java Beans或其他资源)</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="IOC容器的主要实现"><a href="#IOC容器的主要实现" class="headerlink" title="IOC容器的主要实现"></a>IOC容器的主要实现</h4><ul><li>Java SE —-Java Beans ；Java ServiceLoader SPI ； JNDI(Java Naming and Directory Interface)</li><li>Java EE —-EJB(Enterprise Java Beans) ；Servlet</li></ul><h4 id="传统IOC容器的实现—–Java-Beans"><a href="#传统IOC容器的实现—–Java-Beans" class="headerlink" title="传统IOC容器的实现—–Java Beans"></a>传统IOC容器的实现—–Java Beans</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">传统Java</span> <span class="string">Beans实现IOC容器: 基本API,Introspector+PropertyDescriptor+PropertyEditor</span></span><br><span class="line"><span class="meta">特性</span>:<span class="string">依赖查找,生命周期管理,配置元信息,时间,自定义,资源管理,持久化</span></span><br><span class="line"><span class="meta">对Java</span> <span class="string">Bean的理解:通常可以来理解为是一个POJO,但他不是简单的POJO</span></span><br></pre></td></tr></table></figure><h4 id="先写一个POJO类：Person"><a href="#先写一个POJO类：Person" class="headerlink" title="先写一个POJO类：Person"></a>先写一个POJO类：Person</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 29237</span></span><br><span class="line"><span class="comment"> * 描述人的POJO类,有setter/getter方法</span></span><br><span class="line"><span class="comment"> * 但是Java Beans定义为可写方法(Writable)和可读方法(Readable)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**Property*/</span></span><br><span class="line">    String name;</span><br><span class="line">    Integer age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="我们看一下BeanInfo接口定义了那些信息"><a href="#我们看一下BeanInfo接口定义了那些信息" class="headerlink" title="我们看一下BeanInfo接口定义了那些信息"></a>我们看一下BeanInfo接口定义了那些信息</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BeanInfo</span> </span>&#123;</span><br><span class="line">    <span class="comment">//Bean基本描述类</span></span><br><span class="line">    <span class="function">BeanDescriptor <span class="title">getBeanDescriptor</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//关于事件的描述(包括事件的处理方法)</span></span><br><span class="line">    EventSetDescriptor[] getEventSetDescriptors();</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getDefaultEventIndex</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//Property描述器(符)---定义了读方法和写方法</span></span><br><span class="line">    PropertyDescriptor[] getPropertyDescriptors();</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getDefaultPropertyIndex</span><span class="params">()</span></span>;</span><br><span class="line">    MethodDescriptor[] getMethodDescriptors();</span><br><span class="line">    BeanInfo[] getAdditionalBeanInfo();</span><br><span class="line">    <span class="function">Image <span class="title">getIcon</span><span class="params">(<span class="keyword">int</span> iconKind)</span></span>;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> ICON_COLOR_16x16 = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> ICON_COLOR_32x32 = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> ICON_MONO_16x16 = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> ICON_MONO_32x32 = <span class="number">4</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="再来获取JavaBean信息看看"><a href="#再来获取JavaBean信息看看" class="headerlink" title="再来获取JavaBean信息看看"></a>再来获取JavaBean信息看看</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 29237</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanInfoDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IntrospectionException </span>&#123;</span><br><span class="line">        <span class="comment">//getter/setter方法之外,还可以通过内省技术访问,内省技术提供了两种方式</span></span><br><span class="line">        <span class="comment">//(1)通过PropertyDescriptor类操作Bean的属性</span></span><br><span class="line">        <span class="comment">//(2)通过Introspector类获取Bean对象的BeanInfo,然后通过BeanInfo来获取属性的描述器PropertyDescriptor,通过这个属性描述器既可以获取某个属性对应的getter/setter方法,然后通过返回机制来调用这些方法</span></span><br><span class="line">        BeanInfo beanInfo = Introspector.getBeanInfo(Person<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">//用Lambda表达式的方式来进行描述,通过Stream的方式先把Property进行存储</span></span><br><span class="line">        Stream.of(beanInfo.getPropertyDescriptors()).forEach(propertyDescriptor -&gt; &#123;</span><br><span class="line">            System.out.println(propertyDescriptor);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>输出bean信息</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">注意有一条信息是</span>:<span class="string">name=calss;那是因为Object类有一个getClass()方法,因为我们通常来说对象访问是通过方进行访问的,而非直接通过字段的方式来进行访问,所以也会把class当作property处理,很明显他只有readMethod的描述,没有writeMethod的描述</span></span><br><span class="line"><span class="meta">java.beans.PropertyDescriptor[name</span>=<span class="string">age; propertyType=class java.lang.Integer; readMethod=public java.lang.Integer org.geekbang.ioc.java.beans.Person.getAge(); writeMethod=public void org.geekbang.ioc.java.beans.Person.setAge(java.lang.Integer)]</span></span><br><span class="line"><span class="meta">java.beans.PropertyDescriptor[name</span>=<span class="string">class; propertyType=class java.lang.Class; readMethod=public final native java.lang.Class java.lang.Object.getClass()]</span></span><br><span class="line"><span class="meta">java.beans.PropertyDescriptor[name</span>=<span class="string">name; propertyType=class java.lang.String; readMethod=public java.lang.String org.geekbang.ioc.java.beans.Person.getName(); writeMethod=public void org.geekbang.ioc.java.beans.Person.setName(java.lang.String)]</span></span><br></pre></td></tr></table></figure><p><strong>通过stopClass可以解决掉getClass()的问题</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BeanInfo beanInfo = Introspector.getBeanInfo(Person<span class="class">.<span class="keyword">class</span>,<span class="title">Object</span>.<span class="title">class</span>)</span>;</span><br></pre></td></tr></table></figure><h4 id="看看PropertyDescriptor还有什么功能可以操作属性"><a href="#看看PropertyDescriptor还有什么功能可以操作属性" class="headerlink" title="看看PropertyDescriptor还有什么功能可以操作属性"></a>看看PropertyDescriptor还有什么功能可以操作属性</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//PropertyDescriptor可以为属性添加属性编辑器PorpertyEditor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanInfoDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IntrospectionException </span>&#123;</span><br><span class="line">        BeanInfo beanInfo = Introspector.getBeanInfo(Person<span class="class">.<span class="keyword">class</span>,<span class="title">Object</span>.<span class="title">class</span>)</span>;</span><br><span class="line">        <span class="comment">//用Lambda表达式的方式来进行描述</span></span><br><span class="line">        <span class="comment">//通过Stream的方式先把Property进行存储</span></span><br><span class="line">        Stream.of(beanInfo.getPropertyDescriptors()).forEach(propertyDescriptor -&gt; &#123;</span><br><span class="line">            <span class="comment">//PropertyDescriptor允许添加属性编辑器 PropertyEditor</span></span><br><span class="line">            <span class="comment">//那么propertyEditor就是帮助我们去做一个事情</span></span><br><span class="line">            <span class="comment">//比如通常在GUI程序中我们需要把一个text(String)转换成Property对应的type</span></span><br><span class="line">            <span class="comment">//这里必然会有一个描述,去描述当前的property类型,比如name是String类型的</span></span><br><span class="line">            Class&lt;?&gt; propertyType = propertyDescriptor.getPropertyType();</span><br><span class="line">            String propertyName = propertyDescriptor.getName();</span><br><span class="line">            String age = <span class="string">"age"</span>;</span><br><span class="line">            <span class="keyword">if</span> (age.equals(propertyName)) &#123;  <span class="comment">//为age属性增加 PropertyEditor</span></span><br><span class="line">            <span class="comment">//String ---&gt; Integer 注册类型转换的功能</span></span><br><span class="line">            propertyDescriptor.setPropertyEditorClass(StringToIntegerPropertyEditor<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 如果你有一个具体的实现的时候,比如说我要去new一个bean的时候</span></span><br><span class="line"><span class="comment">             * 我这里可以把bean丢进去,当我方法set的时候去进行操作,这就是一个基本的实现</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="comment">//propertyDescriptor.createPropertyEditor(Object bean);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 写一个类专门来把String转换成Integer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">StringToIntegerPropertyEditor</span> <span class="keyword">extends</span> <span class="title">PropertyEditorSupport</span> </span>&#123;</span><br><span class="line">        <span class="comment">//重写父类方法</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAsText</span><span class="params">(String text)</span> <span class="keyword">throws</span> java.lang.IllegalArgumentException </span>&#123;</span><br><span class="line">            Integer value = Integer.valueOf(text);</span><br><span class="line">            setValue(value);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> java.lang.IllegalArgumentException(text);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="如何界定一个IOC容器是不是轻量级的"><a href="#如何界定一个IOC容器是不是轻量级的" class="headerlink" title="如何界定一个IOC容器是不是轻量级的"></a>如何界定一个IOC容器是不是轻量级的</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">一个轻量级的容器应该具备哪些特征</span>:<span class="string"></span></span><br><span class="line"><span class="attr">(1)首先第一个轻量级IOC容器能够管理到我的应用代码,这个管理应用代码不是说像Git一样是一个代码的托管工具,他主要是说我们的容器可以管理代码运行,比如说可以控制代码的启停,生命周期</span></span><br><span class="line"><span class="attr">(2)第二个方面是说他能够快速的启动,轻量级的容器相对的启动速度更快</span></span><br><span class="line"><span class="attr">(3)第三个方面就是说轻量级的容器,它不需要一些特殊的配置来进行操作,这个主要是针对EJB做的一个对比</span></span><br><span class="line"><span class="attr">(4)第四点就是容器能够达到一些比较轻量级的内存占用,以及最小化的API的一个依赖,不依赖过渡的API</span></span><br><span class="line"></span><br><span class="line"><span class="meta">一个轻量级容器的优点</span>:<span class="string"></span></span><br><span class="line"><span class="attr">(1)代码与实现要解耦,就是一种分离的思想,运行层面和管理层面要分离</span></span><br><span class="line"><span class="attr">(2)要实现最大化的一个代码的复用</span></span><br><span class="line"><span class="attr">(3)更大程度上的面向对象,EJB并不是一个很好的面向对象的实现方式</span></span><br><span class="line"><span class="attr">(4)他要更大化的u一个产品化,因为他其实这类产品性能主要是关注于效率</span></span><br></pre></td></tr></table></figure><h4 id="依赖注入和依赖查找的区别"><a href="#依赖注入和依赖查找的区别" class="headerlink" title="依赖注入和依赖查找的区别"></a>依赖注入和依赖查找的区别</h4><p><strong>依赖注入:依赖的处理和注入会一步完成,不需要查找之后在进行主动注入</strong></p><table><thead><tr><th>类型</th><th>依赖处理</th><th>实现便利性</th><th>代码侵入性</th><th>API依赖性</th><th>可读性</th></tr></thead><tbody><tr><td>依赖查找</td><td>主动获取</td><td>相对繁琐</td><td>侵入业务逻辑</td><td>依赖容器API</td><td>良好</td></tr><tr><td>依赖注入</td><td>被动提供</td><td>相对便利</td><td>低侵入性</td><td>不依赖容器API</td><td>一般</td></tr></tbody></table><h4 id="构造器注入与Setter注入的区别"><a href="#构造器注入与Setter注入的区别" class="headerlink" title="构造器注入与Setter注入的区别"></a>构造器注入与Setter注入的区别</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">(1)部分依赖</span>:<span class="string">假设一个类中有三个属性,有三个构造方法和setter方法,在这种情况下,如果您只想传递一个属性的信息,则只能通过setter方法</span></span><br><span class="line"><span class="meta">(2)覆盖</span>:<span class="string">Setter注入会覆盖构造函数注入,如果我们同时使用构造函数和setter注入,IOC容器将使用setter注入</span></span><br><span class="line"><span class="meta">(3)注入顺序</span>:<span class="string">构造注入可以在构造器中决定依赖关系的注入顺序(参数的位置决定了这个值注入到哪个属性),优先依赖的优先注入,setter方法注入没有限定的顺序</span></span><br><span class="line"><span class="meta">(4)参数</span>:<span class="string">构造器注入参数太多可读性低,同时构造器的参数没有名称可以给我们外部来进行内省或者反省,但是现在以及解决掉了,在JavaBeans中我们可以通过注解的方式来进行处理,比如类似Swagger这种方式,把我们构造器的名称来进行读取,或者进行更多的解释,这是一种实现方式</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;重新认识IOC&quot;&gt;&lt;a href=&quot;#重新认识IOC&quot; class=&quot;headerlink&quot; title=&quot;重新认识IOC&quot;&gt;&lt;/a&gt;重新认识IOC&lt;/h4&gt;&lt;figure class=&quot;highlight properties&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;IOC&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;简单的说就是控制反转,主要有依赖查找和依赖注入的实现&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;我个人认为推模式在消息事件以及各种这样类似于这种反向的观察者模式的扩展都属于IOC&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;比如：Zookeeper中的Watcher监听，他是推拉相结合的方式，有兴趣的可以去了解一下&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="think-in-spring" scheme="https://Agonywy.github.io/categories/think-in-spring/"/>
    
    
      <category term="think-in-spring" scheme="https://Agonywy.github.io/tags/think-in-spring/"/>
    
  </entry>
  
  <entry>
    <title>spring五大编程模型</title>
    <link href="https://agonywy.github.io/2020/10/11/2020-10-11-spring%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%9E%8B/"/>
    <id>https://agonywy.github.io/2020/10/11/2020-10-11-spring%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%9E%8B/</id>
    <published>2020-10-11T01:42:35.000Z</published>
    <updated>2020-10-12T10:43:50.519Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一-面向对象编程"><a href="#一-面向对象编程" class="headerlink" title="(一)面向对象编程"></a>(一)面向对象编程</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">契约接口</span>:<span class="string">Aware,BeanPostProcessor...</span></span><br><span class="line"><span class="meta">设计模式</span>:<span class="string">观察者模式(ApplicationEvent),组合模式(CompositeCacheManger),模板模式(JDBCTemplate)...</span></span><br><span class="line"><span class="meta">对象继承</span>:<span class="string">Abstract*类 (AbstractApplicationContext)</span></span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="Aware"><a href="#Aware" class="headerlink" title="Aware"></a>Aware</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Aware接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Aware</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Aware更加核心的一个接口是ApplicationContextAware</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ApplicationContextAware</span> <span class="keyword">extends</span> <span class="title">Aware</span> </span>&#123;</span><br><span class="line">    <span class="comment">//会有一个set方法,把Aware对应的类型传递过来</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//同理:BeanFactoryAware接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BeanFactoryAware</span> <span class="keyword">extends</span> <span class="title">Aware</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setBeanFactory</span><span class="params">(BeanFactory beanFactory)</span> <span class="keyword">throws</span> BeansException</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//总结:这种方式就是一个接口的方式，这个也称为Aware接口回调，每当我的bean去实现这个Aware接口的时候，会回调这么一个对象给我，就是传个对象过来给我们进行使用</span></span><br></pre></td></tr></table></figure><h4 id="BeanPostProcessor"><a href="#BeanPostProcessor" class="headerlink" title="BeanPostProcessor"></a>BeanPostProcessor</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这个接口就是常用的关于Bean的生命周期的后置处理器</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BeanPostProcessor</span> </span>&#123;</span><br><span class="line">    <span class="comment">//方法上使用就Java8的default方法的实现,</span></span><br><span class="line">    <span class="comment">//因此你可以选择任意一个方法来进行覆盖重写</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="function"><span class="keyword">default</span> Object <span class="title">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line"><span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="function"><span class="keyword">default</span> Object <span class="title">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line"><span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二-面向切面编程"><a href="#二-面向切面编程" class="headerlink" title="(二)面向切面编程"></a>(二)面向切面编程</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">动态代理</span>: <span class="string">JdkDynamicAopProxy</span></span><br><span class="line"><span class="meta">字节码提升</span>: <span class="string">ASM,CGLib,AspectJ...</span></span><br></pre></td></tr></table></figure><h4 id="Cglib"><a href="#Cglib" class="headerlink" title="Cglib"></a>Cglib</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">JdkDynamicAopProxy</span> <span class="keyword">implements</span> <span class="title">AopProxy</span>, <span class="title">InvocationHandler</span>, <span class="title">Serializable</span> </span>&#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AopProxy</span> </span>&#123;</span><br><span class="line"><span class="function">Object <span class="title">getProxy</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">Object <span class="title">getProxy</span><span class="params">(@Nullable ClassLoader classLoader)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="AopProxy的实现方式"><a href="#AopProxy的实现方式" class="headerlink" title="AopProxy的实现方式"></a>AopProxy的实现方式</h4><img src="https://raw.githubusercontent.com/Agonywy/picGo/master/img/DynamicProxy.png" style="zoom: 67%;"><h4 id="DynamicProxy-动态代理"><a href="#DynamicProxy-动态代理" class="headerlink" title="DynamicProxy:动态代理"></a>DynamicProxy:动态代理</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">Spring中的动态代理主要有两种方式</span>:<span class="string"></span></span><br><span class="line"><span class="meta">1.JDK动态代理</span>:<span class="string">为接口提供代理,他是通过为接口实现了一个匿名内部类,在匿名实现类中完成了对方法的增强</span></span><br><span class="line"><span class="meta">2.CGLig动态代理</span>:<span class="string">为类提供代理,他是通过为类实现了一个子类,子类继承父类方法进行重写覆盖,完成对方法的增强</span></span><br></pre></td></tr></table></figure><h3 id="三-面向元编程"><a href="#三-面向元编程" class="headerlink" title="(三)面向元编程"></a>(三)面向元编程</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">注解</span>: <span class="string">模式注解(@Component,@Service,@Repository)...</span></span><br><span class="line"><span class="meta">配置</span>: <span class="string">Environment抽象,PropertySources,BeanDefinition...</span></span><br><span class="line"><span class="meta">泛型</span>: <span class="string">GenericTypeResolver,ResolvableType...</span></span><br></pre></td></tr></table></figure><h4 id="Component-如果你把他标记在一个类上-那么这个类就变成一个SpringBean"><a href="#Component-如果你把他标记在一个类上-那么这个类就变成一个SpringBean" class="headerlink" title="@Component:如果你把他标记在一个类上,那么这个类就变成一个SpringBean"></a>@Component:如果你把他标记在一个类上,那么这个类就变成一个SpringBean</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**相关的派生类:<span class="doctag">@Repository</span>、<span class="doctag">@Service</span>、<span class="doctag">@Controller</span> 和 <span class="doctag">@Component</span> 将类标识为Bean</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> Repository</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> Service</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> Controller</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Indexed</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Component &#123;</span><br><span class="line"><span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ComponentScan-注解扫描功能"><a href="#ComponentScan-注解扫描功能" class="headerlink" title="@ComponentScan:注解扫描功能"></a>@ComponentScan:注解扫描功能</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Repeatable</span>(ComponentScans<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">ComponentScan</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Repository-存储层Bean"><a href="#Repository-存储层Bean" class="headerlink" title="@Repository:存储层Bean"></a>@Repository:存储层Bean</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Repository &#123;</span><br><span class="line"><span class="meta">@AliasFor</span>(annotation = Component<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">String value() default "";</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Service-业务层bean"><a href="#Service-业务层bean" class="headerlink" title="@Service:业务层bean"></a>@Service:业务层bean</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Service &#123;</span><br><span class="line"><span class="meta">@AliasFor</span>(annotation = Component<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">String value() default "";</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Controller-表现层bean"><a href="#Controller-表现层bean" class="headerlink" title="@Controller:表现层bean"></a>@Controller:表现层bean</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Controller &#123;</span><br><span class="line"><span class="meta">@AliasFor</span>(annotation = Component<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">String value() default "";</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Environment配置"><a href="#Environment配置" class="headerlink" title="Environment配置"></a>Environment配置</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Environment主要涉及两部分内容</span></span><br><span class="line"><span class="comment">//1.profile:可以认为是用户配置,这个配置可以对不同的系统来进行区分(Dev开发环境,Prod生产环境)</span></span><br><span class="line"><span class="comment">//2.第二个是属性:PropertyResolver</span></span><br><span class="line"><span class="comment">//Environment接口继承自PropertyResolver，增加了获取Profiles相关接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Environment</span> <span class="keyword">extends</span> <span class="title">PropertyResolver</span> </span>&#123;</span><br><span class="line">String[] getActiveProfiles();</span><br><span class="line">String[] getDefaultProfiles();</span><br><span class="line"><span class="meta">@Deprecated</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">acceptsProfiles</span><span class="params">(String... profiles)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">acceptsProfiles</span><span class="params">(Profiles profiles)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="PropertyResolver父接口—–get方法可以看出是Key-Value方式存储数据的"><a href="#PropertyResolver父接口—–get方法可以看出是Key-Value方式存储数据的" class="headerlink" title="PropertyResolver父接口—–get方法可以看出是Key-Value方式存储数据的"></a>PropertyResolver父接口—–get方法可以看出是Key-Value方式存储数据的</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//PropertySourcesPropertyResolver--&gt;AbstractPropertyResolver--&gt;</span></span><br><span class="line"><span class="comment">//--&gt;ConfigurablePropertyResolver--&gt;PropertyResolver</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PropertyResolver</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">containsProperty</span><span class="params">(String key)</span></span>;</span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="function">String <span class="title">getProperty</span><span class="params">(String key)</span></span>;</span><br><span class="line"><span class="function">String <span class="title">getProperty</span><span class="params">(String key, String defaultValue)</span></span>;</span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line">&lt;T&gt; <span class="function">T <span class="title">getProperty</span><span class="params">(String key, Class&lt;T&gt; targetType)</span></span>;</span><br><span class="line">&lt;T&gt; <span class="function">T <span class="title">getProperty</span><span class="params">(String key, Class&lt;T&gt; targetType, T defaultValue)</span></span>;</span><br><span class="line"><span class="function">String <span class="title">getRequiredProperty</span><span class="params">(String key)</span> <span class="keyword">throws</span> IllegalStateException</span>;</span><br><span class="line">&lt;T&gt; <span class="function">T <span class="title">getRequiredProperty</span><span class="params">(String key, Class&lt;T&gt; targetType)</span> <span class="keyword">throws</span> IllegalStateException</span>;</span><br><span class="line"><span class="function">String <span class="title">resolvePlaceholders</span><span class="params">(String text)</span></span>;</span><br><span class="line"><span class="function">String <span class="title">resolveRequiredPlaceholders</span><span class="params">(String text)</span> <span class="keyword">throws</span> IllegalArgumentException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="PropertySourcesPropertyResolver类：体系中唯一的完整实体类"><a href="#PropertySourcesPropertyResolver类：体系中唯一的完整实体类" class="headerlink" title="PropertySourcesPropertyResolver类：体系中唯一的完整实体类"></a>PropertySourcesPropertyResolver类：体系中唯一的完整实体类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//它以PropertySources属性源集合（内部持有属性源列表List&lt;PropertySource&gt;）为属性值的来源，按序遍历每个PropertySource，获取到一个非null的属性值则返回</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PropertySourcesPropertyResolver</span> <span class="keyword">extends</span> <span class="title">AbstractPropertyResolver</span> </span>&#123;</span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> PropertySources propertySources;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">PropertySourcesPropertyResolver</span><span class="params">(@Nullable PropertySources propertySources)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.propertySources = propertySources;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getProperty</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> getProperty(key, String<span class="class">.<span class="keyword">class</span>, <span class="title">true</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">getProperty</span><span class="params">(String key, Class&lt;T&gt; targetValueType)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> getProperty(key, targetValueType, <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">protected</span> &lt;T&gt; <span class="function">T <span class="title">getProperty</span><span class="params">(String key, Class&lt;T&gt; targetValueType, <span class="keyword">boolean</span> resolveNestedPlaceholders)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.propertySources != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (PropertySource&lt;?&gt; propertySource : <span class="keyword">this</span>.propertySources) &#123;</span><br><span class="line"><span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">logger.trace(<span class="string">"Searching for key '"</span> + key + <span class="string">"' in PropertySource '"</span> +</span><br><span class="line">propertySource.getName() + <span class="string">"'"</span>);</span><br><span class="line">&#125;</span><br><span class="line">Object value = propertySource.getProperty(key);</span><br><span class="line"><span class="keyword">if</span> (value != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (resolveNestedPlaceholders &amp;&amp; value <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">value = resolveNestedPlaceholders((String) value);</span><br><span class="line">&#125;</span><br><span class="line">logKeyFound(key, propertySource, value);</span><br><span class="line"><span class="keyword">return</span> convertValueIfNecessary(value, targetValueType);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">logger.trace(<span class="string">"Could not find key '"</span> + key + <span class="string">"' in any property source"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="那么数据源来自哪里：PropertySources接口"><a href="#那么数据源来自哪里：PropertySources接口" class="headerlink" title="那么数据源来自哪里：PropertySources接口"></a>那么数据源来自哪里：PropertySources接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> PropertySources &#123;</span><br><span class="line">PropertySource[] value();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="第一种数据来源的方式：普通JavaAPI的方式"><a href="#第一种数据来源的方式：普通JavaAPI的方式" class="headerlink" title="第一种数据来源的方式：普通JavaAPI的方式"></a>第一种数据来源的方式：普通JavaAPI的方式</h4><h4 id="PropertySource抽象类"><a href="#PropertySource抽象类" class="headerlink" title="PropertySource抽象类:"></a>PropertySource抽象类:</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">PropertySource</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> Log logger = LogFactory.getLog(getClass());</span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> String name; <span class="comment">//属性源名称</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> T source; <span class="comment">//属性源（比如来自Map，那就是一个Map对象）</span></span><br><span class="line">    <span class="comment">//相当于一个Environment对应了多个PropertySource的一个实现方法，</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="第二种属性来源的方式：通过注解的方式"><a href="#第二种属性来源的方式：通过注解的方式" class="headerlink" title="第二种属性来源的方式：通过注解的方式"></a>第二种属性来源的方式：通过注解的方式</h4><h4 id="PropertySource注解"><a href="#PropertySource注解" class="headerlink" title="@PropertySource注解"></a>@PropertySource注解</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/** <span class="doctag">@see</span> org.springframework.core.env.PropertySource:数据来源</span></span><br><span class="line"><span class="comment"> *   <span class="doctag">@see</span> org.springframework.core.env.ConfigurableEnvironment#getPropertySources():</span></span><br><span class="line"><span class="comment"> *   <span class="doctag">@see</span> org.springframework.core.env.MutablePropertySources</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Repeatable</span>(PropertySources<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">PropertySource</span> </span>&#123;</span><br><span class="line"><span class="function">String <span class="title">name</span><span class="params">()</span> <span class="keyword">default</span> ""</span>; <span class="comment">//资源的名称</span></span><br><span class="line">String[] value();   <span class="comment">//资源路径:比如classpath地址或者文件系统地址</span></span><br><span class="line">    <span class="comment">//是否忽略文件资源是否存在，默认是false,也就是说配置不存在的文件地址spring启动将会报错</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">ignoreResourceNotFound</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">false</span></span>;</span><br><span class="line"><span class="function">String <span class="title">encoding</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;<span class="comment">//字符编码</span></span><br><span class="line">    <span class="comment">//关键的元素:读取对应资源文件的工厂类,默认的是PropertySourceFactory</span></span><br><span class="line">Class&lt;? extends PropertySourceFactory&gt; factory() <span class="keyword">default</span> PropertySourceFactory<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="PropertySource注解底层是如何解析这些配置文件"><a href="#PropertySource注解底层是如何解析这些配置文件" class="headerlink" title="PropertySource注解底层是如何解析这些配置文件"></a>PropertySource注解底层是如何解析这些配置文件</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @see DefaultPropertySourceFactory</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PropertySourceFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">PropertySource&lt;?&gt; createPropertySource(<span class="meta">@Nullable</span> String name, EncodedResource resource) <span class="keyword">throws</span> IOException;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="createPropertySource方法"><a href="#createPropertySource方法" class="headerlink" title="createPropertySource方法"></a>createPropertySource方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultPropertySourceFactory</span> <span class="keyword">implements</span> <span class="title">PropertySourceFactory</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> PropertySource&lt;?&gt; createPropertySource(<span class="meta">@Nullable</span> String name, EncodedResource resource) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="keyword">return</span> (name != <span class="keyword">null</span> ? <span class="keyword">new</span> ResourcePropertySource(name, resource) : <span class="keyword">new</span> ResourcePropertySource(resource));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="出现了ResourcePropertySource"><a href="#出现了ResourcePropertySource" class="headerlink" title="出现了ResourcePropertySource"></a>出现了ResourcePropertySource</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//两个主要的构造方法</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Create a PropertySource having the given name based on Properties</span></span><br><span class="line"><span class="comment"> * loaded from the given encoded resource.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ResourcePropertySource</span><span class="params">(String name, EncodedResource resource)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(name, PropertiesLoaderUtils.loadProperties(resource));</span><br><span class="line"><span class="keyword">this</span>.resourceName = getNameForResource(resource.getResource());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Create a PropertySource based on Properties loaded from the given resource.</span></span><br><span class="line"><span class="comment"> * The name of the PropertySource will be generated based on the</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> Resource#getDescription() description&#125; of the given resource.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ResourcePropertySource</span><span class="params">(EncodedResource resource)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(getNameForResource(resource.getResource()), PropertiesLoaderUtils.loadProperties(resource));</span><br><span class="line"><span class="keyword">this</span>.resourceName = <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="加载资源-PropertiesLoaderUtils-loadProperties-resource"><a href="#加载资源-PropertiesLoaderUtils-loadProperties-resource" class="headerlink" title="加载资源:PropertiesLoaderUtils.loadProperties(resource)"></a>加载资源:PropertiesLoaderUtils.loadProperties(resource)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Properties <span class="title">loadProperties</span><span class="params">(EncodedResource resource)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">Properties props = <span class="keyword">new</span> Properties();</span><br><span class="line">fillProperties(props, resource);</span><br><span class="line"><span class="keyword">return</span> props;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fillProperties</span><span class="params">(Properties props, EncodedResource resource)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">fillProperties(props, resource, <span class="keyword">new</span> DefaultPropertiesPersister());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="继续跟-fillProperties-props-resource-new-DefaultPropertiesPersister"><a href="#继续跟-fillProperties-props-resource-new-DefaultPropertiesPersister" class="headerlink" title="继续跟:fillProperties(props, resource, new DefaultPropertiesPersister());"></a>继续跟:fillProperties(props, resource, new DefaultPropertiesPersister());</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fillProperties</span><span class="params">(Properties props, EncodedResource resource, PropertiesPersister persister)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">InputStream stream = <span class="keyword">null</span>;</span><br><span class="line">Reader reader = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">String filename = resource.getResource().getFilename();</span><br><span class="line"><span class="keyword">if</span> (filename != <span class="keyword">null</span> &amp;&amp; filename.endsWith(XML_FILE_EXTENSION)) &#123;</span><br><span class="line">                <span class="comment">//加载xml文件</span></span><br><span class="line">stream = resource.getInputStream();</span><br><span class="line">persister.loadFromXml(props, stream);</span><br><span class="line">&#125;</span><br><span class="line">            <span class="comment">//判断是否有需要对应的字符编码设置</span></span><br><span class="line">            <span class="comment">//有的话处理对应的InputStream</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (resource.requiresReader()) &#123;</span><br><span class="line">reader = resource.getReader();</span><br><span class="line">persister.load(props, reader);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">stream = resource.getInputStream();</span><br><span class="line">persister.load(props, stream);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (stream != <span class="keyword">null</span>) &#123;</span><br><span class="line">stream.close();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (reader != <span class="keyword">null</span>) &#123;</span><br><span class="line">reader.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ConfigurableEnvironment接口"><a href="#ConfigurableEnvironment接口" class="headerlink" title="ConfigurableEnvironment接口"></a>ConfigurableEnvironment接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ConfigurableEnvironment</span> <span class="keyword">extends</span> <span class="title">Environment</span>, <span class="title">ConfigurablePropertyResolver</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setActiveProfiles</span><span class="params">(String... profiles)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addActiveProfile</span><span class="params">(String profile)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setDefaultProfiles</span><span class="params">(String... profiles)</span></span>;</span><br><span class="line">    <span class="comment">//注意返回值类型</span></span><br><span class="line"><span class="function">MutablePropertySources <span class="title">getPropertySources</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">Map&lt;String, Object&gt; <span class="title">getSystemProperties</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">Map&lt;String, Object&gt; <span class="title">getSystemEnvironment</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(ConfigurableEnvironment parent)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="MutablePropertySources类"><a href="#MutablePropertySources类" class="headerlink" title="MutablePropertySources类"></a>MutablePropertySources类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MutablePropertySources</span> <span class="keyword">implements</span> <span class="title">PropertySources</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> List&lt;PropertySource&lt;?&gt;&gt; propertySourceList = <span class="keyword">new</span> CopyOnWriteArrayList&lt;&gt;();</span><br><span class="line"><span class="comment">//Create a new &#123;@link MutablePropertySources&#125; object.</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MutablePropertySources</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Create a new &#123;@code MutablePropertySources&#125; from the given propertySources object</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MutablePropertySources</span><span class="params">(PropertySources propertySources)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>();</span><br><span class="line"><span class="keyword">for</span> (PropertySource&lt;?&gt; propertySource : propertySources) &#123;</span><br><span class="line">addLast(propertySource);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="四-函数驱动：函数式编程"><a href="#四-函数驱动：函数式编程" class="headerlink" title="(四)函数驱动：函数式编程"></a>(四)函数驱动：函数式编程</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">函数接口</span>: <span class="string">ApplicationEventPublisher, Reactive:Spring WebFlux</span></span><br><span class="line"><span class="meta">Java8新的函数接口</span>: <span class="string">public @interface FunctionalInterface &#123;&#125;</span></span><br></pre></td></tr></table></figure><h4 id="FunctionalInterface注解-函数接口定义"><a href="#FunctionalInterface注解-函数接口定义" class="headerlink" title="FunctionalInterface注解:函数接口定义"></a>FunctionalInterface注解:函数接口定义</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/** <span class="doctag">@jls</span> 9.8 Functional Interfaces</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@jls</span> 9.4.3 Interface Method Body</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> FunctionalInterface &#123;&#125;</span><br></pre></td></tr></table></figure><p><strong>函数接口简单讲他有一些约束，他只有一个抽象方法，排除掉Object中的equals和hashCode等声明方法以及default实现</strong></p><h4 id="比如ApplicationListener"><a href="#比如ApplicationListener" class="headerlink" title="比如ApplicationListener"></a>比如ApplicationListener</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span><span class="comment">//函数接口定义</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ApplicationListener</span>&lt;<span class="title">E</span> <span class="keyword">extends</span> <span class="title">ApplicationEvent</span>&gt; <span class="keyword">extends</span> <span class="title">EventListener</span> </span>&#123;</span><br><span class="line"><span class="comment">//Handle an application event.只有一个方法(函数实现)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">onApplicationEvent</span><span class="params">(E event)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="五-模块驱动"><a href="#五-模块驱动" class="headerlink" title="(五)模块驱动"></a>(五)模块驱动</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Maven</span> <span class="string">Artifacts,OSGI Bundles,Java9 Automatic Modules,Spring @Enable*</span></span><br></pre></td></tr></table></figure><h4 id="最熟悉的EnableCaching-激活缓存模块"><a href="#最熟悉的EnableCaching-激活缓存模块" class="headerlink" title="最熟悉的EnableCaching:激活缓存模块"></a>最熟悉的EnableCaching:激活缓存模块</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Import</span>(CachingConfigurationSelector<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">EnableCaching</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">proxyTargetClass</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">false</span></span>;</span><br><span class="line"><span class="function">AdviceMode <span class="title">mode</span><span class="params">()</span> <span class="keyword">default</span> AdviceMode.PROXY</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">order</span><span class="params">()</span> <span class="keyword">default</span> Ordered.LOWEST_PRECEDENCE</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="还有比如EnablTransactionManagement激活事务模块"><a href="#还有比如EnablTransactionManagement激活事务模块" class="headerlink" title="还有比如EnablTransactionManagement激活事务模块"></a>还有比如EnablTransactionManagement激活事务模块</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Import</span>(TransactionManagementConfigurationSelector<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">EnableTransactionManagement</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">proxyTargetClass</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">false</span></span>;</span><br><span class="line"><span class="function">AdviceMode <span class="title">mode</span><span class="params">()</span> <span class="keyword">default</span> AdviceMode.PROXY</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">order</span><span class="params">()</span> <span class="keyword">default</span> Ordered.LOWEST_PRECEDENCE</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="还有比如激活EnableWebMvc模块"><a href="#还有比如激活EnableWebMvc模块" class="headerlink" title="还有比如激活EnableWebMvc模块"></a>还有比如激活EnableWebMvc模块</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Import</span>(DelegatingWebMvcConfiguration<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">EnableWebMvc</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一-面向对象编程&quot;&gt;&lt;a href=&quot;#一-面向对象编程&quot; class=&quot;headerlink&quot; title=&quot;(一)面向对象编程&quot;&gt;&lt;/a&gt;(一)面向对象编程&lt;/h3&gt;&lt;figure class=&quot;highlight properties&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;契约接口&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;Aware,BeanPostProcessor...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;设计模式&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;观察者模式(ApplicationEvent),组合模式(CompositeCacheManger),模板模式(JDBCTemplate)...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;对象继承&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;Abstract*类 (AbstractApplicationContext)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="think-in-spring" scheme="https://Agonywy.github.io/categories/think-in-spring/"/>
    
    
      <category term="think-in-spring" scheme="https://Agonywy.github.io/tags/think-in-spring/"/>
    
  </entry>
  
  <entry>
    <title>席卷Java各种锁</title>
    <link href="https://agonywy.github.io/2020/07/21/%E5%B8%AD%E5%8D%B7Java%E4%B8%BB%E6%B5%81%E9%94%81/"/>
    <id>https://agonywy.github.io/2020/07/21/%E5%B8%AD%E5%8D%B7Java%E4%B8%BB%E6%B5%81%E9%94%81/</id>
    <published>2020-07-21T13:42:35.000Z</published>
    <updated>2020-08-16T10:07:30.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Java主流锁"><a href="#Java主流锁" class="headerlink" title="Java主流锁"></a>Java主流锁</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">1</span>:<span class="string">乐观锁，悲观锁</span></span><br><span class="line"><span class="attr">2</span>:<span class="string">读锁(共享锁)，写锁(排他锁)</span></span><br><span class="line"><span class="attr">3</span>:<span class="string">自旋锁,非自旋锁</span></span><br><span class="line"><span class="attr">4</span>:<span class="string">无锁--&gt;偏向锁--&gt;轻量级锁--&gt;重量级锁(JVM内置锁的膨胀升级过程)</span></span><br><span class="line"><span class="attr">5</span>:<span class="string">分布式锁</span></span><br><span class="line"><span class="attr">6</span>:<span class="string">区间锁(分段锁),在ConcurrentHashMap中有所体现,JUC下面的类基本都有体现</span></span><br><span class="line"><span class="attr">7</span>:<span class="string">重入锁,非重入锁</span></span><br><span class="line"><span class="attr">8</span>:<span class="string">公平锁，非公平锁</span></span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="悲观锁和乐观锁"><a href="#悲观锁和乐观锁" class="headerlink" title="悲观锁和乐观锁"></a>悲观锁和乐观锁</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">悲观锁</span>:<span class="string">悲观锁认为自己在使用数据的时候一定会有别的线程来修改数据,在获取数据的时候会先加锁,确保数据不会被其他线程修改</span></span><br><span class="line"><span class="meta">锁实现</span>:<span class="string">关键字Synchronized,接口Lock的实现类</span></span><br><span class="line"><span class="meta">乐观锁</span>:<span class="string">乐观锁认为自己在使用数据的时候不会有别的线程修改数据,所以不会添加锁,只是在更新数据的时候去判断之前有没有线程更新了这个数据</span></span><br><span class="line"><span class="meta">锁实现</span>:<span class="string">CAS算法,ActotomicInteger类的原子自增就是通过CAS自旋实现的</span></span><br></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#悲观锁执行过程:</span></span><br><span class="line"><span class="attr">线程1和线程2去获取共享资源,线程1拿到锁去操作资源,线程2就会阻塞,等线程1执行完毕之后,释放锁,线程2才能再去获取锁操作共享资源</span></span><br><span class="line"><span class="comment">#乐观锁的执行过程</span></span><br><span class="line"><span class="attr">线程在获取到共享资源准备修改的时候,需要先判断内存中的数据有没有被修改,如果没有,那么就可以执行修改操作,如果被修改了,就要重现获取数据执行操作,然后重复CAS直到成功</span></span><br></pre></td></tr></table></figure><h4 id="CAS"><a href="#CAS" class="headerlink" title="CAS"></a>CAS</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">CAS</span>:<span class="string">Compare and Swap:涉及到三个操作数,V是需要读写的内存值(堆内存),A进行比较的值,维护在栈内存中的一个副本,B是我们的更新值,只有当V=A的时候,我们才可以使用B去修改V(只有当栈中副本值与主内存的value值相等的时候,我们才能使用更新值B去更新主内存中的value)</span></span><br><span class="line"><span class="meta">CAS自旋的过程</span>:<span class="string">重新load内存中的值到栈中,重新进行更新操作,再一次进行compare and swap操作</span></span><br><span class="line"><span class="meta">特点</span>:<span class="string">CAS不放弃CPU时间片,通过自旋等待获取锁</span></span><br></pre></td></tr></table></figure><h4 id="CAS在Atomic中的实现"><a href="#CAS在Atomic中的实现" class="headerlink" title="CAS在Atomic中的实现"></a>CAS在Atomic中的实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getAndSetInt</span><span class="params">(Object var1, Long var2, <span class="keyword">int</span> var4)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> var5;</span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        var5 = <span class="keyword">this</span>.getIntVolatile(var1,var2);</span><br><span class="line">    &#125;<span class="keyword">while</span>(!<span class="keyword">this</span>.compareAndSwapInt(var1,var2,var5,var4));</span><br><span class="line">    <span class="keyword">return</span> var5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="CAS存在的问题"><a href="#CAS存在的问题" class="headerlink" title="CAS存在的问题"></a>CAS存在的问题</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">(1)ABA问题</span>:<span class="string">线程1读书到内存值A之后,准备要去修改内存值,这时候线程2将内存中的值从A修改成了B,之后内存值又被其他线程从B修改成了A,这个时候当线程1准备修改内存值的时候,CAS发现内存值没有改变,这个时候CAS成功了,但是这个时候内存中的值已经不是最初的状态了,因此发生了错误</span></span><br><span class="line"><span class="meta">解决方案</span>:<span class="string">在变量上面加上版本号,Atomic中为我们提供了一个AtomicStampReference类来做版本标记,我们CAS的时候不仅要比较你栈内存中的副本和主内存中的值是否相同,还要判断版本号是否相同,只有都满足的时候才能保证内存中的值没有被修改,CAS才能够成功,否则CAS会失败</span></span><br><span class="line"><span class="meta">(2)循环时间开销大</span>:<span class="string">如果CAS操作一直失败,就需要循环进行CAS操作,这种方式也称为自选如果一直不成功的话就会很耗费系统资源</span></span><br><span class="line"><span class="meta">解决方案</span>:<span class="string">限制自旋次数,防止陷入死循环</span></span><br><span class="line"><span class="meta">(3)只能保证一个共享变量的原子操作</span>:<span class="string">CAS的原子操作只能针对一个共享变量</span></span><br><span class="line"><span class="meta">解决方案</span>:<span class="string">如果要对多个共享变量进行操作,需要使用加锁的方式保证原子性</span></span><br></pre></td></tr></table></figure><h4 id="自旋锁"><a href="#自旋锁" class="headerlink" title="自旋锁"></a>自旋锁</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">自旋锁</span>:<span class="string">是指当一个线程在获取锁的时候,如果该锁已经被其他线程获取了,那么该线程会循环等待,然后不断的判断锁是否能够获取,自旋直到成功获取到锁后,才会退出循环</span></span><br><span class="line"><span class="meta">自适应自旋锁</span>:<span class="string">自适应自旋假定不同线程持有同一个锁对象的时间基本相当,竞争程度趋于稳定,因此可以根据上一次自旋的时间与结果调整下一次自旋的时间</span></span><br></pre></td></tr></table></figure><p><strong>自旋锁存在的意义和使用场景</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">(1)</span>:<span class="string">阻塞与欢迎需要操作系统切换CUP状态,需要消耗一定的时间</span></span><br><span class="line"><span class="meta">(2)</span>:<span class="string">同步代码快逻辑简单,执行时间很短的时候自旋锁效率更高,因为自旋不放弃CPU时间片CPU切换上下文很消耗资源,所以自旋反而效率高</span></span><br><span class="line"><span class="meta">上下文切换</span>:<span class="string">JVM运行在操作系统上,JVM是用户态,操作系统是核心态,真正的调度对硬件的操作只有操作系统才有这样的权限,JVM要通知CPU进行上下文的切换,无法直接向CPU发出指令,所以只能借助操作系统去通知CPU进行上下文切换,因此这里就涉及到用户态与内核态之间的切换,比如线程1执行到一半上下文切换,他的变量都暂时存放在了进程中的PCB(进程控制块)中,当线程1恢复执行的时候,CPU又得从PCB中重新读取线程1的变量去执行操作,这个过程就很耗费资源</span></span><br></pre></td></tr></table></figure><h4 id="Synchronized分析"><a href="#Synchronized分析" class="headerlink" title="Synchronized分析"></a>Synchronized分析</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">synchronized使用方式</span>:<span class="string"></span></span><br><span class="line"><span class="meta">(1)</span>:<span class="string">同步实例方法,锁是当前实例对象</span></span><br><span class="line"><span class="meta">(2)</span>:<span class="string">同步类方法,锁是当前类对象</span></span><br><span class="line"><span class="meta">(3)</span>:<span class="string">同步代码块,锁是括号里面的对象</span></span><br><span class="line"><span class="meta">实现方法</span>:<span class="string"></span></span><br><span class="line"><span class="meta">synchronized是JVM内置锁,通过内部对象Monitor(监视器锁)实现,基于进入与退出Monitor对象实现方法与代码块同步,Monitor监视器锁的实现依赖于底层操作系统的Mute</span> <span class="string">lock(互斥锁)实现</span></span><br><span class="line"><span class="attr">反编译的话就可以看到monitorEnter指令和monitorExit指令</span></span><br><span class="line"><span class="meta">---------monitorEnter</span><span class="string"></span></span><br><span class="line"><span class="attr">synchronized</span>:<span class="string">--------代码逻辑</span></span><br><span class="line"><span class="attr">---------monitorExit</span></span><br></pre></td></tr></table></figure><h4 id="Monitor监视器对象"><a href="#Monitor监视器对象" class="headerlink" title="Monitor监视器对象"></a>Monitor监视器对象</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#每一个对象都有一个自己的监视器锁monitor</span></span><br><span class="line"><span class="attr">如果想要进入同步方法,需要先去判断当前线程是不是拿到了对象的monitor监视器锁,如果拿到了才能进入到同步代码块去执行方法,如果没有拿到对象的monitor监视器锁,当前线程就会到SynchronizedQueue(同步队列)中去排队,等待对象的监视器锁释放之后Monitor.Exit之后,</span></span><br><span class="line"><span class="attr">线程才能继续去获取对象的监视器锁,拿到之后执行逻辑代码,执行完之后释放对象的monitor监视器锁.</span></span><br></pre></td></tr></table></figure><h4 id="JVM内置锁的膨胀升级过程"><a href="#JVM内置锁的膨胀升级过程" class="headerlink" title="JVM内置锁的膨胀升级过程"></a>JVM内置锁的膨胀升级过程</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">偏向锁---&gt;轻量级锁---&gt;重量级锁</span></span><br><span class="line"><span class="meta">(1)偏向锁</span>:<span class="string">只有一个线程进入临界区,适用于只有一个线程访问同步代码快的场景</span></span><br><span class="line"><span class="meta">(2)轻量级锁</span>:<span class="string">多线程未竞争或者竞争不激烈,适用于追求响应时间,同步代码的执行速度非常快</span></span><br><span class="line"><span class="meta">(3)重量级锁</span>:<span class="string">多线程竞争,使用追求吞吐量,同步代码块的执行时间比较长</span></span><br></pre></td></tr></table></figure><h4 id="JVM对象加锁原理"><a href="#JVM对象加锁原理" class="headerlink" title="JVM对象加锁原理"></a>JVM对象加锁原理</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">认识对象的内存结构</span></span><br><span class="line"><span class="meta">(1)对象头</span>:<span class="string">比如hash值,对象锁,偏向状态,线程ID,锁状态标志等等信息 </span></span><br><span class="line"><span class="meta">(2)对象实际数据</span>:<span class="string">即创建对象时,对象中的成员变量,方法等等.</span></span><br></pre></td></tr></table></figure><p><strong>面试：实例对象是怎样存储的?</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">对象的实例存储在堆空间</span></span><br><span class="line"><span class="attr">对象的元数据存放在方法区(元数据区)</span></span><br><span class="line"><span class="attr">对象的引用存放在栈空间</span></span><br></pre></td></tr></table></figure><h4 id="公平锁与非公平锁"><a href="#公平锁与非公平锁" class="headerlink" title="公平锁与非公平锁"></a>公平锁与非公平锁</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">公平锁</span>:<span class="string">公平锁是FIFO机制,谁先来谁就在队列的前面,就能优先获得锁</span></span><br><span class="line"><span class="meta">非公平锁</span>:<span class="string">非公平锁支持抢占模式,先来的不一定能得到锁</span></span><br><span class="line"><span class="meta">对于ReetrantLock而言</span>:<span class="string">通过构造方法指定该锁是否未为公平锁,默认是非公平锁,非公平锁的优点在于吞吐量大.</span></span><br><span class="line"><span class="meta">对于Synchronized而言</span>:<span class="string">由于其并不像ReetrantLock是通过AQS来实现线程调度,所以没有办法使其变成公平锁</span></span><br></pre></td></tr></table></figure><h4 id="可重入锁与不可重入锁"><a href="#可重入锁与不可重入锁" class="headerlink" title="可重入锁与不可重入锁"></a>可重入锁与不可重入锁</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">可重入锁</span>:<span class="string">是指同一个线程可以多次去获取同一个锁,可重复可递归调用锁,并且不会发生死锁</span></span><br><span class="line"><span class="attr">ReetrantLock和Synchronized都是可重入锁</span></span><br><span class="line"><span class="meta">不可重入锁(自旋锁)</span>:<span class="string">一个线程不能够重复获取同一个锁使用,只能将锁释放才能获取锁,否则就会发生死锁</span></span><br></pre></td></tr></table></figure><h4 id="读锁与写锁-共享锁与独占锁"><a href="#读锁与写锁-共享锁与独占锁" class="headerlink" title="读锁与写锁(共享锁与独占锁)"></a>读锁与写锁(共享锁与独占锁)</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">读锁(共享锁)</span>:<span class="string">这个锁可以被多个线程共同拥有,最典型的就是ReetrantReadWriteLock中的读锁,是可以被共享的</span></span><br><span class="line"><span class="meta">写锁(独占锁)</span>:<span class="string">就是这个锁只能被一个线程锁拥有,其他线程会阻塞,最典型的就是ReetrantReadWriteLock中的写锁,他就是独占的</span></span><br></pre></td></tr></table></figure><h4 id="读写锁"><a href="#读写锁" class="headerlink" title="读写锁"></a>读写锁</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">读写锁ReetrantLock</span>:<span class="string">读写锁在Java中的具体实现就是ReetrantLock,他即是独占锁又是共享锁,一次只能以恶线程可以占有写模式的读写锁,但是可以多个线程共同占有读模式的读写锁</span></span><br><span class="line"><span class="attr">ReetrantLock读状态与读状态之间共享,但是读状态写与写状态和写状态与写状态之间是互斥的</span></span><br></pre></td></tr></table></figure><h4 id="偏向锁"><a href="#偏向锁" class="headerlink" title="偏向锁"></a>偏向锁</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">偏向锁</span>:<span class="string">偏向于第一个访问锁的线程,只有一个线程访问.一段同步代码块一直被一个线程访问,那么该线程就会自动获得锁,降低获取锁的代价</span></span><br></pre></td></tr></table></figure><h4 id="轻量级锁"><a href="#轻量级锁" class="headerlink" title="轻量级锁"></a>轻量级锁</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">轻量级锁是指当关闭偏向锁功能或者多个线程竞争偏向锁的时候,偏向锁就会升级为轻量级锁，其他线程会通过自旋的方式尝试获取锁,不会阻塞</span></span><br></pre></td></tr></table></figure><h4 id="重量级锁synchronized"><a href="#重量级锁synchronized" class="headerlink" title="重量级锁synchronized"></a>重量级锁synchronized</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">重量级锁是指当锁是轻量级锁的时候,另一个线程虽然是自旋,但是自旋不会一直持续下去,当自旋到一定次数的时候,就会进入阻塞,轻量级锁就会膨胀成重量级锁,重量级锁会让其他自旋的线程也都进入阻塞</span></span><br></pre></td></tr></table></figure><h4 id="分段锁"><a href="#分段锁" class="headerlink" title="分段锁"></a>分段锁</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">分段锁其实是一种锁的设计,并不是一种具体的锁,对于ConcurrentHashMap而言,他并发的实现就是通过分段锁的形式来实现的</span></span><br><span class="line"><span class="meta">比如</span>:<span class="string">在ConcurrentHashMap中使用了一个包含16个锁的数组,每个锁保护散列桶的1/16,这样的话我们最高就可以实现16个线程同时对ConcurrentHashMap进行操作,这样就提高了效率</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;Java主流锁&quot;&gt;&lt;a href=&quot;#Java主流锁&quot; class=&quot;headerlink&quot; title=&quot;Java主流锁&quot;&gt;&lt;/a&gt;Java主流锁&lt;/h4&gt;&lt;figure class=&quot;highlight properties&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;1&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;乐观锁，悲观锁&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;2&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;读锁(共享锁)，写锁(排他锁)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;3&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;自旋锁,非自旋锁&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;4&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;无锁--&amp;gt;偏向锁--&amp;gt;轻量级锁--&amp;gt;重量级锁(JVM内置锁的膨胀升级过程)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;5&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;分布式锁&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;6&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;区间锁(分段锁),在ConcurrentHashMap中有所体现,JUC下面的类基本都有体现&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;7&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;重入锁,非重入锁&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;8&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;公平锁，非公平锁&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="多线程" scheme="https://Agonywy.github.io/categories/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
      <category term="多线程" scheme="https://Agonywy.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>AQS(同步&amp;条件)</title>
    <link href="https://agonywy.github.io/2020/07/18/AQS(%E5%90%8C%E6%AD%A5+%E6%9D%A1%E4%BB%B6)/"/>
    <id>https://agonywy.github.io/2020/07/18/AQS(%E5%90%8C%E6%AD%A5+%E6%9D%A1%E4%BB%B6)/</id>
    <published>2020-07-18T13:42:35.000Z</published>
    <updated>2020-08-16T09:40:58.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="隐式锁与显式锁"><a href="#隐式锁与显式锁" class="headerlink" title="隐式锁与显式锁"></a>隐式锁与显式锁</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">隐式锁</span>:<span class="string">(synchronized,他是基于JVM的内置锁),加锁与解锁的过程不需要我们在代码中认为的控制,jvm会自动去加锁和解锁</span></span><br><span class="line"><span class="meta">显式锁</span>:<span class="string">JUC下面都是显式锁,比如ReetrantLock,一个可重入的悲观锁,整个加锁和解锁过程需要我们手动编写代码去控制,显式锁是通过AQS实现的</span></span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="AQS类关系"><a href="#AQS类关系" class="headerlink" title="AQS类关系"></a>AQS类关系</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReentrantLock</span> <span class="keyword">implements</span> <span class="title">Lock</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Sync sync;</span><br><span class="line"><span class="comment">//AQS:AbstractQueuedSynchronizer</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Sync</span> <span class="keyword">extends</span> <span class="title">AbstractQueuedSynchronizer</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractQueuedSynchronizer</span> </span></span><br><span class="line"><span class="class">    <span class="keyword">extends</span> <span class="title">AbstractOwnableSynchronizer</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;&#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> Node head;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> Node tail;</span><br><span class="line">    <span class="comment">//表示当前线程加锁的次数    </span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> state;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractOwnableSynchronizer</span> </span>&#123;</span><br><span class="line">    <span class="comment">//exclusiveOwnerThread:当前独占锁的线程,由此可知ReetrantLock是个悲观锁</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> Thread exclusiveOwnerThread;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="AQS之同步队列"><a href="#AQS之同步队列" class="headerlink" title="AQS之同步队列"></a>AQS之同步队列</h4><p><strong>AQS抽象队列同步器是基于CLH队列去实现的<br>整个AQS分为两个队列,一个是同步队列,另一个是条件队列,只有同步队列的节点才能获取锁</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1: ReentrantLock(以下排队是针对公平锁解释的)</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">FairSync</span> <span class="keyword">extends</span> <span class="title">Sync</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span>  </span>&#123; acquire(<span class="number">1</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2:AbstractQueuedSynchronizer:</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">acquire</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//尝试获取一把锁</span></span><br><span class="line">    <span class="comment">//addWaiter(Node.EXCLUSIVE)没获取到锁将线程封装成Node放入队列等待</span></span><br><span class="line">    <span class="keyword">if</span> (!tryAcquire(arg) &amp;&amp; acquireQueued</span><br><span class="line">        (addWaiter(Node.EXCLUSIVE), arg))</span><br><span class="line">            selfInterrupt();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3:ReentrantLock</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Thread current = Thread.currentThread();</span><br><span class="line">    <span class="keyword">int</span> c = getState();</span><br><span class="line">    <span class="keyword">if</span> (c == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//如果当前线程之前有一个排队的线程，并且当前线程在队列的开头或队列为空</span></span><br><span class="line">        <span class="keyword">if</span> (!hasQueuedPredecessors() &amp;&amp;</span><br><span class="line">            compareAndSetState(<span class="number">0</span>, acquires)) &#123;<span class="comment">//修改state值</span></span><br><span class="line">            <span class="comment">//设置当前线程是独占锁的线程</span></span><br><span class="line">            setExclusiveOwnerThread(current);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果当前线程就是独占锁的线程,再次试图获取锁就将state+1</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (current == getExclusiveOwnerThread()) &#123;</span><br><span class="line">        <span class="keyword">int</span> nextc = c + acquires;</span><br><span class="line">        <span class="keyword">if</span> (nextc &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">"Maximum lock count exceeded"</span>);</span><br><span class="line">        setState(nextc);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="AQS原理"><a href="#AQS原理" class="headerlink" title="AQS原理"></a>AQS原理</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">AQS的核心思想是</span>:<span class="string">如果请求的共享资源空闲,那么就将当前请求资源的线程设置为当前独占锁的线程,将共享资源的状态设置成锁定状态;如果请求的共享资源被占用的话,就需要使用阻塞唤醒机制来保证锁的分配,这个机制主要用的是CLH队列实现的,将暂时获取不到锁的线程加入到队列</span></span><br></pre></td></tr></table></figure><h4 id="CLH"><a href="#CLH" class="headerlink" title="CLH"></a>CLH</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">CLH</span>:<span class="string">是一种基于双向链表结构的队列,AQS中的队列是CLH变体的双向队列FIFO,线程由原来的自旋机制改成阻塞机制实现的.AQS通过将每个请求共享资源的线程封装一个Node节点来实现锁的分配</span></span><br><span class="line"><span class="attr">AQS使用state来表示同步状态,通过内置的FIFO队列来完成资源获取的排队工作,通过CAS完成对state值的修改</span></span><br></pre></td></tr></table></figure><h4 id="AQS数据结构"><a href="#AQS数据结构" class="headerlink" title="AQS数据结构"></a>AQS数据结构</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">AQS中最基本的数据结构就是Node</span>:<span class="string">Node就是上面CLH变体队列中的节点</span></span><br><span class="line"><span class="attr">waitStatus</span>:<span class="string">当前节点在CLH变体队列中的状态</span></span><br><span class="line"><span class="attr">thread</span>:<span class="string">表示位于该节点的阻塞线程</span></span><br><span class="line"><span class="attr">prev</span>:<span class="string">前驱指针</span></span><br><span class="line"><span class="attr">preDecessor</span>:<span class="string">返回前驱节点,没有的话抛出NoPointException</span></span><br><span class="line"><span class="attr">next</span>:<span class="string">后继节点</span></span><br><span class="line"><span class="attr">nextWaiter</span>:<span class="string">指向下一个处于condition状态的节点</span></span><br><span class="line"><span class="attr">addWaiter</span>:<span class="string">就是一个在双端链表添加尾节点的操作</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> Node SHARED = <span class="keyword">new</span> Node();</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> Node EXCLUSIVE = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">//信号状态cancelled代表当前节点中的线程已经挂掉了</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CANCELLED = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//信号状态signal代表当前节点中的线程正常,等待被唤醒</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SIGNAL = -<span class="number">1</span>;</span><br><span class="line">    <span class="comment">//信号状态condition代表的不是同步队列,而是条件队列</span></span><br><span class="line">    <span class="comment">//线程池中的队列涉及的就是条件队列,线程在条件队列中阻塞排队</span></span><br><span class="line">    <span class="comment">//只有独占锁才存在condition条件队列</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CONDITION = -<span class="number">2</span>;</span><br><span class="line">    <span class="comment">//setHeadAndPropagate的propagate参数大于0，</span></span><br><span class="line">    <span class="comment">//也就是现在的头节点获取了共享资源，并且之后的节点也可以获取共享资源</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PROPAGATE = -<span class="number">3</span>;</span><br><span class="line">    <span class="comment">//当前节点中的线程的状态在CLH变体队列中的状态</span></span><br><span class="line">    <span class="keyword">volatile</span> <span class="keyword">int</span> waitStatus;</span><br><span class="line">    <span class="comment">//表示位于该节点的阻塞线程</span></span><br><span class="line">    <span class="keyword">volatile</span> Thread thread;</span><br><span class="line">    <span class="keyword">volatile</span> Node prev;</span><br><span class="line">    <span class="keyword">volatile</span> Node next;</span><br><span class="line">    <span class="comment">//preDecessor:返回前驱节点,没有的话抛出NoPointException</span></span><br><span class="line">    <span class="function"><span class="keyword">final</span> Node <span class="title">predecessor</span><span class="params">()</span> <span class="keyword">throws</span> NullPointerException </span>&#123;</span><br><span class="line">        Node p = prev;</span><br><span class="line">        <span class="keyword">if</span> (p == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//addWaiter:就是一个在双端链表添加尾节点的操作</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Node <span class="title">addWaiter</span><span class="params">(Node mode)</span> </span>&#123;</span><br><span class="line">        Node node = <span class="keyword">new</span> Node(Thread.currentThread(), mode);</span><br><span class="line">        <span class="comment">// Try the fast path of enq; backup to full enq on failure</span></span><br><span class="line">        Node pred = tail;</span><br><span class="line">        <span class="keyword">if</span> (pred != <span class="keyword">null</span>) &#123;</span><br><span class="line">            node.prev = pred;</span><br><span class="line">            <span class="keyword">if</span> (compareAndSetTail(pred, node)) &#123;</span><br><span class="line">                pred.next = node;</span><br><span class="line">                <span class="keyword">return</span> node;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        enq(node);</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="state"><a href="#state" class="headerlink" title="state"></a>state</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">state</span>:<span class="string">state的get/set()方法都是Final修饰的,说明子类中无法重写它们.我们可以通过修改State字段表示的同步状态来实现多线程的独占模式和共享模式（加锁过程）</span></span><br><span class="line"><span class="attr">protected</span> <span class="string">final int getState():获取State的值</span></span><br><span class="line"><span class="attr">protected</span> <span class="string">final void setState(int newState):设置State的值</span></span><br><span class="line"><span class="comment">#使用CAS方式更新State:</span></span><br><span class="line"><span class="attr">protected</span> <span class="string">final boolean compareAndSetState(int expect, int update)</span></span><br></pre></td></tr></table></figure><h4 id="加锁-解锁"><a href="#加锁-解锁" class="headerlink" title="加锁/解锁"></a>加锁/解锁</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">加锁：</span></span><br><span class="line"><span class="attr">1</span>:<span class="string">通过ReentrantLock的加锁方法Lock进行加锁操作。</span></span><br><span class="line"><span class="attr">2</span>:<span class="string">会调用到内部类Sync的Lock方法，由于Sync#lock是抽象方法，根据ReentrantLock初始化选择的公平锁和非公平锁,执行相关内部类的Lock方法,本质上都会执行AQS的Acquire方法</span></span><br><span class="line"><span class="attr">3</span>:<span class="string">AQS的Acquire方法会执行tryAcquire方法,但是由于tryAcquire需要自定义同步器实现，因此执行了ReentrantLock中的tryAcquire方法,由于ReentrantLock是通过公平锁和非公平锁内部类实现的tryAcquire方法,因此会根据锁类型不同,执行不同的tryAcquire。</span></span><br><span class="line"><span class="attr">4</span>:<span class="string">tryAcquire是获取锁逻辑，获取失败后，会执行框架AQS的后续逻辑，跟ReentrantLock自定义同步器无关。</span></span><br><span class="line"></span><br><span class="line"><span class="attr">解锁：</span></span><br><span class="line"><span class="attr">1</span>:<span class="string">通过ReentrantLock的解锁方法Unlock进行解锁。</span></span><br><span class="line"><span class="attr">2</span>:<span class="string">Unlock会调用内部类Sync的Release方法，该方法继承于AQS。</span></span><br><span class="line"><span class="attr">3</span>:<span class="string">Release中会调用tryRelease方法，tryRelease需要自定义同步器实现，tryRelease只在ReentrantLock中的Sync实现，因此可以看出，释放锁的过程，并不区分是否为公平锁。</span></span><br><span class="line"><span class="attr">4</span>:<span class="string">释放成功后，所有处理由AQS框架完成，与自定义同步器无关。</span></span><br></pre></td></tr></table></figure><h4 id="Acquired-amp-amp-Release"><a href="#Acquired-amp-amp-Release" class="headerlink" title="Acquired&amp;&amp;Release"></a>Acquired&amp;&amp;Release</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">1</span>:<span class="string">protected boolean tryAcquire(int arg)</span></span><br><span class="line"><span class="attr">独占方式。arg为获取锁的次数，尝试获取资源，成功则返回True，失败则返回False。</span></span><br><span class="line"><span class="attr">2</span>:<span class="string">protected boolean tryRelease(int arg)</span></span><br><span class="line"><span class="attr">独占方式。arg为释放锁的次数，尝试释放资源，成功则返回True，失败则返回False。</span></span><br><span class="line"><span class="attr">3</span>:<span class="string">protected int tryAcquireShared(int arg)</span></span><br><span class="line"><span class="attr">共享方式。arg为获取锁的次数，尝试获取资源。负数表示失败；0表示成功，但没有剩余可用资源；正数表示成功，且有剩余资源。</span></span><br><span class="line"><span class="attr">4</span>:<span class="string">protected boolean tryReleaseShared(int arg)</span></span><br><span class="line"><span class="attr">共享方式。arg为释放锁的次数，尝试释放资源，如果释放后允许唤醒后续等待结点返回True，否则返回False。</span></span><br></pre></td></tr></table></figure><h4 id="线程阻塞放入CHL队列"><a href="#线程阻塞放入CHL队列" class="headerlink" title="线程阻塞放入CHL队列"></a>线程阻塞放入CHL队列</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">1</span>:<span class="string">当执行Acquire(1)时，会通过tryAcquire获取锁。在这种情况下，如果获取锁失败，就会调用addWaiter加入到等待队列中去。</span></span><br><span class="line"><span class="attr">2</span>:<span class="string">hasQueuedPredecessors是公平锁加锁时判断等待队列中是否存在有效节点的方法。如果返回False，说明当前线程可以争取共享资源；如果返回True，说明队列中存在有效节点，当前线程必须加入到等待队列中</span></span><br><span class="line"><span class="attr">3</span>:<span class="string">addWaiter就是一个在双端链表添加尾节点的操作，需要注意的是，双端链表的头结点是一个无参构造函数的头结点。</span></span><br></pre></td></tr></table></figure><h4 id="hasQueuedPredecessors"><a href="#hasQueuedPredecessors" class="headerlink" title="hasQueuedPredecessors"></a>hasQueuedPredecessors</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">hasQueuedPredecessors是公平锁加锁时判断等待队列中是否存在有效节点的方法</span></span><br><span class="line"><span class="comment">h != t &amp;&amp; ((s = h.next) == null || s.thread != Thread.currentThread());</span></span><br><span class="line"><span class="comment">为什么要判断的头结点的下一个节点？第一个节点储存的数据是什么？</span></span><br><span class="line"><span class="comment">双向链表中,第一个节点为虚节点,其实并不存储任何信息,只是占位.真正的第一个有数据的节点,是在第二个节点开始的</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">hasQueuedPredecessors</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Node t = tail;</span><br><span class="line">Node h = head;</span><br><span class="line">Node s;</span><br><span class="line"><span class="keyword">return</span> h != t &amp;&amp; ((s = h.next) == <span class="keyword">null</span> || s.thread != Thread.currentThread());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="等待队列中线程出队列时机"><a href="#等待队列中线程出队列时机" class="headerlink" title="等待队列中线程出队列时机"></a>等待队列中线程出队列时机</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">上文解释了addWaiter方法，这个方法其实就是把对应的线程以Node的数据结构形式加入到双端队列里，返回的是一个包含该线程的Node。而这个Node会作为参数，进入到acquireQueued方法中。acquireQueued方法可以对排队中的线程进行“获锁”操作。</span></span><br><span class="line"><span class="attr">总的来说，一个线程获取锁失败了，被放入等待队列，acquireQueued会把放入队列中的线程不断去获取锁，直到获取成功</span></span><br></pre></td></tr></table></figure><h4 id="acquireQueued"><a href="#acquireQueued" class="headerlink" title="acquireQueued"></a>acquireQueued</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">for(</span>:<span class="string">:)通过自旋的方式一直找到第一个节点,他的前置节点就是头节点,我们要让这个节点中的线程去获取锁</span></span><br><span class="line"><span class="attr">跳出当前循环的条件是当“前置节点是头结点，且当前线程获取锁成功”。为了防止因死循环导致CPU资源被浪费，我们会判断前置节点的状态来决定是否要将当前线程挂起(前驱节点的waitStatus为-1）)</span></span><br><span class="line"><span class="attr">当前节点获取到锁之后,Node中将thread置为null,然后将head头节点指到这个节点上,这个节点就成了新的头节点,同时也达到了将该节点移除的效果</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">acquireQueued</span><span class="params">(<span class="keyword">final</span> Node node, <span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 标记是否成功拿到资源</span></span><br><span class="line"><span class="keyword">boolean</span> failed = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 标记等待过程中是否中断过</span></span><br><span class="line"><span class="keyword">boolean</span> interrupted = <span class="keyword">false</span>;</span><br><span class="line"><span class="comment">// 开始自旋，要么获取锁，要么中断</span></span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="comment">// 获取当前节点的前驱节点</span></span><br><span class="line">        <span class="keyword">final</span> Node p = node.predecessor();</span><br><span class="line">        <span class="comment">// 如果p是头结点，说明当前节点在真实数据队列的首部，就尝试获取锁（别忘了头结点是虚节点）</span></span><br><span class="line">        <span class="keyword">if</span> (p == head &amp;&amp; tryAcquire(arg)) &#123;</span><br><span class="line">            <span class="comment">// 获取锁成功，头指针移动到当前node,setHead方法是把当前节点置为虚节点</span></span><br><span class="line">            setHead(node);</span><br><span class="line">            p.next = <span class="keyword">null</span>; <span class="comment">// help GC</span></span><br><span class="line">            failed = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">return</span> interrupted;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 说明p为头节点且当前没有获取到锁（可能是非公平锁被抢占了）或者是p不为头结点，</span></span><br><span class="line">        <span class="comment">//这个时候就要判断当前node是否要被阻塞（</span></span><br><span class="line">        <span class="comment">//被阻塞条件：前驱节点的waitStatus为-1，防止无限循环浪费资源.</span></span><br><span class="line">        <span class="comment">//parkAndCheckInterrupt主要用于挂起当前线程，阻塞调用栈，返回当前线程的中断状态</span></span><br><span class="line">        <span class="keyword">if</span> (shouldParkAfterFailedAcquire(p, node) &amp;&amp; parkAndCheckInterrupt())</span><br><span class="line">            interrupted = <span class="keyword">true</span>;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (failed)</span><br><span class="line">            <span class="comment">//如果处于排队等候机制中的线程一直无法获取锁</span></span><br><span class="line">            <span class="comment">//线程所在节点的状态会变成取消状态，取消状态的节点会从队列中释放</span></span><br><span class="line">cancelAcquire(node);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="AQS之条件队列"><a href="#AQS之条件队列" class="headerlink" title="AQS之条件队列"></a>AQS之条件队列</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">条件队列---------&gt;线程池阻塞队列的关键组件</span></span><br><span class="line"><span class="attr">等待条件的过程</span></span><br><span class="line"><span class="attr">1</span>:<span class="string">线程在操作条件队列之前首先需要获取独占锁,否则在获取独占锁的时候就已经被挂起了</span></span><br><span class="line"><span class="attr">2</span>:<span class="string">成功获取独占锁以后,如果当前条件还不满足,那该线程就会在该锁的条件队列上阻塞挂起,与此同时释放掉当前获取的锁资源</span></span><br><span class="line"><span class="attr">3</span>:<span class="string">然后等待signal正常唤醒或者由于节点中断加入到同步队列</span></span><br><span class="line"><span class="attr">如果Node被唤醒并且已经转移到了同步队列中,则会执行与独占锁一样的方法acquireQueued()去独占的获取锁</span></span><br><span class="line"></span><br><span class="line"><span class="meta">条件满足后的唤醒过程</span>:<span class="string">把当前条件队列中的第一个有效节点加入到同步队列中去等待被前置节点唤醒,条件队列中所谓的唤醒就是把条件队列移到同步队列中去,让节点有机会去获取锁</span></span><br></pre></td></tr></table></figure><h4 id="条件队列阻塞方法await"><a href="#条件队列阻塞方法await" class="headerlink" title="条件队列阻塞方法await()"></a>条件队列阻塞方法await()</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">await</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    <span class="comment">//如果当前线程被中断则直接抛出异常</span></span><br><span class="line">    <span class="keyword">if</span> (Thread.interrupted())</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> InterruptedException();</span><br><span class="line">    <span class="comment">//把当前节点加入条件队列</span></span><br><span class="line">    Node node = addConditionWaiter();</span><br><span class="line">    <span class="comment">//释放掉已经获取的独占锁资源</span></span><br><span class="line">    <span class="keyword">int</span> savedState = fullyRelease(node);</span><br><span class="line">    <span class="keyword">int</span> interruptMode = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//如果不在同步队列中则不断挂起</span></span><br><span class="line">    <span class="keyword">while</span> (!isOnSyncQueue(node)) &#123;</span><br><span class="line">        LockSupport.park(<span class="keyword">this</span>);</span><br><span class="line">        <span class="comment">//中断处理，另一种跳出循环的方式</span></span><br><span class="line">        <span class="keyword">if</span> ((interruptMode = checkInterruptWhileWaiting(node)) != <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//走到这里说明节点已经条件满足被加入到了同步队列中或者中断了</span></span><br><span class="line">    <span class="keyword">if</span> (acquireQueued(node, savedState) &amp;&amp; interruptMode != THROW_IE)</span><br><span class="line">        interruptMode = REINTERRUPT;</span><br><span class="line">    <span class="comment">//走到这里说明已经成功获取到了独占锁</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="节点加入条件队列之后持续挂起"><a href="#节点加入条件队列之后持续挂起" class="headerlink" title="节点加入条件队列之后持续挂起"></a>节点加入条件队列之后持续挂起</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如果不在同步队列就继续挂起（signal操作会把节点加入同步队列）</span></span><br><span class="line"><span class="keyword">while</span> (!isOnSyncQueue(node)) &#123;</span><br><span class="line">    LockSupport.park(<span class="keyword">this</span>);</span><br><span class="line">    <span class="comment">//中断处理</span></span><br><span class="line">    <span class="keyword">if</span> ((interruptMode = checkInterruptWhileWaiting(node)) != <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="队列转移"><a href="#队列转移" class="headerlink" title="队列转移"></a>队列转移</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">满足条件之后条件队列中的第一个有效节点会被放入同步队列中去</span></span><br><span class="line"><span class="attr">然后和同步队列中的其他节点一样自旋等待获取锁</span></span><br><span class="line"><span class="attr">1</span>:<span class="string">signal操作将条件队列中第一个有效的节点唤醒,然后直接放入了同步队列中</span></span><br><span class="line"><span class="attr">2</span>:<span class="string">节点中断:返回THROW_IE,由signal加入同步队列则返回peinterrupt</span></span><br><span class="line"><span class="attr">设置节点状态为0,如果成功则加入同步队列,如果设置状态失败了,说明节点已经被signal唤醒,是由signal加入同步队列的</span></span><br></pre></td></tr></table></figure><h4 id="条件队列唤醒方法signal"><a href="#条件队列唤醒方法signal" class="headerlink" title="条件队列唤醒方法signal()"></a>条件队列唤醒方法signal()</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">signal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//如果不是独占锁则抛出异常，再次说明条件队列只适用于独占锁</span></span><br><span class="line">    <span class="keyword">if</span> (!isHeldExclusively())</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalMonitorStateException();</span><br><span class="line">    <span class="comment">//如果条件队列不为空，则进行唤醒操作</span></span><br><span class="line">    Node first = firstWaiter;</span><br><span class="line">    <span class="keyword">if</span> (first != <span class="keyword">null</span>)</span><br><span class="line">        doSignal(first);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//该方法就是把一个有效节点从条件队列中删除并加入同步队列</span></span><br><span class="line"><span class="comment">//如果失败则会查找条件队列上等待的下一个节点直到队列为空</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doSignal</span><span class="params">(Node first)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> ( (firstWaiter = first.nextWaiter) == <span class="keyword">null</span>)</span><br><span class="line">            lastWaiter = <span class="keyword">null</span>;</span><br><span class="line">        first.nextWaiter = <span class="keyword">null</span>;</span><br><span class="line">    &#125; <span class="keyword">while</span> (!transferForSignal(first) &amp;&amp;(first = firstWaiter) != <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将节点加入同步队列</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">transferForSignal</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//修改节点状态，这里如果修改失败只有一种可能就是该节点被取消</span></span><br><span class="line">    <span class="keyword">if</span> (!compareAndSetWaitStatus(node, Node.CONDITION, <span class="number">0</span>))</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="comment">//跟独占锁入队方法一样</span></span><br><span class="line">    Node p = enq(node);</span><br><span class="line">    <span class="keyword">int</span> ws = p.waitStatus;</span><br><span class="line">    <span class="comment">//如果前置节点被取消或者修改状态失败则直接唤醒当前节点</span></span><br><span class="line">    <span class="comment">//此时当前节点已经处于同步队列中，唤醒会进行锁获取或者正确的挂起操作</span></span><br><span class="line">    <span class="keyword">if</span> (ws &gt; <span class="number">0</span> || !compareAndSetWaitStatus(p, ws, Node.SIGNAL))</span><br><span class="line">        LockSupport.unpark(node.thread);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="判断节点是不是满足条件被放入了同步队列"><a href="#判断节点是不是满足条件被放入了同步队列" class="headerlink" title="判断节点是不是满足条件被放入了同步队列"></a>判断节点是不是满足条件被放入了同步队列</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断节点是否在同步队列中</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">isOnSyncQueue</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//快速判断1：节点状态或者节点没有前置节点</span></span><br><span class="line">    <span class="comment">//原因：同步队列是有头节点的，而条件队列没有</span></span><br><span class="line">    <span class="keyword">if</span> (node.waitStatus == Node.CONDITION || node.prev == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="comment">//快速判断2：next字段只有同步队列才会使用，条件队列中使用的是nextWaiter字段</span></span><br><span class="line">    <span class="keyword">if</span> (node.next != <span class="keyword">null</span>) </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    <span class="comment">//上面如果无法判断则进入复杂判断</span></span><br><span class="line">    <span class="keyword">return</span> findNodeFromTail(node);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;隐式锁与显式锁&quot;&gt;&lt;a href=&quot;#隐式锁与显式锁&quot; class=&quot;headerlink&quot; title=&quot;隐式锁与显式锁&quot;&gt;&lt;/a&gt;隐式锁与显式锁&lt;/h4&gt;&lt;figure class=&quot;highlight properties&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;隐式锁&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;(synchronized,他是基于JVM的内置锁),加锁与解锁的过程不需要我们在代码中认为的控制,jvm会自动去加锁和解锁&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;显式锁&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;JUC下面都是显式锁,比如ReetrantLock,一个可重入的悲观锁,整个加锁和解锁过程需要我们手动编写代码去控制,显式锁是通过AQS实现的&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="多线程" scheme="https://Agonywy.github.io/categories/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
      <category term="多线程" scheme="https://Agonywy.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>redis-List</title>
    <link href="https://agonywy.github.io/2020/07/09/redis-list/"/>
    <id>https://agonywy.github.io/2020/07/09/redis-list/</id>
    <published>2020-07-09T11:12:35.000Z</published>
    <updated>2020-08-16T15:08:42.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="List（可以实现队列和栈）"><a href="#List（可以实现队列和栈）" class="headerlink" title="List（可以实现队列和栈）"></a>List（可以实现队列和栈）</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">List是一个有序(按照加入的时间顺序排序)的数据结构,Redis采用quickList(快速链表)和(压缩列表)zipList作为List的底层实现</span></span><br><span class="line"><span class="attr">可以通过设置每个zipList的最大容量,quickList的数据压缩范围,提升数据存储效率</span></span><br><span class="line"><span class="meta">(1)</span>:<span class="string">list-compress-depth指定在每个list中的两端没有被压缩的节点的个数</span></span><br><span class="line"><span class="meta">list-compress-depth</span> <span class="string">0</span></span><br><span class="line"><span class="attr">quicklist</span> <span class="string">默认的压缩深度是0,也就是不压缩</span></span><br><span class="line"><span class="meta">(2)-n</span>:<span class="string">每个ziplist占用的内存不超过2^(n+1)kb</span></span><br><span class="line"><span class="meta">list-max-ziplist-size</span> <span class="string">-2</span></span><br><span class="line"><span class="attr">quicklist内部默认单个ziplist长度为8k字节,超出了这个字节数,就会新起一个ziplist</span></span><br></pre></td></tr></table></figure><a id="more"></a><p><strong>基本操作</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">以Lpush为例,比如Lpush</span> <span class="string">key a b c d,意思就是从左边放入,那么双端队列中就是d c b a</span></span><br><span class="line"><span class="meta">然后Lrange</span> <span class="string">key 0 -1全部查询,从左边开始查询,依次就是d b c a</span></span><br><span class="line"><span class="meta">如果是Lpop</span> <span class="string">key,那就会弹出d,再次执行Lpop key就会弹出c</span></span><br><span class="line"><span class="attr">Llen,Ltrim,Lpushx,Lindex,Lindext等等</span></span><br><span class="line"><span class="meta">解释一下Ltrim</span> <span class="string">start stop:截取start到stop的数据</span></span><br><span class="line"><span class="attr">Ltrim</span> <span class="string">key 0 3:只保留0-3这4个元素</span></span><br></pre></td></tr></table></figure><p><strong>quickList</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">quickList</span>:<span class="string">主要由四种数据结构实现,quicklist,qucikNode,quicklistLZF以及ziplist</span></span><br></pre></td></tr></table></figure><p><strong>quicklist结构</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">typedef struct quicklist &#123;</span><br><span class="line">    <span class="comment">/* 整个链表的头部节点quickListNode */</span></span><br><span class="line">    quicklistNode *head;</span><br><span class="line">    <span class="comment">/* 整个链表的尾部节点 */</span></span><br><span class="line">    quicklistNode *tail;</span><br><span class="line">    <span class="comment">/* 整个链表中的所有的entry的数量 */</span></span><br><span class="line">    unsigned <span class="keyword">long</span> count;</span><br><span class="line">    <span class="comment">/* quicklistNode的数量 */</span></span><br><span class="line">    unsigned <span class="keyword">int</span> len;</span><br><span class="line">    <span class="comment">/* 用户存放配置文件中的list-max-ziplist-size的值 */</span></span><br><span class="line">    <span class="keyword">int</span> fill : <span class="number">16</span>; </span><br><span class="line">    <span class="comment">/* 压缩节点的深度，表示表头或者表尾有几个节点不被压缩;</span></span><br><span class="line"><span class="comment">     * 存放list-compress-depth参数的值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    unsigned <span class="keyword">int</span> compress : <span class="number">16</span>; </span><br><span class="line">&#125; quicklist;</span><br></pre></td></tr></table></figure><p><strong>qucikListNode</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">typedef struct quicklistNode &#123;</span><br><span class="line">    <span class="comment">/* 指向前面的quicklistNode */</span></span><br><span class="line">    struct quicklistNode *prev;</span><br><span class="line">    <span class="comment">/* 指向后面的quicklistNode */</span></span><br><span class="line">    struct quicklistNode *next;</span><br><span class="line">    <span class="comment">/* 如果对数据进行压缩，zl指向ziplist；</span></span><br><span class="line"><span class="comment">     * 如果不对数据进行压缩，zl指向quicklistLZF</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    unsigned <span class="keyword">char</span> *zl;</span><br><span class="line">    <span class="comment">/* zl指向的ziplist的总大小(包括zlbytes,zltail,zllen,zlend和各个entry的长度之和);</span></span><br><span class="line"><span class="comment">     * 如果ziplist被压缩了，那么这个sz值仍然是表示压缩前的ziplist的大小;</span></span><br><span class="line"><span class="comment">     * ziplist没有被压缩时，sz表示的就是ziplist占据的字节数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    unsigned <span class="keyword">int</span> sz;</span><br><span class="line">    <span class="comment">/* ziplist内部entry的个数 */</span></span><br><span class="line">    unsigned <span class="keyword">int</span> count : <span class="number">16</span>;</span><br><span class="line">    <span class="comment">/* 是否可以对ziplist的压缩;</span></span><br><span class="line"><span class="comment">     * encoding = QUICKLIST_NODE_ENCODING_LZF，表示可以压缩;</span></span><br><span class="line"><span class="comment">     * encoding = QUICKLIST_NODE_ENCODING_RAW, 表示不压缩    </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    unsigned <span class="keyword">int</span> encoding : <span class="number">2</span>;</span><br><span class="line">    <span class="comment">/* quicklistNode是否作为一个容器使用;</span></span><br><span class="line"><span class="comment">     * 如果quicklistNode不作为容器使用，container = QUICKLIST_NODE_CONTAINER_NONE;         * 如果quicklistNode作为容器使用, container = QUICKLIST_NODE_CONTAINER_ZIPLIST;</span></span><br><span class="line"><span class="comment">     * 设计quicklist的目的就是为了避免单独使用adlist和ziplist，所以quicklistNode一般</span></span><br><span class="line"><span class="comment">     * 用作容器，指向一个包含少量entry的ziplist或者是quicklistLZF</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    unsigned <span class="keyword">int</span> container : <span class="number">2</span>;  <span class="comment">/* NONE==1 or ZIPLIST==2 */</span></span><br><span class="line">    <span class="comment">/* 当使用lindex这样的命令查看某一项本来压缩的数据的时候，需要把数据暂时解压，</span></span><br><span class="line"><span class="comment">     * 这时就设置recompress=1做一个标记，等有机会再把数据进行压缩</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    unsigned <span class="keyword">int</span> recompress : <span class="number">1</span>;</span><br><span class="line">    <span class="comment">/* 只用于redis的自动化测试 */</span></span><br><span class="line">    unsigned <span class="keyword">int</span> attempted_compress : <span class="number">1</span>;</span><br><span class="line">    unsigned <span class="keyword">int</span> extra : <span class="number">10</span>;</span><br><span class="line">&#125; quicklistNode;</span><br></pre></td></tr></table></figure><p><strong>quickListLZF</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">typedef struct quicklistLZF &#123;</span><br><span class="line">     <span class="comment">/* ziplist压缩之后的存储在compressed中的数据长度；</span></span><br><span class="line"><span class="comment">      * 压缩之前的数据的长度存储在quicklistNode的成员sz中</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">     unsigned <span class="keyword">int</span> sz; </span><br><span class="line">     <span class="comment">/* 柔性数组 */</span></span><br><span class="line">     <span class="keyword">char</span> compressed[];</span><br><span class="line">&#125; quicklistLZF;</span><br></pre></td></tr></table></figure><p><strong>ziplist</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">zipllist</span>:<span class="string">压缩列表,本质上就是一个字节数组,是redis为了节约内存涉及的一种数据结构,可以包含任意多个元素,每个元素都可以是一个字节数组或一个整数,redis中的有序集合,哈希以及列表(List)都直接或者间接的使用到了压缩列表.</span></span><br><span class="line"><span class="attr">当有序集合或者哈希的元素数目都比较少并且都是短字符串的时候,redis就使用压缩列表作为其底层数据存储方式,列表使用quickList(快速链表)数据结构存储,而快速链表就是双端链表与压缩列表的组合</span></span><br></pre></td></tr></table></figure><p><strong>ziplist数据结构</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&lt;zlbytes&gt;&lt;zltail&gt;&lt;zllen&gt;&lt;entry&gt;...&lt;entry&gt;&lt;zlend&gt;</span></span><br><span class="line"><span class="meta">&lt;zlbytes&gt;</span>:<span class="string">32bit,表示ziplist数据结构占用的字节总数</span></span><br><span class="line"><span class="meta">&lt;zltail&gt;</span>:<span class="string">32bit,表示ziplist中 最后一项(entry)在ziplist中的偏移字节数,方便在ziplist尾端进行操作</span></span><br><span class="line"><span class="meta">&lt;zllen&gt;</span>:<span class="string">16bit,表示ziplist中数据项(entry)的个数</span></span><br><span class="line"><span class="meta">&lt;entry&gt;</span>:<span class="string">数据项</span></span><br><span class="line"><span class="meta">&lt;zlend&gt;</span>:<span class="string">ziplist最后一个字节,是一个结束标记,值固定是255</span></span><br></pre></td></tr></table></figure><p><strong>数据项<entey></entey></strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&lt;prevrawlen&gt;&lt;len&gt;&lt;data&gt;</span></span><br><span class="line"><span class="meta">&lt;prevrawlen&gt;</span>:<span class="string">表示前面的数据项所占用的总字节数,这个字段的用处是为了让ziplist能够从后向前遍历,后面的entry数据项向前偏移prevrawlen个字节就可以找到前一个数据项</span></span><br><span class="line"><span class="meta">&lt;len&gt;</span>:<span class="string">表示当前数据项的数据&lt;data&gt;的长度</span></span><br><span class="line"><span class="meta">&lt;data&gt;</span>:<span class="string">表示当前数据项的数据</span></span><br></pre></td></tr></table></figure><p><strong><prevrawlen></prevrawlen></strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;prevrawlen&gt;</span>:<span class="string">他是怎么进行变长编码的?</span></span><br><span class="line"><span class="meta">情况1</span>:<span class="string">如果前一个数据项占用字节数小于254,那么&lt;prevrawlen&gt;就只用一个字节来表示,这个字节的值就是前一个数据项占用的字节数</span></span><br><span class="line"><span class="meta">情况2</span>:<span class="string">如果前一个数据项占用的字节数大于等于254,那么&lt;prevrawlen&gt;就会用5个字节来表示,第一个字节的数目就是254来作为这种情况的一个标记,而后面4个字节组成一个整形值来表示前一个数据项所占用的字节数</span></span><br><span class="line"><span class="attr">为什么没有255的情况呢?</span></span><br><span class="line"><span class="attr">这是因为前面ziplist的结构中的&lt;zlend&gt;使用255来作为结束标记了</span></span><br></pre></td></tr></table></figure><p><strong><len></len></strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">|00pppppp|</span>:<span class="string">第1个字节最高两个bit是00，那么&lt;len&gt;字段只有1个字节，剩余的6个bit用来表示长度值，最高可以表示63 (2^6-1)。</span></span><br><span class="line"><span class="meta">|01pppppp|qqqqqqqq|</span>:<span class="string">第1个字节最高两个bit是01，那么&lt;len&gt;字段占2个字节，总共有14个bit用来表示长度值，最高可以表示16383 (2^14-1)。</span></span><br><span class="line"><span class="meta">|10------|qqqqqqqq|rrrrrrrr|ssssssss|tttttttt|</span>:<span class="string">第1个字节最高两个bit是10，那么len字段占5个字节，总共使用32个bit来表示长度值（6个bit舍弃不用），最高可以表示2^32-1。需要注意的是：在前三种情况下，&lt;data&gt;都是按字符串来存储的；从下面第4种情况开始，&lt;data&gt;开始变为按整数来存储了。</span></span><br><span class="line"><span class="meta">|11000000|</span>:<span class="string">&lt;len&gt;字段占用1个字节，值为0xC0，后面的数据&lt;data&gt;存储为2个字节的int16_t类型。</span></span><br><span class="line"><span class="meta">|11010000|</span>:<span class="string">&lt;len&gt;字段占用1个字节，值为0xD0，后面的数据&lt;data&gt;存储为4个字节的int32_t类型。</span></span><br><span class="line"><span class="meta">|11100000|</span>:<span class="string">&lt;len&gt;字段占用1个字节，值为0xE0，后面的数据&lt;data&gt;存储为8个字节的int64_t类型。</span></span><br><span class="line"><span class="meta">|11110000|</span>:<span class="string">&lt;len&gt;字段占用1个字节，值为0xF0，后面的数据&lt;data&gt;存储为3个字节长的整数。</span></span><br><span class="line"><span class="meta">|11111110|</span>:<span class="string">&lt;len&gt;字段占用1个字节，值为0xFE，后面的数据&lt;data&gt;存储为1个字节的整数。</span></span><br><span class="line"><span class="meta">|1111xxxx|(xxxx的值在0001和1101之间)</span>:<span class="string">这是一种特殊情况,xxxx从1到13一共13个值,这时就用这13个值来表示真正的数据.注意,这里是表示真正的数据,而不是数据长度了,也就是说,在这种情况下,后面不再需要一个单独的&lt;data&gt;字段来表示真正的数据了,而是&lt;len&gt;和&lt;data&gt;合二为一了,另外,由于xxxx只能取0001和1101这13个值了(其它可能的值和其它情况冲突了),比如0000和1110分别同前面第7种第8种情况冲突,1111跟结束标记冲突,而小数值应该从0开始,因此这13个值分别表示0到12,即xxxx的值减去1才是它所要表示的那个整数数据的值.</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;List（可以实现队列和栈）&quot;&gt;&lt;a href=&quot;#List（可以实现队列和栈）&quot; class=&quot;headerlink&quot; title=&quot;List（可以实现队列和栈）&quot;&gt;&lt;/a&gt;List（可以实现队列和栈）&lt;/h4&gt;&lt;figure class=&quot;highlight properties&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;List是一个有序(按照加入的时间顺序排序)的数据结构,Redis采用quickList(快速链表)和(压缩列表)zipList作为List的底层实现&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;可以通过设置每个zipList的最大容量,quickList的数据压缩范围,提升数据存储效率&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;(1)&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;list-compress-depth指定在每个list中的两端没有被压缩的节点的个数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;list-compress-depth&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;quicklist&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;默认的压缩深度是0,也就是不压缩&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;(2)-n&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;每个ziplist占用的内存不超过2^(n+1)kb&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;list-max-ziplist-size&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;-2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;quicklist内部默认单个ziplist长度为8k字节,超出了这个字节数,就会新起一个ziplist&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="redis" scheme="https://Agonywy.github.io/categories/redis/"/>
    
    
      <category term="redis" scheme="https://Agonywy.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>redis-String基本类</title>
    <link href="https://agonywy.github.io/2020/07/07/redis-String%E5%9F%BA%E6%9C%AC%E7%B1%BB/"/>
    <id>https://agonywy.github.io/2020/07/07/redis-String%E5%9F%BA%E6%9C%AC%E7%B1%BB/</id>
    <published>2020-07-07T11:12:35.000Z</published>
    <updated>2020-08-24T09:04:00.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="String"><a href="#String" class="headerlink" title="String"></a>String</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">redis是非关系型的键值对数据库,可以根据key以O(1)的时间复杂度取出或插入关联值</span></span><br><span class="line"><span class="attr">redis里面的key其实都会转成String类型，在redis中自定义了一个数据类结构sds</span></span><br><span class="line"><span class="attr">sds</span>:<span class="string">simple dynamic string简单动态字符传串,而不是简单的使用char[]数组</span></span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="sds结构"><a href="#sds结构" class="headerlink" title="sds结构"></a>sds结构</h4><p><strong>1. redis3.2版本之前sds的结构:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">struct sdshdr&#123;</span><br><span class="line"><span class="keyword">int</span> len;<span class="comment">//表示数据长度</span></span><br><span class="line"><span class="keyword">int</span> free;<span class="comment">//表示剩余空间</span></span><br><span class="line"><span class="keyword">char</span> buf[];<span class="comment">//存放字符</span></span><br><span class="line">&#125;</span><br><span class="line">缺点:描述数据的字段占用内存空间很大,<span class="keyword">int</span>就<span class="number">4</span>个字节</span><br></pre></td></tr></table></figure><p><strong>redis3.2之后sds的结构：</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">一个header。通常包含字符串的长度(len),最大容量(alloc),flags和一个字符数组</span></span><br><span class="line"><span class="attr">sds中有一个字段flags总是占用一个字节,其中低3位来表示header的5种类型</span></span><br><span class="line"><span class="comment">#define SDS_TYPE_5  0</span></span><br><span class="line"><span class="comment">#define SDS_TYPE_8  1</span></span><br><span class="line"><span class="comment">#define SDS_TYPE_16 2</span></span><br><span class="line"><span class="comment">#define SDS_TYPE_32 3</span></span><br><span class="line"><span class="comment">#define SDS_TYPE_64 4</span></span><br><span class="line"><span class="attr">这个字符数组的长度等于最大容量+1,真正有效的字符串数据,其长度通常小于最大容量,在真正的字符串数据之后,是空余未用的字节（一般以字节0填充）,允许在不重新分配内存的前提下让字符串数据向后做有限的扩展.在真正的字符串数据之后,还有一个NULL结束符,即ASCII码为0的’\0’字符,这是为了和传统C字符串兼容,之所以字符数组的长度比最大容量多1个字节,就是为了在字符串长度达到最大容量时仍然有1个字节存放NULL结束符</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">sds一共有<span class="number">5</span>种类型的header,之所以有<span class="number">5</span>种,是为了能让不同长度的字符串可以使用不同大小的header,这样,短字符串就能使用较小的header,从而节省内存.</span><br><span class="line">typedef <span class="keyword">char</span> *sds;</span><br><span class="line"><span class="comment">//意思就是当string.size()&lt;2^5的时候使用sdshdr5这个header</span></span><br><span class="line"><span class="function">struct <span class="title">__attribute__</span> <span class="params">((__packed__)</span>) sdshdr5 </span>&#123;</span><br><span class="line">    unsigned <span class="keyword">char</span> flags; </span><br><span class="line">    <span class="keyword">char</span> buf[];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">struct <span class="title">__attribute__</span> <span class="params">((__packed__)</span>) sdshdr8 </span>&#123;</span><br><span class="line">    uint8_t len; <span class="comment">//表示字符串的真正长度,用8bit表示</span></span><br><span class="line">    uint8_t alloc;<span class="comment">//表示字符串的最大容量</span></span><br><span class="line">    unsigned <span class="keyword">char</span> flags; <span class="comment">//使用低3位来表示header的类型</span></span><br><span class="line">    <span class="comment">//flags就存放实际存储数据的char[]buf的前面一个字节</span></span><br><span class="line">    <span class="keyword">char</span> buf[];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">struct <span class="title">__attribute__</span> <span class="params">((__packed__)</span>) sdshdr16 </span>&#123;</span><br><span class="line">    uint16_t len; <span class="comment">//用16bit表示</span></span><br><span class="line">    uint16_t alloc; </span><br><span class="line">    unsigned <span class="keyword">char</span> flags;</span><br><span class="line">    <span class="keyword">char</span> buf[];</span><br><span class="line">&#125;; </span><br><span class="line"><span class="function">struct <span class="title">__attribute__</span> <span class="params">((__packed__)</span>) sdshdr32 </span>&#123;</span><br><span class="line">    uint32_t len; <span class="comment">//用32bit表示</span></span><br><span class="line">    uint32_t alloc; </span><br><span class="line">    unsigned <span class="keyword">char</span> flags;</span><br><span class="line">    <span class="keyword">char</span> buf[];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">struct <span class="title">__attribute__</span> <span class="params">((__packed__)</span>) sdshdr64 </span>&#123;</span><br><span class="line">    uint64_t len; <span class="comment">//用64bit表示</span></span><br><span class="line">    uint64_t alloc;</span><br><span class="line">    unsigned <span class="keyword">char</span> flags; </span><br><span class="line">    <span class="keyword">char</span> buf[];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="sds优点"><a href="#sds优点" class="headerlink" title="sds优点"></a>sds优点</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">1</span>:<span class="string">sds是一个二进制安全数据结构,通过len字段避免了char[]数组中以‘/0’字符为结束标志的影响</span></span><br><span class="line"><span class="attr">2</span>:<span class="string">redis动态扩容,避免了频繁的内存分配: char[]数组扩容需要重新分配内存,redis通过free解决扩容的问题,redis扩容会先去看free+length能不能容纳字符串,如果就就不扩容,如果不够才会扩容,扩容超过1M,redis不再双倍扩容而是每次扩容1M</span></span><br></pre></td></tr></table></figure><h4 id="redis-Key-Value"><a href="#redis-Key-Value" class="headerlink" title="redis(Key-Value)"></a>redis(Key-Value)</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">redis中key的存储和Java中的HashMap结构类似,其实就是hash表</span></span><br><span class="line"><span class="attr">redis底层其实是基于数组存储key的,key可能是String类型,浮点类型等等各种类型,其实redis中就是对key进行hash,得到一个自然数,然后会对数组长度求余,这个key就转变成了数组的下标去使用,这样对key查询的复杂度就降低到了O(1)</span></span><br><span class="line"><span class="attr">当出现hash冲突的时候就使用到了链表,如果内容hash值相同但是key值不同的话,依旧会使用链表将key放入同一个桶中</span></span><br></pre></td></tr></table></figure><h4 id="redisDB"><a href="#redisDB" class="headerlink" title="redisDB"></a>redisDB</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">redis中有<span class="number">16</span>个redisBD,所有的数据都是在redisDB中来存储的</span><br><span class="line">typedef struct redisDb &#123;</span><br><span class="line">    <span class="keyword">int</span> id;<span class="comment">// 保存着数据库以整数表示的号码</span></span><br><span class="line">    <span class="comment">// dict:字典----保存着数据库中的所有键值对数据</span></span><br><span class="line">    <span class="comment">// 这个属性也被称为键空间（key space）</span></span><br><span class="line">    dict *dict;</span><br><span class="line">    dict *expires;<span class="comment">//存储过期时间</span></span><br><span class="line">    dict *blocking_keys;<span class="comment">// 保存着键的过期信息</span></span><br><span class="line">    dict *ready_keys;<span class="comment">// 实现列表阻塞原语，如 BLPOP</span></span><br><span class="line">    dict *watched_keys;<span class="comment">// 用于实现 WATCH 命令</span></span><br><span class="line">&#125; redisDb;</span><br></pre></td></tr></table></figure><h4 id="dict-字典数据结构"><a href="#dict-字典数据结构" class="headerlink" title="dict-字典数据结构"></a>dict-字典数据结构</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">typedef struct dict&#123;</span><br><span class="line">dictType *type;<span class="comment">//特定于类型的处理函数,里面就是hash函数</span></span><br><span class="line"><span class="keyword">void</span> *privdata;<span class="comment">//私有数据</span></span><br><span class="line">dictht ht[<span class="number">2</span>];<span class="comment">//其实就是个2个哈希表--hashTable</span></span><br><span class="line"><span class="keyword">long</span> rehashidx;<span class="comment">//记录rehash的标志,-1表示rehash未进行</span></span><br><span class="line">unsigned <span class="keyword">long</span> iterators;<span class="comment">//当前正在运作的安全迭代器的数量</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="dictht-哈希表结构"><a href="#dictht-哈希表结构" class="headerlink" title="dictht-哈希表结构"></a>dictht-哈希表结构</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">typedet struct dictht&#123;</span><br><span class="line">    dicEntry **table;<span class="comment">//哈希表节点指针数组(俗称桶,bucket)</span></span><br><span class="line">    unsigned <span class="keyword">long</span> size; <span class="comment">//指针数组的大小</span></span><br><span class="line">    unsigned <span class="keyword">long</span> sizemask;<span class="comment">//指针数组的长度掩码,用于计算哈希值</span></span><br><span class="line">    unsigned <span class="keyword">long</span> used;<span class="comment">//哈希表现有的节点数量(已经使用的数组size)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ht-2-–-哈希表"><a href="#ht-2-–-哈希表" class="headerlink" title="ht[2] – 哈希表"></a>ht[2] – 哈希表</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">新创建的两个哈希表都没有为table属性分配任何空间</span></span><br><span class="line"><span class="attr">ht[0]--&gt;table的空间将在第一次往字典添加键值对时进行</span></span><br><span class="line"><span class="attr">ht[1]--&gt;table的空间分配将在rehash开始时进行</span></span><br><span class="line"><span class="attr">开始rehash,将字典的rehashindex设置为0,标志着rehash的开始,然后才会为</span></span><br><span class="line"><span class="attr">当rehash完成之后,释放h[0]的空间,用h[1]来代替h[0],使用原来的h[1]称为新的ht[0]</span></span><br><span class="line"><span class="attr">然后创建一个新的空的hash表,并将它设置成ht[1],将字典的rehashindex属性设置为-1</span></span><br><span class="line"><span class="attr">标识rehash已经停止</span></span><br></pre></td></tr></table></figure><h4 id="dictEntry–哈希表节点"><a href="#dictEntry–哈希表节点" class="headerlink" title="dictEntry–哈希表节点"></a>dictEntry–哈希表节点</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">typedef struct dictEntry&#123;</span><br><span class="line">    <span class="comment">//键:redis里面所有的key都是一个String,key指针指向一个sds结构</span></span><br><span class="line">    <span class="keyword">void</span> *key;</span><br><span class="line">    union &#123;</span><br><span class="line">        <span class="comment">//redis中的数据有5种类型,val指针指向要存储的数据</span></span><br><span class="line">        <span class="comment">//val指向了一个redisObject对象,这里就是我们要存储的对象</span></span><br><span class="line">        <span class="keyword">void</span> *val; </span><br><span class="line">        unint64_t u64;</span><br><span class="line">        int64_t s64;</span><br><span class="line">    &#125;v;</span><br><span class="line">    struct dictEntry *next;<span class="comment">//后继节点,链指针,解决哈希冲突用链表</span></span><br><span class="line">&#125;dictEntry;</span><br></pre></td></tr></table></figure><h4 id="redisObject"><a href="#redisObject" class="headerlink" title="redisObject"></a>redisObject</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Redis 对象，占用16个字节</span></span><br><span class="line">typedef struct redisObject &#123;</span><br><span class="line">    unsigned type:<span class="number">4</span>;<span class="comment">//当前数据的类型(Stirng,List,Set,Zset,Hash)</span></span><br><span class="line">    unsigned encoding:<span class="number">4</span>;<span class="comment">//记录了对象所保存的值的编码</span></span><br><span class="line">    unsigned lru:LRU_BITS;<span class="comment">//LRU,内存淘汰的时候用的</span></span><br><span class="line">    <span class="keyword">int</span> refcount;<span class="comment">//引用计数,通过引用计数法释放内存的</span></span><br><span class="line">    <span class="comment">//ptr指向实际保存值的数据结构</span></span><br><span class="line">    <span class="comment">//这个数据结构由type属性和encoding属性决定</span></span><br><span class="line">    <span class="comment">//比如:如果一个redisObject的type为list,encoding为linkedList</span></span><br><span class="line">    <span class="comment">//那么这个ptr就会指向这个双端链表</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="keyword">void</span> *ptr;</span><br><span class="line">&#125; robj;</span><br></pre></td></tr></table></figure><p><strong>对象类型</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#define REDIS_STRING 0  // 字符串</span></span><br><span class="line"><span class="comment">#define REDIS_LIST 1    // 列表</span></span><br><span class="line"><span class="comment">#define REDIS_SET 2     // 集合</span></span><br><span class="line"><span class="comment">#define REDIS_ZSET 3    // 有序集</span></span><br><span class="line"><span class="comment">#define REDIS_HASH 4    // 哈希表</span></span><br></pre></td></tr></table></figure><p><strong>encoding编码方式</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">不同数据类型所对应实际编码对象</span></span><br><span class="line"><span class="attr">RAW</span>:<span class="string">当string采用原生的标识方式,就用sds来表示</span></span><br><span class="line"><span class="comment">#define REDIS_ENCODING_RAW 0            // 编码为字符串</span></span><br><span class="line"><span class="attr">INT</span>:<span class="string">string采用数字的表示方式,实际上是一个long型</span></span><br><span class="line"><span class="comment">#define REDIS_ENCODING_INT 1            // 编码为整数</span></span><br><span class="line"><span class="attr">HT</span>:<span class="string">表示成dict</span></span><br><span class="line"><span class="comment">#define REDIS_ENCODING_HT 2             // 编码为哈希表</span></span><br><span class="line"><span class="comment">#define REDIS_ENCODING_ZIPList 3         // 编码为 ziplist</span></span><br><span class="line"><span class="comment">#define REDIS_ENCODING_LINKEDLIST 4     // 编码为双端链表</span></span><br><span class="line"><span class="comment">#define REDIS_ENCODING_ZIPLIST 5        // 编码为压缩列表</span></span><br><span class="line"><span class="comment">#define REDIS_ENCODING_INTSET 6         // 编码为整数集合</span></span><br><span class="line"><span class="comment">#define REDIS_ENCODING_SKIPLIST 7       // 编码为跳跃表</span></span><br></pre></td></tr></table></figure><p><strong>命令看看redisObject的属性</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;set a aaa</span><br><span class="line">&gt;&gt;&gt;type a<span class="comment">//当前数据的类型(Stirng,List,Set,Zset,Hash)</span></span><br><span class="line">&gt;&gt;&gt;string</span><br><span class="line">&gt;&gt;&gt;object encoding a<span class="comment">//encoding编码方式</span></span><br><span class="line">&gt;&gt;&gt;<span class="string">"embstr"</span>  </span><br><span class="line">&gt;&gt;&gt;set b <span class="number">100</span>     </span><br><span class="line">&gt;&gt;&gt;type b   </span><br><span class="line">&gt;&gt;&gt;string    </span><br><span class="line">&gt;&gt;&gt;object encoding b</span><br><span class="line">&gt;&gt;&gt;<span class="string">"int"</span></span><br></pre></td></tr></table></figure><p><strong>embstr&amp;raw</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">embstr</span>:<span class="string">embedded string,嵌入式的字符串,将SDS结构体嵌入在RedisObject对象中.一次CPU缓存行是64个字节,RedisObject占用8个字节,因此如果字符串小于等于44字节的时候,就会使用embstr,分配的是一块连续的内存空间,同时包含redisObject和SDS结构体</span></span><br><span class="line"><span class="attr">如果字符串对象保存的是一个字符串值,并且这个字符串的长度小于等于44字节,就使用embstr编码</span></span><br><span class="line"><span class="attr">raw</span>:<span class="string">存储大于44字节的字符串,需要分配两次内存空间,分别是redisObject和SDS结构体</span></span><br><span class="line"></span><br><span class="line"><span class="meta">embstr优点</span>:<span class="string">embstr编码将创建字符串对象所需的内存空间分配次数从raw编码的两次降低为一次,内存释放函数也是从两次将为一次;同时也能够更好的医用CPU缓存行,尽量减少内存浪费</span></span><br><span class="line"><span class="meta">embstr缺点</span>:<span class="string">如果字符串的长度增加就需要重新分配内存,sds结构体需要重新分配内存空间,所以embstr编码的字符串对象实际上只读的,redis并没有为embstr编码的字符串对象编写任务的修改程序.当我们对embstr编码的字符串对象执行任何修改命令,redis都会先将对象的embstr编码修改成raw编码,然后再执行修改操作</span></span><br></pre></td></tr></table></figure><p><strong>mset</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">redis协议采用是客户端-服务器模式,每一次客户端发送一条指令,服务器解析指令并执行,然后向客户端返回结果,这是一种典型的tcp交互方式，每次上下文切换,指令执行都会有很大的开销,如果使用mset请求,与</span> <span class="string">服务器只交互一次,降低了网络,协议解析的开销,从而提高缓存访问效率</span></span><br></pre></td></tr></table></figure><p><strong>bitmap</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">现在系统有千万级的活跃用户,如何实现日活跃统计,为了增强用户粘性,要上线一个连续打卡发放积分的功能,怎么实现连续打卡用户统计?</span></span><br><span class="line"><span class="attr">setbit</span> <span class="string">key offest(偏移量) 0/1</span></span><br><span class="line"><span class="attr">bitmap就是通过最小的单位bit来进行0或者1的设置，表示某个元素对应的值或者状态</span></span><br><span class="line"><span class="meta">统计日活跃度的话</span>:<span class="string">可以把用户id当作偏移量,如用户登录对应位置设置成1,然后用bitcount统计1的个数就可以了,统计连续登录的用户数的话,可以对每个key进行按位与操作,如果结果还是1的话说明这个用户连续登录的,然后将连续登录的情况重新放到一个新的key里面,对这个新的key重新bitcount统计一下就可以了</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;String&quot;&gt;&lt;a href=&quot;#String&quot; class=&quot;headerlink&quot; title=&quot;String&quot;&gt;&lt;/a&gt;String&lt;/h4&gt;&lt;figure class=&quot;highlight properties&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;redis是非关系型的键值对数据库,可以根据key以O(1)的时间复杂度取出或插入关联值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;redis里面的key其实都会转成String类型，在redis中自定义了一个数据类结构sds&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;sds&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;simple dynamic string简单动态字符传串,而不是简单的使用char[]数组&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="redis" scheme="https://Agonywy.github.io/categories/redis/"/>
    
    
      <category term="redis" scheme="https://Agonywy.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>投票选举&amp;内存快照&amp;事务日志</title>
    <link href="https://agonywy.github.io/2020/06/26/%E6%8A%95%E7%A5%A8%E9%80%89%E4%B8%BE&amp;%E5%86%85%E5%AD%98%E5%BF%AB%E7%85%A7&amp;%E4%BA%8B%E5%8A%A1%E6%97%A5%E5%BF%97/"/>
    <id>https://agonywy.github.io/2020/06/26/%E6%8A%95%E7%A5%A8%E9%80%89%E4%B8%BE&amp;%E5%86%85%E5%AD%98%E5%BF%AB%E7%85%A7&amp;%E4%BA%8B%E5%8A%A1%E6%97%A5%E5%BF%97/</id>
    <published>2020-06-26T04:12:35.000Z</published>
    <updated>2020-08-08T11:46:36.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="zookeeper中服务器角色"><a href="#zookeeper中服务器角色" class="headerlink" title="zookeeper中服务器角色"></a>zookeeper中服务器角色</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">事务请求</span>:<span class="string">比如对数据的增删改</span></span><br><span class="line"><span class="meta">非事务请求</span>:<span class="string">比如查询操作,判断节点是否存在exists操作</span></span><br><span class="line"><span class="attr">Leader</span>:<span class="string">leader服务器是整个zookeeper集群工作机制中的核心,主要工作有两个.(1)Leader服务器是事务请求的唯一调度者和处理者,保证集群事务处理的顺序性(2)Leader服务器还是集群内容各个服务器的调度者,在Leader服务器中有一个SyncRequestProcessor是事务日志记录处理器,这个处理器的主要作用就是将事务请求写到书屋日志文件中,同时还会zookeeper进行数据快照</span></span><br><span class="line"><span class="attr">Follower</span>:<span class="string">follower服务器是zookeeper集群状态的跟随者,主要工作有3个(1)处理客户端非事务请求,妆发事务请求给leader服务器(2)参与事务请求Proposal的投票(3)参与Leader选举投票</span></span><br><span class="line"><span class="attr">Observer</span>:<span class="string">observer服务器从字面意思来看就是充当了一个观察者的角色,观察zookeeper集群的最新状态变化并将这些状态同步过来,observer和follower在工作原理上是一致的,对于非事务请求都可以进行独立的处理，对于事务请求会转发给Leader服务器进行处理.observer和follower最大的区别就是他不参与任何我形式的投票，他只负责处理非事务请求,通常用来提升分布式系统对非事务请求的处理能力</span></span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="服务器状态"><a href="#服务器状态" class="headerlink" title="服务器状态"></a>服务器状态</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">为了对服务器的状态进行标识,zookeeper提供了4中服务器状态</span><br><span class="line">(1)Looking:寻找Leader状态,当服务器处于该状态时,他会认为集群中没有Leader服务器,因此需要进入Leader选举流程</span><br><span class="line">(2)Following:跟随者状态,表明当前服务器角色是Follower</span><br><span class="line">(3)Leading状态:领导者状态,表明当前服务器是Leader</span><br><span class="line">(4)Observing:观察者状态,表明当前服务器的角色是Observer</span><br></pre></td></tr></table></figure><h4 id="选举机制"><a href="#选举机制" class="headerlink" title="选举机制"></a>选举机制</h4><p>*<em>什么情况下会发生选举呢? *</em></p><ul><li><p>集群启动</p></li><li><p>Leader挂掉</p></li><li><p>Follower挂掉之后Leader发现已经没有过半的Follower跟随自己了-不能对外提供服务了(领导者选举)</p></li></ul><h4 id="投票选举"><a href="#投票选举" class="headerlink" title="投票选举"></a>投票选举</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">SID</span>:<span class="string">服务器ID,用来唯一标识一台服务器,与myid的值一致</span></span><br><span class="line"><span class="attr">ZXID</span>:<span class="string">事务ID,用来唯一标识一次服务器状态的变更</span></span><br></pre></td></tr></table></figure><h5 id="（1）服务器启动时的选举"><a href="#（1）服务器启动时的选举" class="headerlink" title="（1）服务器启动时的选举"></a>（1）服务器启动时的选举</h5><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">1</span>:<span class="string">每个server会发出一个投票</span></span><br><span class="line"><span class="attr">每次投票包含的最基本的元素就是所推举的服务器的myid和ZXID事务id</span></span><br><span class="line"><span class="attr">2</span>:<span class="string">接收来自其他服务器的投票</span></span><br><span class="line"><span class="attr">这里会检测投票的有效性,包括检查是否是本轮投票,是否是来自Looking状态的服务器</span></span><br><span class="line"><span class="attr">3</span>:<span class="string">处理投票</span></span><br><span class="line"><span class="attr">优先检查ZXID,ZXID大的优先作为Leader,如果ZXID相同的话,就会比较服务器的myid,myid比较大的服务器就会优先作为Leader服务器</span></span><br><span class="line"><span class="attr">4</span>:<span class="string">统计投票</span></span><br><span class="line"><span class="attr">每次投票后服务器就会统计票数,判断是否已经有过半的机器收到相同的投票信息,如果过半那就选出Leader服务器了</span></span><br><span class="line"><span class="attr">5</span>:<span class="string">改变状态</span></span><br><span class="line"><span class="attr">一旦确定了Leader,每个服务器就会更新自己的状态,如果是Follower,就更新状态为following,如果是leader就会更新成leading</span></span><br></pre></td></tr></table></figure><h5 id="（2）服务器运行中的选举"><a href="#（2）服务器运行中的选举" class="headerlink" title="（2）服务器运行中的选举"></a>（2）服务器运行中的选举</h5><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">1</span>:<span class="string">变更状态</span></span><br><span class="line"><span class="attr">当Leader服务器挂了之后,剩余的observer服务器会将自己的状态更新成Looking,然后进行Leader选举状态</span></span><br><span class="line"><span class="attr">2</span>:<span class="string">每个server会发出一个投票</span></span><br><span class="line"><span class="attr">在这个过程中需要生成投票信息(myid,ZXID)</span></span><br><span class="line"><span class="attr">3</span>:<span class="string">接收来自各个服务器的投票</span></span><br><span class="line"><span class="attr">4</span>:<span class="string">处理投票</span></span><br><span class="line"><span class="attr">5</span>:<span class="string">统计投票</span></span><br><span class="line"><span class="attr">6</span>:<span class="string">改变服务器状态</span></span><br></pre></td></tr></table></figure><h4 id="内存数据DataTree"><a href="#内存数据DataTree" class="headerlink" title="内存数据DataTree"></a>内存数据DataTree</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">zookeeper的数据模型是一棵树,zookeeper中存储了整棵树的内容,包括所有节点的路径,节点数据及其ACL信息等,zookeeper会定时的将这些数据存储到磁盘中</span></span><br><span class="line"><span class="attr">DataTree是zookeeper内存数据存储的核心,是一个"树"的数据结果,代表了内存中一份完整的数据,DataTree不包含任何与网络,客户端连接,以及请求处理等等相关的业务逻辑,他是一个独立的zookeeper组件</span></span><br></pre></td></tr></table></figure><p><strong>DataNode</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">DataNode</span>:<span class="string">是数据存储的最小单元,DataNode内部除了保存节点的数据内容,ACL列表和节点状态之外,还记录父节点的引用和子节点列表两个属性</span></span><br></pre></td></tr></table></figure><p><strong>DataTree</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">DataTree</span>:<span class="string">用于存放zookeeper所有节点的路径,数据内容及其ACL信息等,底层的数据结构其实是一个典型的ConcurrentHashMap键值对结构,在nodes这个Map中,存放着zookeeper服务器上面所有的数据节点,可以说zookeeper数据的所有操作都是对这个Map结构的操作,对于临时节点,DataTree还单独的将所有临时节点保存起来,便于实时访问和及时清理</span></span><br></pre></td></tr></table></figure><p><strong>ZKDataBase</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ZKDataBase</span>:<span class="string">就是zookeeper的内存数据库,负责管理zookeeper的所有会话,DataTree存储以及事务日志.ZKDataBase会定时向磁盘中dump数据快照,同时在zookeeper服务器启动的时候会通过磁盘上的事务日志和快照数据文件恢复成一个完整的内存数据库</span></span><br></pre></td></tr></table></figure><h4 id="事务日志"><a href="#事务日志" class="headerlink" title="事务日志"></a>事务日志</h4><p><strong>DataDir</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dataDir这个目录是zookeeper中默认存储事务日志文件的</span></span><br></pre></td></tr></table></figure><p><strong>日志写入</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">FileTxnLog</span>:<span class="string">是负责维护事务日志对外的接口,包括日志写入和读取</span></span><br><span class="line"><span class="meta">日志的写入</span>:<span class="string">主要是由append()方法来负责</span></span><br></pre></td></tr></table></figure><p><strong>snapShot–数据快照</strong>’</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">数据快照</span>:<span class="string">是zookeeper数据存储中一个非常核心的运行机制,数据快照用来记录zookeeper服务器上某一个特定时刻的全量内存数据内容,并将其写到指定的磁盘文件中去</span></span><br><span class="line"><span class="meta">快照数据的写入</span>:<span class="string">将内存数据写入快照数据文件其实是一个序列化过程</span></span><br></pre></td></tr></table></figure><h4 id="数据同步"><a href="#数据同步" class="headerlink" title="数据同步"></a>数据同步</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">peerLastZXID</span>:<span class="string">Learner服务器最后处理的ZXID</span></span><br><span class="line"><span class="attr">minCommitedLog</span>:<span class="string">Learner服务器提议缓存队列commitedLog中的最小ZXID</span></span><br><span class="line"><span class="attr">maxCommitedLog</span>:<span class="string">Learner服务器提议缓存队列commitedLog中的最大ZXID</span></span><br></pre></td></tr></table></figure><p><strong>(1)直接差异化同步(DIFF同步)</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">场景</span>:<span class="string">peerLastZXID介于minCommitedLog与maxCommitedLog之间</span></span><br></pre></td></tr></table></figure><p><strong>(2)先回滚再差异化同步(DIFF同步)</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">场景</span>:<span class="string">leader服务器恰好要将Proposal发给其他Follower服务器进行投票的时候,Leader服务器挂了,Proposal没有同步出去</span></span><br></pre></td></tr></table></figure><p><strong>(3)仅回滚同步(Trunc同步)</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">场景</span>:<span class="string">peerLastZXID大于maxCommitedLog,这种场景其实是先回滚再差异化同步的简化模式,Leader会要求Learner混滚到ZXID值为maxCommitedLog对应的事务操作</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;zookeeper中服务器角色&quot;&gt;&lt;a href=&quot;#zookeeper中服务器角色&quot; class=&quot;headerlink&quot; title=&quot;zookeeper中服务器角色&quot;&gt;&lt;/a&gt;zookeeper中服务器角色&lt;/h4&gt;&lt;figure class=&quot;highlight properties&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;事务请求&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;比如对数据的增删改&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;非事务请求&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;比如查询操作,判断节点是否存在exists操作&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;Leader&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;leader服务器是整个zookeeper集群工作机制中的核心,主要工作有两个.(1)Leader服务器是事务请求的唯一调度者和处理者,保证集群事务处理的顺序性(2)Leader服务器还是集群内容各个服务器的调度者,在Leader服务器中有一个SyncRequestProcessor是事务日志记录处理器,这个处理器的主要作用就是将事务请求写到书屋日志文件中,同时还会zookeeper进行数据快照&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;Follower&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;follower服务器是zookeeper集群状态的跟随者,主要工作有3个(1)处理客户端非事务请求,妆发事务请求给leader服务器(2)参与事务请求Proposal的投票(3)参与Leader选举投票&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;Observer&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;observer服务器从字面意思来看就是充当了一个观察者的角色,观察zookeeper集群的最新状态变化并将这些状态同步过来,observer和follower在工作原理上是一致的,对于非事务请求都可以进行独立的处理，对于事务请求会转发给Leader服务器进行处理.observer和follower最大的区别就是他不参与任何我形式的投票，他只负责处理非事务请求,通常用来提升分布式系统对非事务请求的处理能力&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="zookeeper" scheme="https://Agonywy.github.io/categories/zookeeper/"/>
    
    
      <category term="zookeeper" scheme="https://Agonywy.github.io/tags/zookeeper/"/>
    
  </entry>
  
  <entry>
    <title>ACID&amp;CAP&amp;BASE</title>
    <link href="https://agonywy.github.io/2020/06/23/ACID&amp;CAP&amp;BASE%E7%90%86%E8%AE%BA/"/>
    <id>https://agonywy.github.io/2020/06/23/ACID&amp;CAP&amp;BASE%E7%90%86%E8%AE%BA/</id>
    <published>2020-06-23T04:12:35.000Z</published>
    <updated>2020-08-08T11:45:54.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="zookeeper是什么"><a href="#zookeeper是什么" class="headerlink" title="zookeeper是什么"></a>zookeeper是什么</h4><p>zookeeper是一个分布式服务框架，主要用来解决分布式的应用中经常遇到的一些数据管理问题，比如统一命名服务，集群管理，分布式应用配置项的管理等</p><a id="more"></a><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">zookeeper既然是做数据管理的,那么我们可以怎么来理解zookeeper呢?</span></span><br><span class="line"><span class="attr">(1)zookeeper可以理解成是一个数据库,支持节点的增删改查</span></span><br><span class="line"><span class="attr">(2)zookeeper是一个拥有文件系统结构特点的数据库,与文件系统不同的是,zookeeper的节点可以存储数据</span></span><br><span class="line"><span class="attr">(3)zookeeper是一个解决了数据一致性问题的分布式数据库</span></span><br><span class="line"><span class="attr">比如在机器1上面创建了一个节点,其他服务器也会同样创建这个节点,所有的服务器都保持数据一致</span></span><br><span class="line"><span class="attr">(4)zookeeper是一个具有发布和订阅功能的分布式数据库(watch监听机制)</span></span><br><span class="line"><span class="attr">对于客户端而言,一旦zookeeper服务器上数据发生改变，客户端会立刻知道,然后重新从服务器拉取数据</span></span><br></pre></td></tr></table></figure><h4 id="一致性"><a href="#一致性" class="headerlink" title="一致性"></a>一致性</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">一个强一致性</span>: <span class="string">数据库A发生update，数据库B就立刻进行更新,其他的读取请求会阻塞,必须等到AB两个数据库同步数据之后才可以读取</span></span><br><span class="line"><span class="meta">弱一致性</span>: <span class="string">数据库B不会阻塞读取请求，即便读取的数据不一致也不要紧</span></span><br><span class="line"><span class="meta">最终一致性</span>: <span class="string">数据读取不要求立刻同步数据，只要最终数据不同步,数据是一致的就可以了</span></span><br></pre></td></tr></table></figure><h4 id="ACID"><a href="#ACID" class="headerlink" title="ACID"></a>ACID</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">事务</span>:<span class="string">是由一系列对系统中的数据进行读写所组成的一个逻辑执行单元，侠义上的事务指的是数据库事务</span></span><br><span class="line"><span class="meta">事务具有四大特征就是ACID</span>:<span class="string"></span></span><br><span class="line"><span class="meta">原子性</span>:<span class="string">是指事务必须是一个原子的操作序列单元,要么全部执行成功,要么全部不成功</span></span><br><span class="line"><span class="meta">一致性</span>:<span class="string">事务的一致性是指事务的执行不能够破坏数据的一致性和完整性,必须是使数据库从一种正确状态变成另一种正确状态</span></span><br><span class="line"><span class="meta">隔离性</span>:<span class="string">事务之间的执行互不影响,一个事务的执行不会对其他事务造成影响</span></span><br><span class="line"><span class="meta">持久性</span>:<span class="string">事务一旦提交，他对数据库中的数据改变是永久性的</span></span><br></pre></td></tr></table></figure><h4 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">读未提交(允许脏读)</span>:<span class="string">是指一个事务处理中读取了另一个未提交的事务的数据</span></span><br><span class="line"><span class="meta">读已提交(不可重复读)</span>:<span class="string">一个事务处理过程中读取了另一个事务已提交的数据</span></span><br><span class="line"><span class="meta">可重复读</span>:<span class="string">一个事务始终可以读取到事务开始时的数据,避免了脏读和不可重复读</span></span><br><span class="line"><span class="meta">串行化</span>:<span class="string">他要求所有的事务都串行执行</span></span><br><span class="line"></span><br><span class="line"><span class="meta">不可重复读与幻读的区别</span>:<span class="string"></span></span><br><span class="line"><span class="meta">不可重复读</span>:<span class="string">查询的数据值发生了改变</span></span><br><span class="line"><span class="meta">幻读</span>:<span class="string">查询数据行数发生了改变</span></span><br></pre></td></tr></table></figure><h4 id="CAP理论"><a href="#CAP理论" class="headerlink" title="CAP理论"></a>CAP理论</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Consistency</span>:<span class="string">一致性(强一致性)是指数据在多个副本之间是否能够保持数据一致</span></span><br><span class="line"><span class="attr">Avaliability</span>:<span class="string">可用性是指系统提供的服务必须一直处于可用的状态</span></span><br><span class="line"><span class="attr">Partition</span> <span class="string">Tolerance:分区容错性是指分布式系统在遇到任何网络分区故障的时候,仍然需要能够保证对外提供满足一致性和可用性的服务,除非整个网络环境都发生了故障</span></span><br><span class="line"><span class="meta">网络分区(脑裂)</span>:<span class="string">当网络由于发生异常情况,导致分布式系统中部分节点之间的网络延迟不断增大,最终导致组成分布式系统的所有节点中.只有部分节点之间能够进行正常通信,而另外一些节点之间不能正常通信---我们将这种现象称为网络分区,也就是俗称的"脑裂"</span></span><br></pre></td></tr></table></figure><p>一个系统不可能同时满足一致性，可用性，分区容错性三个需求，但是对于分布式系统而言，分区容错性问题是一个必定会出现的异常情况，所以系统架构设计的时候往往需要在一致性和可用性之间做一个均衡</p><h4 id="BASE理论"><a href="#BASE理论" class="headerlink" title="BASE理论"></a>BASE理论</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Basically</span> <span class="string">Avaliable:基本可用是指分布式系统在出现不可以预知故障的时候，允许损失一部分可用性，比如响应时间上的损失，功能上的损失</span></span><br><span class="line"><span class="attr">Soft</span> <span class="string">state:弱状态也成为软状态,和硬状态相对,是指允许系统中的数据存在中间状态，并且认为这个中间状态不会影响系统的整体可用性，也就是说允许系统在不同节点的数据副本之间进行数据同步的过程中存在延迟</span></span><br><span class="line"><span class="attr">Eventually</span> <span class="string">consistent:最终一致性强调的是系统中所有的数据副本，在经过一段时间后，最终能够达到一个一致的状态，因此最终一致性的本质是保系统最终数据能够达成一致,而不需要实时保证系统数据的强一致性</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;zookeeper是什么&quot;&gt;&lt;a href=&quot;#zookeeper是什么&quot; class=&quot;headerlink&quot; title=&quot;zookeeper是什么&quot;&gt;&lt;/a&gt;zookeeper是什么&lt;/h4&gt;&lt;p&gt;zookeeper是一个分布式服务框架，主要用来解决分布式的应用中经常遇到的一些数据管理问题，比如统一命名服务，集群管理，分布式应用配置项的管理等&lt;/p&gt;
    
    </summary>
    
    
      <category term="zookeeper" scheme="https://Agonywy.github.io/categories/zookeeper/"/>
    
    
      <category term="zookeeper" scheme="https://Agonywy.github.io/tags/zookeeper/"/>
    
  </entry>
  
  <entry>
    <title>match查询</title>
    <link href="https://agonywy.github.io/2020/06/21/match%E6%9F%A5%E8%AF%A2/"/>
    <id>https://agonywy.github.io/2020/06/21/match%E6%9F%A5%E8%AF%A2/</id>
    <published>2020-06-21T02:12:35.000Z</published>
    <updated>2020-08-08T06:07:06.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="match查询"><a href="#match查询" class="headerlink" title="match查询"></a>match查询</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">match查询属于高层查询，他会根据你查询的字段类型不一样，采用不同的查询方式</span></span><br><span class="line"><span class="attr">--查询的是日期或者数值的话，他会将你基于的字符串查询的内容自动转换为日期或者数值对待</span></span><br><span class="line"><span class="attr">你不需要根据你查询字段类型的不同去指定不同的内容,他会自动帮你转换</span></span><br><span class="line"><span class="attr">--如果查询的内容是一个不能被分词的内容,比如keyword,match查询不会对你指定的查询关键字进行分词</span></span><br><span class="line"><span class="attr">--如果查询的内容是一个可以被分词的内容,比如text,match会将你指定的查询内容根据一定的方式去分词,去分词库中匹配指定的内容</span></span><br><span class="line"></span><br><span class="line"><span class="attr">match查询,实际底层就是多个term查询,就是将多个term查询的结果给你封装到了一起</span></span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="match-all查询"><a href="#match-all查询" class="headerlink" title="match_all查询"></a>match_all查询</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">查询全部内容,不指定任何查询条件</span></span><br></pre></td></tr></table></figure><ul><li><strong>restful风格–metch_all查询</strong></li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#match_all查询</span></span><br><span class="line"><span class="attr">POST</span> <span class="string">/index/type/_search</span></span><br><span class="line"><span class="attr">&#123;</span></span><br><span class="line">    <span class="meta">"query"</span>:<span class="string">&#123;</span></span><br><span class="line">    <span class="meta">"match_all"</span>:<span class="string">&#123;&#125;#会把所有的数据都查出来</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure><ul><li><strong>Java–match_all查询</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">matchAllQuery</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//1.创建request</span></span><br><span class="line">    SearchRequest request = <span class="keyword">new</span> SearchRequest(index);</span><br><span class="line">    request.types(type);</span><br><span class="line">    <span class="comment">//2.指定查询条件</span></span><br><span class="line">    SearchSourceBuilder builder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">    builder.query(QueryBuilders.matchAllQuery());</span><br><span class="line">    <span class="comment">//当数据较多时,ES默认只会帮你查询10条数据</span></span><br><span class="line">    <span class="comment">//这里可以设置一下你需要查询出多少条数据</span></span><br><span class="line">    builder.size(<span class="number">20</span>);</span><br><span class="line">    request.source(builder);</span><br><span class="line">    <span class="comment">//3.client执行查询操作</span></span><br><span class="line">    SearchResponse resp = client.search(request, RequestOptions.DEFAULT);</span><br><span class="line">    <span class="comment">//4.输出结果</span></span><br><span class="line">    SearchHit[] hits = resp.getHits().getHits();</span><br><span class="line">    <span class="keyword">for</span> (SearchHit hit : hits) &#123;</span><br><span class="line">        System.out.println(hit.getSourceAsMap());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> length = resp.getHits().getHits().length;</span><br><span class="line">    System.out.println(length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="match查询-1"><a href="#match查询-1" class="headerlink" title="match查询"></a>match查询</h4><ul><li><strong>restful风格–metch查询</strong></li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">POST</span> <span class="string">/index/type/_search</span></span><br><span class="line"><span class="attr">&#123;</span></span><br><span class="line">    <span class="meta">"query"</span>:<span class="string">&#123;</span></span><br><span class="line">    <span class="meta">"match"</span>:<span class="string">&#123;</span></span><br><span class="line">    <span class="meta">"smsContent"</span>:<span class="string">"下载安装" #会分词,去分词库中查询内容</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure><ul><li><strong>Java–metch查询</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">matchQuery</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//1.创建request</span></span><br><span class="line">    SearchRequest request = <span class="keyword">new</span> SearchRequest(index);</span><br><span class="line">    request.types(type);</span><br><span class="line">    <span class="comment">//2.指定查询条件</span></span><br><span class="line">    SearchSourceBuilder builder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">    builder.query(QueryBuilders.matchQuery(<span class="string">"smsContext"</span>,<span class="string">"下载安装"</span>));</span><br><span class="line">    request.source(builder);</span><br><span class="line">    <span class="comment">//3.client执行查询操作</span></span><br><span class="line">    SearchResponse resp = client.search(request, RequestOptions.DEFAULT);</span><br><span class="line">    <span class="comment">//4.输出结果</span></span><br><span class="line">    SearchHit[] hits = resp.getHits().getHits();</span><br><span class="line">    <span class="keyword">for</span> (SearchHit hit : hits) &#123;</span><br><span class="line">        System.out.println(hit.getSourceAsMap());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> length = resp.getHits().getHits().length;</span><br><span class="line">    System.out.println(length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="布尔match查询"><a href="#布尔match查询" class="headerlink" title="布尔match查询"></a>布尔match查询</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">基于一个字段匹配的内容,采用and或者or的方式进行连接</span></span><br></pre></td></tr></table></figure><ul><li><strong>restful风格–布尔metch查询</strong></li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">POST</span> <span class="string">/index/type/_search</span></span><br><span class="line"><span class="attr">&#123;</span></span><br><span class="line">    <span class="meta">"query"</span>:<span class="string">&#123;</span></span><br><span class="line">    <span class="meta">"match"</span>:<span class="string">&#123;</span></span><br><span class="line">    <span class="meta">"smsContent"</span>:<span class="string">&#123;   #字段</span></span><br><span class="line">    <span class="meta">"query"</span>: <span class="string">"北京 健康", #用query去指定查询内容</span></span><br><span class="line">    <span class="meta">"operator"</span>: <span class="string">"and"#and,既包含北京又包括健康</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure><ul><li><strong>Java–布尔metch查询</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">boolMatchQuery</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//1.创建request</span></span><br><span class="line">    SearchRequest request = <span class="keyword">new</span> SearchRequest(index);</span><br><span class="line">    request.types(type);</span><br><span class="line">    <span class="comment">//2.指定查询条件</span></span><br><span class="line">    SearchSourceBuilder builder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">    builder.query(QueryBuilders.matchQuery(<span class="string">"smsContext"</span>,<span class="string">"北京 健 康"</span>).operator(Operator.AND));</span><br><span class="line">    request.source(builder);</span><br><span class="line">    <span class="comment">//3.client执行查询操作</span></span><br><span class="line">    SearchResponse resp = client.search(request, RequestOptions.DEFAULT);</span><br><span class="line">    <span class="comment">//4.输出结果</span></span><br><span class="line">    SearchHit[] hits = resp.getHits().getHits();</span><br><span class="line">    <span class="keyword">for</span> (SearchHit hit : hits) &#123;</span><br><span class="line">        System.out.println(hit.getSourceAsMap());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> length = resp.getHits().getHits().length;</span><br><span class="line">    System.out.println(length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="multi-match查询"><a href="#multi-match查询" class="headerlink" title="multi_match查询"></a>multi_match查询</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">match针对一个Filed做检索,multi_match针对多个key进行检索</span></span><br><span class="line"><span class="attr">多个filed对应一个text,就像Mysql多个key对应一个value</span></span><br></pre></td></tr></table></figure><ul><li><strong>restful风格–multi_match查询</strong></li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">POST</span> <span class="string">/index/type/_search</span></span><br><span class="line"><span class="attr">&#123;</span></span><br><span class="line">    <span class="meta">"query"</span>:<span class="string">&#123;</span></span><br><span class="line">    <span class="meta">"multi_match"</span>:<span class="string">&#123;</span></span><br><span class="line">   <span class="meta">"query"</span>: <span class="string">"北京", #用query去指定查询内容</span></span><br><span class="line"><span class="comment">   #多个字段只要有一个字段满足都会查出来</span></span><br><span class="line">   <span class="meta">"field"</span>: <span class="string">["province","smsContext"]</span></span><br><span class="line">   <span class="attr">&#125;</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure><ul><li><strong>Java–multi_metch查询</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">multiMatchQuery</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//1.创建request</span></span><br><span class="line">    SearchRequest request = <span class="keyword">new</span> SearchRequest(index);</span><br><span class="line">    request.types(type);</span><br><span class="line">    <span class="comment">//2.指定查询条件</span></span><br><span class="line">    SearchSourceBuilder builder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">    builder.query(QueryBuilders.multiMatchQuery(<span class="string">"北京"</span>,<span class="string">"province"</span>,<span class="string">"smsContext"</span>));</span><br><span class="line">    request.source(builder);</span><br><span class="line">    <span class="comment">//3.client执行查询操作</span></span><br><span class="line">    SearchResponse resp = client.search(request, RequestOptions.DEFAULT);</span><br><span class="line">    <span class="comment">//4.输出结果</span></span><br><span class="line">    SearchHit[] hits = resp.getHits().getHits();</span><br><span class="line">    <span class="keyword">for</span> (SearchHit hit : hits) &#123;</span><br><span class="line">        System.out.println(hit.getSourceAsMap());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> length = resp.getHits().getHits().length;</span><br><span class="line">    System.out.println(length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;match查询&quot;&gt;&lt;a href=&quot;#match查询&quot; class=&quot;headerlink&quot; title=&quot;match查询&quot;&gt;&lt;/a&gt;match查询&lt;/h4&gt;&lt;figure class=&quot;highlight properties&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;match查询属于高层查询，他会根据你查询的字段类型不一样，采用不同的查询方式&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;--查询的是日期或者数值的话，他会将你基于的字符串查询的内容自动转换为日期或者数值对待&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;你不需要根据你查询字段类型的不同去指定不同的内容,他会自动帮你转换&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;--如果查询的内容是一个不能被分词的内容,比如keyword,match查询不会对你指定的查询关键字进行分词&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;--如果查询的内容是一个可以被分词的内容,比如text,match会将你指定的查询内容根据一定的方式去分词,去分词库中匹配指定的内容&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;match查询,实际底层就是多个term查询,就是将多个term查询的结果给你封装到了一起&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="ElasticSearch" scheme="https://Agonywy.github.io/categories/ElasticSearch/"/>
    
    
      <category term="ElasticSearch" scheme="https://Agonywy.github.io/tags/ElasticSearch/"/>
    
  </entry>
  
  <entry>
    <title>深分页Scrol&amp;deleteByQuery</title>
    <link href="https://agonywy.github.io/2020/06/21/%E6%B7%B1%E5%88%86%E9%A1%B5Scroll%E4%B8%8EdeleteByQuery/"/>
    <id>https://agonywy.github.io/2020/06/21/%E6%B7%B1%E5%88%86%E9%A1%B5Scroll%E4%B8%8EdeleteByQuery/</id>
    <published>2020-06-21T01:22:15.000Z</published>
    <updated>2020-08-08T06:03:44.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="深分页Scroll"><a href="#深分页Scroll" class="headerlink" title="深分页Scroll"></a>深分页Scroll</h4><ul><li><strong>深分页scroll查询</strong></li></ul><a id="more"></a><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ES对from+size这种分页方式是有限制的,from和size二者之和不能超过一万,超过一万之后效率及其低下</span></span><br><span class="line"><span class="comment"># 原理：</span></span><br><span class="line"><span class="comment">#  from+size    在ES查询数据的方式，</span></span><br><span class="line"><span class="attr">第一步将用户指定的关键词进行分词，</span></span><br><span class="line"><span class="attr">第二部将词汇去分词库中进行检索，得到多个文档id,</span></span><br><span class="line"><span class="meta">第三步去各个分片中拉去数据，</span> <span class="string">耗时相对较长</span></span><br><span class="line"><span class="meta">第四步根据score</span> <span class="string">将数据进行排序， 耗时相对较长</span></span><br><span class="line"><span class="meta">第五步根据from</span> <span class="string">和size 的值 将部分数据舍弃，</span></span><br><span class="line"><span class="attr">第六步，返回结果。</span></span><br><span class="line"><span class="comment">#  scroll+size 在ES查询数据的方式</span></span><br><span class="line"><span class="attr">第一步将用户指定的关键词进行分词，</span></span><br><span class="line"><span class="attr">第二部将词汇去分词库中进行检索，得到多个文档id,</span></span><br><span class="line"><span class="attr">第三步，将文档的id存放在一个ES的上下文中,可以理解为存放在ES的内存中</span></span><br><span class="line"><span class="attr">第四步，根据指定的size去ES中检索指定个数的数据，拿完数据的文档id,会从上下文中移除</span></span><br><span class="line"><span class="attr">第五步，如果需要下一页的数据，不需要重新查询，而是直接去ES的上下文中继续拿后续内容，循环第四步和第五步,直到把上下文的内容拿空为止</span></span><br><span class="line"><span class="comment">#  scroll查询方式,不适合做实时查询，因为他去ES上下文拿不数据,不像form+size每次都要重新查询拿出某一页需要的内容</span></span><br></pre></td></tr></table></figure><p><strong>restful风格–深分页scroll查询</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#scroll=1m,表示文档id在ES上下文中会保存一分钟,如果一分钟内没有任何操作,就会清除掉</span></span><br><span class="line"><span class="attr">POST</span> <span class="string">/index/type/_search?scroll=1m</span></span><br><span class="line"><span class="attr">&#123;</span></span><br><span class="line">  <span class="meta">"query"</span>: <span class="string">&#123;</span></span><br><span class="line">    <span class="meta">"match_all"</span>: <span class="string">&#123;&#125;#查询全部</span></span><br><span class="line">  <span class="meta">&#125;,</span><span class="string"></span></span><br><span class="line">  <span class="meta">"size"</span>: <span class="string">2,#第一页查询2条数据</span></span><br><span class="line">  <span class="meta">"sort"</span>: <span class="string">[#手动指定排序方式</span></span><br><span class="line">    <span class="attr">&#123;</span></span><br><span class="line">      <span class="meta">"fee"</span>: <span class="string">&#123;</span></span><br><span class="line">        <span class="meta">"order"</span>: <span class="string">"desc"#倒序</span></span><br><span class="line">      <span class="attr">&#125;</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line">  <span class="attr">]</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#根据scroll 查询下一页数据</span></span><br><span class="line"><span class="attr">POST</span> <span class="string">_search/scroll</span></span><br><span class="line"><span class="attr">&#123;</span></span><br><span class="line"> <span class="meta">"scroll_id"</span>:<span class="string">"根据第一查询得到的scroll_id去指定",</span></span><br><span class="line"><span class="comment">#重新指定scroll上下文再保存一分钟</span></span><br><span class="line"><span class="meta">"scroll"</span>:<span class="string">"1m"</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#删除scroll在ES上下文中的数据</span></span><br><span class="line"><span class="attr">DELETE</span></span><br><span class="line"><span class="attr">_search/scroll/scroll_id</span></span><br></pre></td></tr></table></figure><p><strong>Java–深分页scroll查询</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">scrollQuery</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">    ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">    RestHighLevelClient client =  EsClient.getClient();</span><br><span class="line">    String index = <span class="string">"sms-logs-index"</span>;</span><br><span class="line">    String type=<span class="string">"sms-logs-type"</span>;</span><br><span class="line">    <span class="comment">//1.创建request</span></span><br><span class="line">    SearchRequest request = <span class="keyword">new</span> SearchRequest(index);</span><br><span class="line">    request.types(type);</span><br><span class="line">    <span class="comment">//2.指定scroll信息</span></span><br><span class="line">   request.scroll(TimeValue.timeValueMinutes(<span class="number">1L</span>));</span><br><span class="line">    <span class="comment">//3.指定查询条件</span></span><br><span class="line">    SearchSourceBuilder builder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">    builder.size(<span class="number">4</span>);<span class="comment">//每次查4条数据</span></span><br><span class="line">    builder.sort(<span class="string">"fee"</span>,SortOrder.DESC);<span class="comment">//指定排序</span></span><br><span class="line">    builder.query(QueryBuilders.matchAllQuery());</span><br><span class="line">    request.source(builder);</span><br><span class="line">    <span class="comment">//4.获取返回结果(1)scrollId;(2)source</span></span><br><span class="line">    SearchResponse resp = client.search(request, RequestOptions.DEFAULT);</span><br><span class="line">    String scrollId = response.getScrollId();</span><br><span class="line">    System.out.println(<span class="string">"-------------第一页数据---------------------"</span>);</span><br><span class="line">    <span class="keyword">for</span> (SearchHit hit : response.getHits().getHits()) &#123;</span><br><span class="line">        System.out.println(hit.getSourceAsMap());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//后面的流程是为了查询下一页服务,所以应该是一个循环</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">        <span class="comment">//5.创建一个SearchScrollRequest,指定scrollId</span></span><br><span class="line">        SearchScrollRequest scrollRequest = <span class="keyword">new</span> SearchScrollRequest(scrollId);</span><br><span class="line">        <span class="comment">//6.指定scrolleId的生成时间</span></span><br><span class="line">scrollRequest.scroll(TimeValue.timeValueMinutes(<span class="number">1L</span>));</span><br><span class="line">        <span class="comment">//7.执行查询获取返回结果</span></span><br><span class="line"> SearchResponse scrollResp = client.scroll(request, RequestOptions.DEFAULT);</span><br><span class="line">        <span class="comment">//8.判断是否查询到了数据</span></span><br><span class="line">        SearchHit[] hits = scrollResp.getHits().getHits();</span><br><span class="line"><span class="keyword">if</span>(!=<span class="keyword">null</span> &amp;&amp; hits().length &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"-------------下一页数据---------------------"</span>);</span><br><span class="line">                <span class="keyword">for</span> (SearchHit hit : searchHits) &#123;</span><br><span class="line">                    System.out.println(hit.getSourceAsMap());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">               <span class="comment">//9.判断没有查询到数据---退出循环</span></span><br><span class="line">                System.out.println(<span class="string">"-------------结束---------------------"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//在内容读取完之后,也就是退出循环之后,scrollId就没必要再保存在ES上下文中一分钟了</span></span><br><span class="line">        <span class="comment">//10.创建ClearScrollRequest并指定scrollId</span></span><br><span class="line">        ClearScrollRequest clearScrollRequest = <span class="keyword">new</span> ClearScrollRequest();</span><br><span class="line">        <span class="comment">//11.指定scrollId</span></span><br><span class="line">clearScrollRequest.addScrollId(scrollId);</span><br><span class="line">        <span class="comment">//12.清除在内存中的scrollId</span></span><br><span class="line">    ClearScrollResponse clearScrollResponse = client.clearScroll(clearScrollRequest, RequestOptions.DEFAULT);</span><br><span class="line">    <span class="comment">//13.输出结果</span></span><br><span class="line">    System.out.println(clearScrollResponse.isSucceeded());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="delete-by-query"><a href="#delete-by-query" class="headerlink" title="delete-by-query"></a>delete-by-query</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">根据term,match等查询方式去删除大量的文档</span></span><br><span class="line"><span class="attr">Ps</span>:<span class="string">如果你需要删除的内容是index下的大部分数据,不推荐使用delete-by-query一条一条删,建议创建一个新的索引,将要保留的内容添加到全新的索引</span></span><br></pre></td></tr></table></figure><p><strong>restful风格–delete-by-query</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">POST</span> <span class="string">/index/type/_delete_by_query</span></span><br><span class="line"><span class="attr">&#123;</span></span><br><span class="line">  <span class="meta">"query"</span>: <span class="string">&#123;</span></span><br><span class="line">    <span class="meta">"range"</span>: <span class="string">&#123;</span></span><br><span class="line">      <span class="meta">"fee"</span>: <span class="string">&#123;#将费用小于4的数据查询出来进行删除</span></span><br><span class="line">      <span class="meta">"lt"</span> : <span class="string">4</span></span><br><span class="line">      <span class="attr">&#125;</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>Java–delete-by-query</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteByQuery</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//1.创建DeleteByQueryRequest</span></span><br><span class="line">    DeleteByQueryRequest request = <span class="keyword">new</span> DeleteByQueryRequest(index);</span><br><span class="line">    request.types(type);</span><br><span class="line">    <span class="comment">//2.指定检索条件</span></span><br><span class="line">    request.setQuery(QueryBuilders.rangeQuery(<span class="string">"fee"</span>).lt(<span class="number">4</span>));</span><br><span class="line">    <span class="comment">//3.client执行删除操作</span></span><br><span class="line">    BulkByScrollResponse response = client.deleteByQuery(request, RequestOptions.DEFAULT);</span><br><span class="line">    <span class="comment">//4.输出结果</span></span><br><span class="line">    System.out.println(response.toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;深分页Scroll&quot;&gt;&lt;a href=&quot;#深分页Scroll&quot; class=&quot;headerlink&quot; title=&quot;深分页Scroll&quot;&gt;&lt;/a&gt;深分页Scroll&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;深分页scroll查询&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="ElasticSearch" scheme="https://Agonywy.github.io/categories/ElasticSearch/"/>
    
    
      <category term="ElasticSearch" scheme="https://Agonywy.github.io/tags/ElasticSearch/"/>
    
  </entry>
  
  <entry>
    <title>ES其他各种查询</title>
    <link href="https://agonywy.github.io/2020/06/19/%E5%85%B6%E4%BB%96%E5%90%84%E7%A7%8D%E6%9F%A5%E8%AF%A2/"/>
    <id>https://agonywy.github.io/2020/06/19/%E5%85%B6%E4%BB%96%E5%90%84%E7%A7%8D%E6%9F%A5%E8%AF%A2/</id>
    <published>2020-06-19T05:22:35.000Z</published>
    <updated>2020-08-08T06:02:48.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="id查询"><a href="#id查询" class="headerlink" title="id查询"></a>id查询</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">id查询</span>  <span class="string">/index/type/docId 就是文档的唯一标识</span></span><br></pre></td></tr></table></figure><a id="more"></a><ul><li><strong>restful风格–id查询</strong></li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#id查询</span></span><br><span class="line"><span class="attr">GET</span> <span class="string">/index/type/docId</span></span><br></pre></td></tr></table></figure><ul><li><strong>Java–id查询</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findById</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//1.创建GetRequest</span></span><br><span class="line">    String docId = <span class="string">"123"</span>;</span><br><span class="line">    GetRequest request = <span class="keyword">new</span> GetRequest(index,type,docId);</span><br><span class="line">    <span class="comment">//2.client执行查询操作</span></span><br><span class="line">    GetResponse resp = client.get(request, RequestOptions.DEFAULT);</span><br><span class="line">    <span class="comment">//3.输出结果</span></span><br><span class="line">    Map&lt;String, Object&gt; sourceAsMap = resp.getSourceAsMap();</span><br><span class="line">    System.out.println(sourceAsMap);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ids查询"><a href="#ids查询" class="headerlink" title="ids查询"></a>ids查询</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">根据多个id查询,类似Mysql中的where</span> <span class="string">id in (id1,id2,id3)</span></span><br></pre></td></tr></table></figure><ul><li><strong>restful风格–ids查询</strong></li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">POST</span> <span class="string">/index/type/_search</span></span><br><span class="line"><span class="attr">&#123;</span></span><br><span class="line">    <span class="meta">"query"</span>:<span class="string">&#123;</span></span><br><span class="line">    <span class="attr">ids</span>:<span class="string">&#123;</span></span><br><span class="line">    <span class="meta">"values"</span>: <span class="string">["1","2","3"]</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure><ul><li><strong>Java–ids查询</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findByIds</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//1.创建request</span></span><br><span class="line">    SearchRequest request = <span class="keyword">new</span> SearchRequest(index);</span><br><span class="line">    request.types(type);</span><br><span class="line">    <span class="comment">//2.指定查询条件</span></span><br><span class="line">    SearchSourceBuilder builder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">    builder.query(QueryBuilders.idsQuery().addIds(<span class="string">"1"</span>,<span class="string">"2"</span>,<span class="string">"3"</span>));</span><br><span class="line">    request.source(builder);</span><br><span class="line">    <span class="comment">//3.client执行查询操作</span></span><br><span class="line">    SearchResponse resp = client.search(request, RequestOptions.DEFAULT);</span><br><span class="line">    <span class="comment">//4.输出结果</span></span><br><span class="line">    SearchHit[] hits = resp.getHits().getHits();</span><br><span class="line">    <span class="keyword">for</span> (SearchHit hit : hits) &#123;</span><br><span class="line">        System.out.println(hit.getSourceAsMap());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="prefix查询"><a href="#prefix查询" class="headerlink" title="prefix查询"></a>prefix查询</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">前缀查询,可以通过一个关键字去指定一个Field的value的前缀,从而查询到指定的文档</span></span><br></pre></td></tr></table></figure><ul><li><strong>restful风格–prefix查询</strong></li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">POST</span> <span class="string">/index/type/_search</span></span><br><span class="line"><span class="attr">&#123;</span></span><br><span class="line">    <span class="meta">"query"</span>:<span class="string">&#123;</span></span><br><span class="line">    <span class="meta">"prefix"</span>:<span class="string">&#123;</span></span><br><span class="line"><span class="comment">    #标识某一个Filed只要是以value开头的都会被查询出来</span></span><br><span class="line">    <span class="meta">"smsContext"</span>:<span class="string">&#123;   #字段</span></span><br><span class="line">    <span class="meta">"value"</span>: <span class="string">"欢迎"#字段值前缀</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"><span class="comment">#和match查询的区别：match需要完全匹配,对于关键字不能分词他就查不出来</span></span><br><span class="line"><span class="comment">#但是prefix查询,对于关键字只需要前缀匹配即可,就可以查询出来</span></span><br></pre></td></tr></table></figure><ul><li><strong>Java–prefix查询</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">prefixQuery</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//1.创建request</span></span><br><span class="line">    SearchRequest request = <span class="keyword">new</span> SearchRequest(index);</span><br><span class="line">    request.types(type);</span><br><span class="line">    <span class="comment">//2.指定查询条件</span></span><br><span class="line">    SearchSourceBuilder builder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">    builder.query(QueryBuilders.prefixQuery(<span class="string">"smsContext"</span>,<span class="string">"欢迎"</span>));</span><br><span class="line">    request.source(builder);</span><br><span class="line">    <span class="comment">//3.client执行查询操作</span></span><br><span class="line">    SearchResponse resp = client.search(request, RequestOptions.DEFAULT);</span><br><span class="line">    <span class="comment">//4.输出结果</span></span><br><span class="line">    SearchHit[] hits = resp.getHits().getHits();</span><br><span class="line">    <span class="keyword">for</span> (SearchHit hit : hits) &#123;</span><br><span class="line">        System.out.println(hit.getSourceAsMap());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="fuzzy查询"><a href="#fuzzy查询" class="headerlink" title="fuzzy查询"></a>fuzzy查询</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">模糊查询：注意和Mysql中的like是完全不同的</span></span><br><span class="line"><span class="attr">我们输入字符的大概,ES就可以根据我们输入的内容大概去匹配一下结果</span></span><br></pre></td></tr></table></figure><ul><li><strong>restful风格–fuzzy查询</strong></li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#fuzzy查询</span></span><br><span class="line"><span class="attr">POST</span> <span class="string">/index/type/_search</span></span><br><span class="line"><span class="attr">&#123;</span></span><br><span class="line">    <span class="meta">"query"</span>:<span class="string">&#123;</span></span><br><span class="line">    <span class="meta">"fuzzy"</span>:<span class="string">&#123;</span></span><br><span class="line">    <span class="meta">"companyName"</span>:<span class="string">&#123;   </span></span><br><span class="line"><span class="comment">    #很明显指定值有错别字,但是模糊查询依旧可以查询出阿里巴巴</span></span><br><span class="line">    <span class="meta">"value"</span>: <span class="string">"阿里爸巴"</span></span><br><span class="line"><span class="comment">                #另外我们还可以指定前面几个</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure><ul><li><strong>Java–fuzzy查询</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fuzzyQuery</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//1.创建request</span></span><br><span class="line">    SearchRequest request = <span class="keyword">new</span> SearchRequest(index);</span><br><span class="line">    request.types(type);</span><br><span class="line">    <span class="comment">//2.指定查询条件</span></span><br><span class="line">    SearchSourceBuilder builder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">    builder.query(QueryBuilders.fuzzyQuery(<span class="string">"companyName"</span>,<span class="string">"阿里爸巴"</span>).prefixLength(<span class="number">2</span>));</span><br><span class="line">    request.source(builder);</span><br><span class="line">    <span class="comment">//3.client执行查询操作</span></span><br><span class="line">    SearchResponse resp = client.search(request, RequestOptions.DEFAULT);</span><br><span class="line">    <span class="comment">//4.输出结果</span></span><br><span class="line">    SearchHit[] hits = resp.getHits().getHits();</span><br><span class="line">    <span class="keyword">for</span> (SearchHit hit : hits) &#123;</span><br><span class="line">        System.out.println(hit.getSourceAsMap());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="wildcard查询"><a href="#wildcard查询" class="headerlink" title="wildcard查询"></a>wildcard查询</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">通配查询和Mysql中的like是一个套路,可以在查询时,在字符串中指定通配符*和占位符?</span></span><br><span class="line"><span class="meta">*通配符表示任意个字符</span> <span class="string">?占位符只表示一个字符</span></span><br></pre></td></tr></table></figure><ul><li><strong>restful风格–wildcard查询</strong></li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">POST</span> <span class="string">/index/type/_search</span></span><br><span class="line"><span class="attr">&#123;</span></span><br><span class="line">    <span class="meta">"query"</span>:<span class="string">&#123;</span></span><br><span class="line">    <span class="attr">wildcard</span>:<span class="string">&#123;</span></span><br><span class="line">    <span class="meta">"companyName"</span>:<span class="string">&#123;</span></span><br><span class="line">    <span class="meta">"vlaue"</span>: <span class="string">"中国*"</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure><ul><li><strong>Java–wildcard查询</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">wildcardQuery</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//1.创建request</span></span><br><span class="line">    SearchRequest request = <span class="keyword">new</span> SearchRequest(index);</span><br><span class="line">    request.types(type);</span><br><span class="line">    <span class="comment">//2.指定查询条件</span></span><br><span class="line">    SearchSourceBuilder builder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">    builder.query(QueryBuilders.wildcardQuery(<span class="string">"companyName"</span>,<span class="string">"中国*"</span>));</span><br><span class="line">    request.source(builder);</span><br><span class="line">    <span class="comment">//3.client执行查询操作</span></span><br><span class="line">    SearchResponse resp = client.search(request, RequestOptions.DEFAULT);</span><br><span class="line">    <span class="comment">//4.输出结果</span></span><br><span class="line">    SearchHit[] hits = resp.getHits().getHits();</span><br><span class="line">    <span class="keyword">for</span> (SearchHit hit : hits) &#123;</span><br><span class="line">        System.out.println(hit.getSourceAsMap());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="range查询"><a href="#range查询" class="headerlink" title="range查询"></a>range查询</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">范围查询：只针对数值类型，对某一个字段进行大于或者小于的范围指定</span></span><br></pre></td></tr></table></figure><ul><li><strong>restful风格–range查询</strong></li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">POST</span> <span class="string">/index/type/_search</span></span><br><span class="line"><span class="attr">&#123;</span></span><br><span class="line">    <span class="meta">"query"</span>:<span class="string">&#123;</span></span><br><span class="line">    <span class="meta">"range"</span>:<span class="string">&#123;</span></span><br><span class="line">    <span class="meta">"age"</span>:<span class="string">&#123;</span></span><br><span class="line"><span class="comment">    #gt大于;gte大于等于;lt小于;lte小于等于</span></span><br><span class="line">    <span class="meta">"gte"</span>: <span class="string">"10",</span></span><br><span class="line">    <span class="meta">"lte"</span>: <span class="string">"20"</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure><ul><li><strong>Java–range查询</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rangeQuery</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//1.创建request</span></span><br><span class="line">    SearchRequest request = <span class="keyword">new</span> SearchRequest(index);</span><br><span class="line">    request.types(type);</span><br><span class="line">    <span class="comment">//2.指定查询条件</span></span><br><span class="line">    SearchSourceBuilder builder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">    builder.query(QueryBuilders.rangeQuery(<span class="string">"age"</span>).lt(<span class="number">20</span>).gt(<span class="number">10</span>));</span><br><span class="line">    request.source(builder);</span><br><span class="line">    <span class="comment">//3.client执行查询操作</span></span><br><span class="line">    SearchResponse resp = client.search(request, RequestOptions.DEFAULT);</span><br><span class="line">    <span class="comment">//4.输出结果</span></span><br><span class="line">    SearchHit[] hits = resp.getHits().getHits();</span><br><span class="line">    <span class="keyword">for</span> (SearchHit hit : hits) &#123;</span><br><span class="line">        System.out.println(hit.getSourceAsMap());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="regexp查询"><a href="#regexp查询" class="headerlink" title="regexp查询"></a>regexp查询</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">正则查询：通过编写的正则表达式去匹配内容</span></span><br><span class="line"><span class="attr">Ps</span>:<span class="string">prefix,fuzzy,wildcard,regexp查询效率相对比较低</span></span><br></pre></td></tr></table></figure><ul><li><strong>restful风格–regexp查询</strong></li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">POST</span> <span class="string">/index/type/_search</span></span><br><span class="line"><span class="attr">&#123;</span></span><br><span class="line">    <span class="meta">"query"</span>:<span class="string">&#123;</span></span><br><span class="line">    <span class="meta">"regexp"</span>:<span class="string">&#123;</span></span><br><span class="line"><span class="comment">    #使用正则表达式去查询</span></span><br><span class="line">    <span class="meta">"telephone"</span>: <span class="string">"187[0-9]&#123;8&#125;"</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure><ul><li><strong>Java–regexp查询</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">regexpQuery</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//1.创建request</span></span><br><span class="line">    SearchRequest request = <span class="keyword">new</span> SearchRequest(index);</span><br><span class="line">    request.types(type);</span><br><span class="line">    <span class="comment">//2.指定查询条件</span></span><br><span class="line">    SearchSourceBuilder builder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">    builder.query(QueryBuilders.regexpQuery(<span class="string">"telephone"</span>,<span class="string">"187[0-9]&#123;8&#125;"</span>));</span><br><span class="line">    request.source(builder);</span><br><span class="line">    <span class="comment">//3.client执行查询操作</span></span><br><span class="line">    SearchResponse resp = client.search(request, RequestOptions.DEFAULT);</span><br><span class="line">    <span class="comment">//4.输出结果</span></span><br><span class="line">    SearchHit[] hits = resp.getHits().getHits();</span><br><span class="line">    <span class="keyword">for</span> (SearchHit hit : hits) &#123;</span><br><span class="line">        System.out.println(hit.getSourceAsMap());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;id查询&quot;&gt;&lt;a href=&quot;#id查询&quot; class=&quot;headerlink&quot; title=&quot;id查询&quot;&gt;&lt;/a&gt;id查询&lt;/h4&gt;&lt;figure class=&quot;highlight properties&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;id查询&lt;/span&gt;  &lt;span class=&quot;string&quot;&gt;/index/type/docId 就是文档的唯一标识&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="ElasticSearch" scheme="https://Agonywy.github.io/categories/ElasticSearch/"/>
    
    
      <category term="ElasticSearch" scheme="https://Agonywy.github.io/tags/ElasticSearch/"/>
    
  </entry>
  
  <entry>
    <title>zookeeper选举&amp;监听</title>
    <link href="https://agonywy.github.io/2020/06/17/zookeeper%E9%80%89%E4%B8%BE%E4%B8%8E%E7%9B%91%E5%90%AC/"/>
    <id>https://agonywy.github.io/2020/06/17/zookeeper%E9%80%89%E4%B8%BE%E4%B8%8E%E7%9B%91%E5%90%AC/</id>
    <published>2020-06-17T04:12:35.000Z</published>
    <updated>2020-08-08T11:47:30.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="选举机制"><a href="#选举机制" class="headerlink" title="选举机制"></a>选举机制</h4><p>1）<strong>半数机制</strong>：集群中半数以上机器存活，集群可用。所以Zookeeper适合安装奇数台服务器。</p><a id="more"></a><p>2）Zookeeper虽然在配置文件中并没有指定Master和Slave。但是，Zookeeper工作时，是有一个节点为Leader，其他则为Follower，Leader是通过内部的选举机制临时产生的。</p><p>3）以一个简单的例子来说明整个选举的过程。</p><p>假设有五台服务器组成的Zookeeper集群，它们的id从1-5，同时它们都是最新启动的，也就是没有历史数据，在存放数据量这一点上，都是一样的。假设这些服务器依序启动，来看看会发生什么，如图5-8所示。</p><p><strong>Zookeeper的选举机制</strong></p><p>（1）服务器1启动，此时只有它一台服务器启动了，它发出去的报文没有任何响应，所以它的选举状态一直是LOOKING状态。</p><p>（2）服务器2启动，它与最开始启动的服务器1进行通信，互相交换自己的选举结果，由于两者都没有历史数据，所以id值较大的服务器2胜出，但是由于没有达到超过半数以上的服务器都同意选举它(这个例子中的半数以上是3)，所以服务器1、2还是继续保持LOOKING状态。</p><p>（3）服务器3启动，根据前面的理论分析，服务器3成为服务器1、2、3中的老大，而与上面不同的是，此时有三台服务器选举了它，所以它成为了这次选举的Leader。</p><p>（4）服务器4启动，根据前面的分析，理论上服务器4应该是服务器1、2、3、4中最大的，但是由于前面已经有半数以上的服务器选举了服务器3，所以它只能接收当小弟的命了。</p><p>（5）服务器5启动，同4一样当小弟。</p><h4 id="Stat结构体"><a href="#Stat结构体" class="headerlink" title="Stat结构体"></a>Stat结构体</h4><p>1）czxid-创建节点的事务zxid</p><p>每次修改ZooKeeper状态都会收到一个zxid形式的时间戳，也就是ZooKeeper事务ID。</p><p>事务ID是ZooKeeper中所有修改总的次序。每个修改都有唯一的zxid，如果zxid1小于zxid2，那么zxid1在zxid2之前发生。</p><p>2）ctime - znode被创建的毫秒数(从1970年开始)</p><p>3）mzxid - znode最后更新的事务zxid</p><p>4）mtime - znode最后修改的毫秒数(从1970年开始)</p><p>5）pZxid-znode最后更新的子节点zxid</p><p>6）cversion - znode子节点变化号，znode子节点修改次数</p><p>7）dataversion - znode数据变化号</p><p>8）aclVersion - znode访问控制列表的变化号</p><p>9）ephemeralOwner- 如果是临时节点，这个是znode拥有者的session id。如果不是临时节点则是0。</p><p>10）dataLength- znode的数据长度</p><p>11）numChildren - znode子节点数量</p><h4 id="监听器原理"><a href="#监听器原理" class="headerlink" title="监听器原理"></a>监听器原理</h4><ol><li>首先要有一个<code>main()</code>线程</li><li>在<code>main</code>线程中创建<code>Zookeeper</code>客户端，这时就会创建两个线程，一个负责网络连接通信（<code>connet</code>），一个负责监听（<code>listener</code>）。</li><li>通过<code>connect</code>线程将注册的监听事件发送给<code>Zookeeper</code>。</li><li>在<code>Zookeeper</code>的注册监听器列表中将注册的监听事件添加到列表中。</li><li><code>Zookeeper</code>监听到有数据或路径变化，就会将这个消息发送给<code>listener</code>线程。</li><li><code>listener</code>线程内部调用了<code>process（）</code>方法。</li></ol><p><img src="http://lizhenchao.oss-cn-shenzhen.aliyuncs.com/1539737695.png" alt="img"></p><h4 id="监听器类型"><a href="#监听器类型" class="headerlink" title="监听器类型"></a>监听器类型</h4><p>在 Zookeeper 中, 所有读的操作都可以设置监听器. (<code>getData(), getChildren(), exists()</code>).</p><p>设置监听器的时候, 有三点需要注意:</p><ol><li><p>设置一个监听器只能触发一次.</p><p>所以, 如果想一直监听的话, 需要在监听器的回调函数执行结束之后, 再次设置监听.</p></li><li><p>当事件发生的时候, 事件会发送给那个设计监听的客户端.</p><p>没有设置监听器的是不会得到事件的.</p></li><li><p>不同的监听数据是不一样的.</p></li></ol><hr><ol><li><code>exists()</code> 可以监听到这个节点的创建, 删除, 和节点存储的数据的变化</li><li><code>getData()</code> 可以监听到节点的删除,和节点存储的数据的变化</li><li><code>getChildren()</code> 可以监听到节点的删除和节点的子节点的变化(创建和删除)</li></ol><h4 id="zookeeper一致性协议"><a href="#zookeeper一致性协议" class="headerlink" title="zookeeper一致性协议"></a>zookeeper一致性协议</h4><p>zookeeper实现数据一致性的核心是ZAB协议（Zookeeper原子消息广播协议）。该协议需要做到以下几点：<br>（1）集群在半数以下节点宕机的情况下，能正常对外提供服务；<br>（2）客户端的写请求全部转交给leader来处理，leader需确保写变更能实时同步给所有follower及observer；<br>（3）leader宕机或整个集群重启时，需要确保那些已经在leader服务器上提交的事务最终被所有服务器都提交，确保丢弃那些只在leader服务器上被提出的事务，并保证集群能快速恢复到故障前的状态。<br><strong>Zab协议有两种模式</strong>， 崩溃恢复（选主+数据同步）和消息广播（事务操作）。任何时候都需要保证只有一个主进程负责进行事务操作，而如果主进程崩溃了，就需要迅速选举出一个新的主进程。主进程的选举机制与事务操作机制是紧密相关的。</p><p><strong>ZAB协议中多次用到“过半”设计策略 ，该策略是zk在A（可用性）与C（一致性）间做的取舍，也是zk具有高容错特性的本质。相较分布式事务中的2PC（二阶段提交协议）的“全量通过”，ZAB协议可用性更高（牺牲了部分一致性），能在集群半数以下服务宕机时正常对外提供服务</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;选举机制&quot;&gt;&lt;a href=&quot;#选举机制&quot; class=&quot;headerlink&quot; title=&quot;选举机制&quot;&gt;&lt;/a&gt;选举机制&lt;/h4&gt;&lt;p&gt;1）&lt;strong&gt;半数机制&lt;/strong&gt;：集群中半数以上机器存活，集群可用。所以Zookeeper适合安装奇数台服务器。&lt;/p&gt;
    
    </summary>
    
    
      <category term="zookeeper" scheme="https://Agonywy.github.io/categories/zookeeper/"/>
    
    
      <category term="zookeeper" scheme="https://Agonywy.github.io/tags/zookeeper/"/>
    
  </entry>
  
  <entry>
    <title>Java操作索引&amp;文档</title>
    <link href="https://agonywy.github.io/2020/06/17/Java%E6%93%8D%E4%BD%9C%E7%B4%A2%E5%BC%95+%E6%96%87%E6%A1%A3/"/>
    <id>https://agonywy.github.io/2020/06/17/Java%E6%93%8D%E4%BD%9C%E7%B4%A2%E5%BC%95+%E6%96%87%E6%A1%A3/</id>
    <published>2020-06-17T02:12:35.000Z</published>
    <updated>2020-08-08T06:06:50.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Java操作索引"><a href="#Java操作索引" class="headerlink" title="Java操作索引"></a>Java操作索引</h4><ul><li>导入依赖</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.elasticeSearch依赖</span><br><span class="line">2.elasticeSearch的高级API  elasticSearch-high-level-client</span><br><span class="line">3.junit用于测试</span><br><span class="line">4.Lombok 插件</span><br></pre></td></tr></table></figure><a id="more"></a><ul><li>创建测试类：连接ES</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ESClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RestHighLevelClient <span class="title">getClient</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建HttpHost对象：来指定ES的ip和端口</span></span><br><span class="line">        HttpHost httpHost = <span class="keyword">new</span> HttpHost(<span class="string">"192.168.100.109"</span>,<span class="number">9200</span>);</span><br><span class="line">        <span class="comment">//创建RestClientBuilder;</span></span><br><span class="line">        RestClientBuilder clientBuilder = RestClient.builder(httpHost);</span><br><span class="line">        <span class="comment">//创建RestHighLevelClient</span></span><br><span class="line">        RestHighLevelClient client = <span class="keyword">new</span> RestHighLevelClient(clientBuilder);</span><br><span class="line">        <span class="comment">//这样就可以连接上我们的ES了,直接返回client就可以了</span></span><br><span class="line">        <span class="keyword">return</span> client;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Java创建索引</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">testDemo2</span> </span>&#123;</span><br><span class="line">    RestHighLevelClient client = ESClient.getClient();</span><br><span class="line">    String index = <span class="string">"person"</span>;    <span class="comment">//索引</span></span><br><span class="line">    String type = <span class="string">"man"</span>;        <span class="comment">//类型</span></span><br><span class="line"><span class="comment">//执行这个方法ES就会创建一个索引</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createIndex</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1.准备关于索引的settings(分片,备份信息)</span></span><br><span class="line">        Settings.Builder settings = Settings.builder()</span><br><span class="line">                .put(<span class="string">"numbers_of_shards"</span>, <span class="number">3</span>)</span><br><span class="line">                .put(<span class="string">"numbers_of_replicas"</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="comment">//2.准备关于索引的结构mappings(type,属性等信息)</span></span><br><span class="line">        <span class="comment">//startObject+endObject成对出现：代表Json格式中的&#123;&#125;</span></span><br><span class="line">        XContentBuilder mappings = JsonXContent.contentBuilder()</span><br><span class="line">                .startObject()</span><br><span class="line">                    .startObject(<span class="string">"properties"</span>)</span><br><span class="line">                        .startObject(<span class="string">"name"</span>)<span class="comment">//字段名</span></span><br><span class="line">                            .field(<span class="string">"type"</span>,<span class="string">"test"</span>)<span class="comment">//字段类型</span></span><br><span class="line">                        .endObject()</span><br><span class="line">                        .startObject(<span class="string">"age"</span>)<span class="comment">//字段名</span></span><br><span class="line">                            .field(<span class="string">"type"</span>,<span class="string">"integer"</span>)<span class="comment">//字段类型</span></span><br><span class="line">                        .endObject()</span><br><span class="line">                        .startObject(<span class="string">"birthday"</span>)<span class="comment">//字段名</span></span><br><span class="line">                            .field(<span class="string">"type"</span>,<span class="string">"date"</span>)<span class="comment">//字段类型</span></span><br><span class="line">                            .field(<span class="string">"foemat"</span>,<span class="string">"yyyy-MM-dd"</span>)<span class="comment">//格式化</span></span><br><span class="line">                        .endObject()</span><br><span class="line">                    .endObject()</span><br><span class="line">                .endObject();</span><br><span class="line">        <span class="comment">//3.对settings和mappings封装到一个Request对象中</span></span><br><span class="line">        CreateIndexRequest request = <span class="keyword">new</span> CreateIndexRequest(index)</span><br><span class="line">                .settings(settings)</span><br><span class="line">                .mapping(type.mappings);</span><br><span class="line">        <span class="comment">//4.通过client对象去连接ES并执行创建索引</span></span><br><span class="line">        CreateIndexResponse resp = </span><br><span class="line">            client.indices().create(request,RequestOptions.DEFAULT);</span><br><span class="line">        <span class="comment">//5.输出</span></span><br><span class="line">        System.out.println(resp.toString());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>检查索引是否存在</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exists</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//1.准备request对象,业务不同request对象也不同</span></span><br><span class="line">    <span class="comment">//client.indices().XX()不同操作参数中的Request不同</span></span><br><span class="line">    GetRequest request = <span class="keyword">new</span> GetRequest();</span><br><span class="line">    <span class="comment">//指定索引</span></span><br><span class="line">    request.indices(index);</span><br><span class="line">    <span class="comment">//2.通过Client给ES发请求去操作</span></span><br><span class="line">    <span class="keyword">boolean</span> exists = client.indices().exists(request,RequestOptions.DEFAULT);</span><br><span class="line">    <span class="comment">//3.输出</span></span><br><span class="line">    System.out.println(exists);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>删除索引</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">      <span class="comment">//1.准备request对象</span></span><br><span class="line">      DeleteIndexRequest request = <span class="keyword">new</span> DeleteIndexRequest();</span><br><span class="line">      <span class="comment">//2.指定删除哪个索引</span></span><br><span class="line">      request.indices(index);</span><br><span class="line">      <span class="comment">//3.通过Client去操作删除索引</span></span><br><span class="line">AcknowledgedResponse delete =                                                    client.indices().delete(request,RequestOptions.DEFAULT);</span><br><span class="line">      <span class="comment">///3.输出</span></span><br><span class="line">      System.out.println(delete.isAcknowledged());</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h4 id="Java操作文档"><a href="#Java操作文档" class="headerlink" title="Java操作文档"></a>Java操作文档</h4><ul><li>先编写一个Person类,看看我们的数据</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="comment">//id不要序列化,id不是属性 index/type/id</span></span><br><span class="line">    <span class="meta">@JsonIgnore</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="comment">//日期要格式化,ES只认识要求的格式</span></span><br><span class="line">    <span class="meta">@Jsonformat</span>(pattern=<span class="string">"yyyy-MM-dd"</span>)</span><br><span class="line">    <span class="keyword">private</span> Date    birthday;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>添加文档操作</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createDoc</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//1.准备一个json数据,要存放到person索引中</span></span><br><span class="line">    Person person = <span class="keyword">new</span> Person(<span class="number">1</span>,<span class="string">"张三"</span>,<span class="number">23</span>,<span class="keyword">new</span> Date());</span><br><span class="line">    <span class="comment">//直接序列化成一个Json串</span></span><br><span class="line">    String json = mapper.writeValueAsString(person);</span><br><span class="line">    <span class="comment">//2.准备一个request对象封装索引,类型和json数据</span></span><br><span class="line">    <span class="comment">//封装index,type,id(index/type/id就是唯一标识文档)</span></span><br><span class="line">    <span class="comment">//这种方式就是手动指定id的方式去创建文档</span></span><br><span class="line">    IndexRequest request = <span class="keyword">new</span> IndexRequest(index,type,person.getId().toString());</span><br><span class="line">    <span class="comment">//封装数据,并且指明是Json格式</span></span><br><span class="line">    request.source(json, XContentType.JSON);</span><br><span class="line">    <span class="comment">//3.通过client对象执行操作</span></span><br><span class="line">    IndexResponse resp = client.index(request,RequestOptions.DEFAULT);</span><br><span class="line">    <span class="comment">//输出返回信息</span></span><br><span class="line">    System.out.println(resp.getResult().toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>修改文档操作</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过doc的方式去修改文档,而不是对文档进行覆盖</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateDoc</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">       <span class="comment">//1.创建一个map去指定需要修改的内容</span></span><br><span class="line">       Map&lt;String,Object&gt; doc = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">       doc.put(<span class="string">"name"</span>,<span class="string">"李四"</span>);</span><br><span class="line">       String docId = <span class="string">"111"</span>;</span><br><span class="line">       <span class="comment">//2.创建request对象封装数据,包括index,type,id,修改的内容</span></span><br><span class="line">       UpdateRequest request = <span class="keyword">new</span> UpdateRequest(index,type,docId);</span><br><span class="line">       request.doc(doc);</span><br><span class="line">       <span class="comment">//3.通过client对象执行操作</span></span><br><span class="line">       UpdateResponse resp = client.update(request, RequestOptions.DEFAULT);</span><br><span class="line">       <span class="comment">//4.输出返回结果</span></span><br><span class="line">       System.out.println(resp.getGetResult().toString());</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><ul><li>删除文档操作</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//1.封装request对象 index/type.docId就是文档唯一标识</span></span><br><span class="line">    String docId = <span class="string">"111"</span>;</span><br><span class="line">    DeleteRequest request = <span class="keyword">new</span> DeleteRequest(index,type,docId);</span><br><span class="line">    <span class="comment">//2.client执行删除操作</span></span><br><span class="line">    DeleteResponse resp = client.delete(request,RequestOptions.DEFAULT);</span><br><span class="line">    System.out.println(resp.getResult.toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Java批量操作文档"><a href="#Java批量操作文档" class="headerlink" title="Java批量操作文档"></a>Java批量操作文档</h4><ul><li>批量添加</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bulkCreateDoc</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line">    <span class="comment">//1.创建多个json数据</span></span><br><span class="line">    Person p1 = <span class="keyword">new</span> Person(<span class="number">2</span>,<span class="string">"科比"</span>,<span class="number">18</span>,<span class="keyword">new</span> Date());</span><br><span class="line">    Person p2 = <span class="keyword">new</span> Person(<span class="number">3</span>,<span class="string">"艾弗森"</span>,<span class="number">18</span>,<span class="keyword">new</span> Date());</span><br><span class="line">    Person p3 = <span class="keyword">new</span> Person(<span class="number">4</span>,<span class="string">"加内特"</span>,<span class="number">18</span>,<span class="keyword">new</span> Date());</span><br><span class="line">    <span class="comment">//将对象序列化成Json串</span></span><br><span class="line">    ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">    String doc1 = mapper.writeValueAsString(p1);</span><br><span class="line">    String doc2 = mapper.writeValueAsString(p2);</span><br><span class="line">    String doc3 = mapper.writeValueAsString(p3);</span><br><span class="line">    <span class="comment">//2.创建request对象封装json数据</span></span><br><span class="line">    BulkRequest request = <span class="keyword">new</span> BulkRequest();</span><br><span class="line">    request.add(<span class="keyword">new</span> IndexRequest(index,type,p1.getId().toString().source(doc1, XContentType.JSON)));</span><br><span class="line">    request.add(<span class="keyword">new</span> IndexRequest(index,type,p1.getId().toString().source(doc2, XContentType.JSON)));</span><br><span class="line">    request.add(<span class="keyword">new</span> IndexRequest(index,type,p1.getId().toString().source(doc3, XContentType.JSON)));</span><br><span class="line">    <span class="comment">//3.用client执行批量添加操作</span></span><br><span class="line">    BulkResponse resp = client.bulk(request,RequestOptions.DEFAULT);</span><br><span class="line">    <span class="comment">//4.输出结果</span></span><br><span class="line">    System.out.println(resp.toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>批量删除</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bulkDeleteDoc</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">        <span class="comment">//1.设置要删除的文档ID</span></span><br><span class="line">        String docId1 = <span class="string">"2"</span>;</span><br><span class="line">        String docId2 = <span class="string">"3"</span>;</span><br><span class="line">        String docId3 = <span class="string">"4"</span>;</span><br><span class="line">        <span class="comment">//2.创建request对象来封装要删除的文档信息</span></span><br><span class="line">        <span class="comment">//index/type/docId就是文档的唯一标识</span></span><br><span class="line">        BulkRequest  request = <span class="keyword">new</span> BulkRequest();</span><br><span class="line">        request.add(<span class="keyword">new</span> DeleteRequest(index,type,docId1));</span><br><span class="line">        request.add(<span class="keyword">new</span> DeleteRequest(index,type,docId2));</span><br><span class="line">        request.add(<span class="keyword">new</span> DeleteRequest(index,type,docId3));</span><br><span class="line">        <span class="comment">//3.client执行批量删除操作</span></span><br><span class="line">        BulkResponse resp = client.bulk(request,RequestOptions.DEFAULT);</span><br><span class="line">        <span class="comment">//4.输出结果</span></span><br><span class="line">        System.out.println(resp.toString());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;Java操作索引&quot;&gt;&lt;a href=&quot;#Java操作索引&quot; class=&quot;headerlink&quot; title=&quot;Java操作索引&quot;&gt;&lt;/a&gt;Java操作索引&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;导入依赖&lt;/li&gt;
&lt;/ul&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1.elasticeSearch依赖&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2.elasticeSearch的高级API  elasticSearch-high-level-client&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3.junit用于测试&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4.Lombok 插件&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="ElasticSearch" scheme="https://Agonywy.github.io/categories/ElasticSearch/"/>
    
    
      <category term="ElasticSearch" scheme="https://Agonywy.github.io/tags/ElasticSearch/"/>
    
  </entry>
  
  <entry>
    <title>term&amp;terms查询</title>
    <link href="https://agonywy.github.io/2020/06/14/term&amp;terms%E6%9F%A5%E8%AF%A2/"/>
    <id>https://agonywy.github.io/2020/06/14/term&amp;terms%E6%9F%A5%E8%AF%A2/</id>
    <published>2020-06-14T00:12:35.000Z</published>
    <updated>2020-08-08T06:07:28.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="terms-amp-terms查询"><a href="#terms-amp-terms查询" class="headerlink" title="terms&amp;terms查询"></a>terms&amp;terms查询</h4><ul><li><strong>restful风格–term查询</strong></li></ul><a id="more"></a><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#term查询是代表完全匹配,搜索之前不会对你搜索的关键字进行分词,对你的关键字去文档分词库中匹配内容</span></span><br><span class="line"><span class="attr">POST</span> <span class="string">/index/type/_search</span></span><br><span class="line"><span class="attr">&#123;</span></span><br><span class="line"><span class="meta">"from"</span>: <span class="string">0,#其实就是Mysql中limit的两个参数用于分页的</span></span><br><span class="line"><span class="meta">"size"</span>: <span class="string">5,</span></span><br><span class="line"><span class="meta">"query"</span>:<span class="string">&#123;</span></span><br><span class="line"><span class="meta">"term"</span>:<span class="string">&#123;</span></span><br><span class="line"><span class="meta">"province"</span>:<span class="string">&#123;#查询的内容(字段)</span></span><br><span class="line"><span class="meta">"value"</span>: <span class="string">"北京"</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure><ul><li><strong>Java代码–term查询</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//term查询是代表完全匹配,搜索之前不会对你搜索的关键字进行分词,对你的关键字去文档分词库中匹配内容 </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">termQuery</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//1.创建request</span></span><br><span class="line">        SearchRequest request = <span class="keyword">new</span> SearchRequest(index);</span><br><span class="line">        request.types(type);</span><br><span class="line">        <span class="comment">//2.指定查询条件</span></span><br><span class="line">        SearchSourceBuilder builder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">        builder.from(<span class="number">0</span>);    <span class="comment">//指定从第几条开始查</span></span><br><span class="line">        builder.size(<span class="number">5</span>);    <span class="comment">//指定查多少条数据</span></span><br><span class="line">        builder.query(QueryBuilders.termQuery(<span class="string">"province"</span>, <span class="string">"北京"</span>));</span><br><span class="line">        <span class="comment">//3.把条件设置到request中</span></span><br><span class="line">        request.source(builder);</span><br><span class="line">        <span class="comment">//4.client执行查询操作</span></span><br><span class="line">        SearchResponse resp = client.search(request, RequestOptions.DEFAULT);</span><br><span class="line">        <span class="comment">//5.获取到_source中的数据并展示</span></span><br><span class="line">        SearchHit[] hits = resp.getHits().getHits();</span><br><span class="line">        <span class="keyword">for</span> (SearchHit hit : hits) &#123;</span><br><span class="line">            Map&lt;String, Object&gt; map = hit.getSourceAsMap();</span><br><span class="line">            System.out.println(map);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li><strong>restful风格–terms查询</strong></li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#terms和term查询机制一样,都不会将指定的查询关键字进行分词,直接去分词库中进行匹配,找到相应文档内容</span></span><br><span class="line"><span class="comment">#terms是针对一个字段包含多个值的时候使用</span></span><br><span class="line"><span class="comment">#term:  where province = "北京"</span></span><br><span class="line"><span class="comment">#terms: where province = "北京" or province = "??"</span></span><br><span class="line"><span class="attr">POST</span> <span class="string">/index/type/_search</span></span><br><span class="line"><span class="attr">&#123;</span></span><br><span class="line"><span class="meta">"query"</span>:<span class="string">&#123;</span></span><br><span class="line"><span class="meta">"terms"</span>:<span class="string">&#123;#terms</span></span><br><span class="line"><span class="meta">"province"</span>:<span class="string">[#字段</span></span><br><span class="line"><span class="meta">"北京",</span>   <span class="string">#值是数组,让一个字段去匹配多个值</span></span><br><span class="line"><span class="attr">"上海",</span></span><br><span class="line"><span class="attr">"西安"</span></span><br><span class="line"><span class="attr">]</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure><ul><li><strong>Java代码–terms查询</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//terms和term查询机制一样,都不会将指定的查询关键字进行分词,直接去分词库中进行匹配,找到相应文档内容</span></span><br><span class="line"><span class="comment">//terms是针对一个字段包含多个值的时候使用</span></span><br><span class="line"><span class="comment">//term:  where province = "北京"</span></span><br><span class="line"><span class="comment">//terms: where province = "北京" or province = "??" </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">termsQuery</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//1.创建一个request</span></span><br><span class="line">        SearchRequest request = <span class="keyword">new</span> SearchRequest(index);</span><br><span class="line">        request.types(type);</span><br><span class="line">        <span class="comment">//2.封装查询条件</span></span><br><span class="line">        SearchSourceBuilder builder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">        builder.query(QueryBuilders.termsQuery(<span class="string">"province"</span>, <span class="string">"北京"</span>, <span class="string">"上海"</span>,<span class="string">"西安"</span>));</span><br><span class="line">        <span class="comment">//3.把条件设置到request中</span></span><br><span class="line">        request.source(builder);</span><br><span class="line">        <span class="comment">//4.client执行查询操作</span></span><br><span class="line">        SearchResponse search = client.search(request, RequestOptions.DEFAULT);</span><br><span class="line">        <span class="comment">//5.找到指定数据并输出_source</span></span><br><span class="line">        SearchHit[] hits = search.getHits().getHits();</span><br><span class="line">        <span class="keyword">for</span> (SearchHit hit : hits) &#123;</span><br><span class="line">            Map&lt;String, Object&gt; sourceAsMap = hit.getSourceAsMap();</span><br><span class="line">            System.out.println(sourceAsMap);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;terms-amp-terms查询&quot;&gt;&lt;a href=&quot;#terms-amp-terms查询&quot; class=&quot;headerlink&quot; title=&quot;terms&amp;amp;terms查询&quot;&gt;&lt;/a&gt;terms&amp;amp;terms查询&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;restful风格–term查询&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="ElasticSearch" scheme="https://Agonywy.github.io/categories/ElasticSearch/"/>
    
    
      <category term="ElasticSearch" scheme="https://Agonywy.github.io/tags/ElasticSearch/"/>
    
  </entry>
  
  <entry>
    <title>ES三种聚合查询</title>
    <link href="https://agonywy.github.io/2020/06/13/ES%E4%B8%89%E7%A7%8D%E8%81%9A%E5%90%88%E6%9F%A5%E8%AF%A2/"/>
    <id>https://agonywy.github.io/2020/06/13/ES%E4%B8%89%E7%A7%8D%E8%81%9A%E5%90%88%E6%9F%A5%E8%AF%A2/</id>
    <published>2020-06-13T13:42:35.000Z</published>
    <updated>2020-08-08T06:05:38.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="cardinality去重计数聚合查询"><a href="#cardinality去重计数聚合查询" class="headerlink" title="cardinality去重计数聚合查询"></a>cardinality去重计数聚合查询</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ES的聚合查询和Mysql的聚合查询类似,ES的聚合查询比Mysql更加强大,ES提供的统计数据的方式多种多样</span></span><br></pre></td></tr></table></figure><a id="more"></a><ul><li><strong>ES聚合查询的RSTFul语法</strong></li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">POST</span> <span class="string">/index/type/_search</span></span><br><span class="line"><span class="attr">&#123;</span></span><br><span class="line"><span class="comment">#aggregations:统计,不再是query了</span></span><br><span class="line">    <span class="meta">"aggs"</span>:<span class="string">&#123;</span></span><br><span class="line">        <span class="meta">"agg"</span>:<span class="string">&#123;#给这次聚合查询起一个名字,ES推荐叫agg</span></span><br><span class="line">            <span class="meta">"agg_type"</span>:<span class="string">&#123;#ES提供好的,直接使用就行</span></span><br><span class="line">                <span class="attr">"属性"："值"</span></span><br><span class="line">            <span class="attr">&#125;</span></span><br><span class="line">        <span class="attr">&#125;</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure><ul><li><strong>restful风格–去重计数聚合查询</strong></li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">去重计数,cardinality</span> <span class="string">先将返回的文档中的一个指定的field进行去重,将字段重复的都去掉后,再统计一共有多少条数据</span></span><br></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">POST</span> <span class="string">/index/type/_search</span></span><br><span class="line"><span class="attr">&#123;</span></span><br><span class="line"><span class="comment">#aggregations:统计,不再是query了</span></span><br><span class="line">    <span class="meta">"aggs"</span>:<span class="string">&#123;</span></span><br><span class="line">        <span class="meta">"agg"</span>:<span class="string">&#123;#给这次聚合查询起一个名字,ES推荐叫agg</span></span><br><span class="line">            <span class="meta">"cardinality"</span>:<span class="string">&#123;#这次查询的类型是去重计数聚合查询</span></span><br><span class="line"><span class="comment">            #按照省字段统计：重复的都被去重了</span></span><br><span class="line">                <span class="attr">"field"："province"</span></span><br><span class="line">            <span class="attr">&#125;</span></span><br><span class="line">        <span class="attr">&#125;</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"><span class="attr">去重计数聚合查询</span></span><br></pre></td></tr></table></figure><ul><li><strong>Java–cardinality去重计数聚合查询</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cardinalityQuery</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">    <span class="comment">//1.创建SearchRequest</span></span><br><span class="line">    SearchRequest request = <span class="keyword">new</span> SearchRequest(index);</span><br><span class="line">    request.types(type);</span><br><span class="line">    <span class="comment">//2.指定使用聚合查询方式</span></span><br><span class="line">    SearchSourceBuilder builder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">    <span class="comment">//去重计数方法cardinality()</span></span><br><span class="line">    builder.aggregation(AggregationBuilders.cardinality(<span class="string">"agg"</span>).field(<span class="string">"province"</span>));</span><br><span class="line">    request.source(builder);</span><br><span class="line">    <span class="comment">// 3.执行查询</span></span><br><span class="line">    SearchResponse response = client.search(request, RequestOptions.DEFAULT);</span><br><span class="line">    <span class="comment">// 4.输出返回结果</span></span><br><span class="line">    Cardinality agg = response.getAggregations().get(<span class="string">"agg"</span>);</span><br><span class="line">    System.out.println(agg.getValue());</span><br></pre></td></tr></table></figure><h4 id="range范围统计聚合查询"><a href="#range范围统计聚合查询" class="headerlink" title="range范围统计聚合查询"></a>range范围统计聚合查询</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">统计一定范围内出现的文档个数,比如针对某一个字段的值在0~100,100~200,200~300之间文档出现的个数分别是多少</span></span><br><span class="line"><span class="attr">范围统计：可以针对普通的数值,针对时间类型,针对ip类型都可以响应</span></span><br><span class="line"><span class="meta">(1)数值</span>:  <span class="string">rang    </span></span><br><span class="line"><span class="meta">(2)时间</span>:  <span class="string">date_rang     </span></span><br><span class="line"><span class="meta">(3)ip</span>:   <span class="string">ip_rang</span></span><br></pre></td></tr></table></figure><ul><li><strong>restful风格–range 范围聚合查询</strong></li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">POST</span> <span class="string">/index/type/_search</span></span><br><span class="line"><span class="comment">#针对数值方式的范围统计  from 带等于效果 ，to 不带等于效果</span></span><br><span class="line"><span class="attr">POST</span> <span class="string">/sms-logs-index/sms-logs-type/_search</span></span><br><span class="line"><span class="attr">&#123;</span></span><br><span class="line">  <span class="meta">"aggs"</span>: <span class="string">&#123;</span></span><br><span class="line">    <span class="meta">"agg"</span>: <span class="string">&#123;</span></span><br><span class="line">      <span class="meta">"range"</span>: <span class="string">&#123;#数值范围聚合查询</span></span><br><span class="line">        <span class="meta">"field"</span>: <span class="string">"fee",#指定字段</span></span><br><span class="line">        <span class="meta">"ranges"</span>: <span class="string">[#指定范围,to不带等号效果,form有等号效果</span></span><br><span class="line">          <span class="attr">&#123;</span></span><br><span class="line">            <span class="meta">"to"</span>: <span class="string">30#统计小于30的文档有多少</span></span><br><span class="line">          <span class="attr">&#125;,</span></span><br><span class="line">           <span class="attr">&#123;</span></span><br><span class="line">            <span class="meta">"from"</span>: <span class="string">30,#统计大于等于30且小于60之间的文档有多少</span></span><br><span class="line">            <span class="meta">"to"</span>: <span class="string">60</span></span><br><span class="line">          <span class="attr">&#125;,</span></span><br><span class="line">          <span class="attr">&#123;</span></span><br><span class="line">            <span class="meta">"from"</span>: <span class="string">60#统计大于等于60的文档有多少</span></span><br><span class="line">          <span class="attr">&#125;</span></span><br><span class="line">        <span class="attr">]</span></span><br><span class="line">      <span class="attr">&#125;</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"><span class="comment">#时间方式统计</span></span><br><span class="line"><span class="attr">POST</span> <span class="string">/index/type/_search</span></span><br><span class="line"><span class="attr">&#123;</span></span><br><span class="line">  <span class="meta">"aggs"</span>: <span class="string">&#123;</span></span><br><span class="line">    <span class="meta">"agg"</span>: <span class="string">&#123;</span></span><br><span class="line">      <span class="meta">"date_range"</span>: <span class="string">&#123;#日期范围聚合查询</span></span><br><span class="line">        <span class="meta">"field"</span>: <span class="string">"sendDate",#指定字段</span></span><br><span class="line">        <span class="meta">"format"</span>: <span class="string">"yyyy", #格式化比较年份</span></span><br><span class="line">        <span class="meta">"ranges"</span>: <span class="string">[#指定范围</span></span><br><span class="line">          <span class="attr">&#123;</span></span><br><span class="line">            <span class="meta">"to"</span>: <span class="string">"2000"#统计小于2000年的文档有多少</span></span><br><span class="line">          <span class="attr">&#125;,&#123;</span></span><br><span class="line">            <span class="meta">"from"</span>: <span class="string">"2000"#统计大于等于2000年的文档有多少</span></span><br><span class="line">          <span class="attr">&#125;</span></span><br><span class="line">        <span class="attr">]</span></span><br><span class="line">      <span class="attr">&#125;</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"><span class="comment">#ip 方式 范围统计</span></span><br><span class="line"><span class="attr">POST</span> <span class="string">/sms-logs-index/sms-logs-type/_search</span></span><br><span class="line"><span class="attr">&#123;</span></span><br><span class="line">  <span class="meta">"aggs"</span>: <span class="string">&#123;</span></span><br><span class="line">    <span class="meta">"agg"</span>: <span class="string">&#123;</span></span><br><span class="line">      <span class="meta">"ip_range"</span>: <span class="string">&#123;#ip范围聚合查询</span></span><br><span class="line">        <span class="meta">"field"</span>: <span class="string">"ipAddr",#指定字段</span></span><br><span class="line">        <span class="meta">"ranges"</span>: <span class="string">[#指定范围</span></span><br><span class="line">          <span class="attr">&#123;</span></span><br><span class="line">            <span class="meta">"to"</span>: <span class="string">"127.0.0.8"#ip小于"127.0.0.8"的ip</span></span><br><span class="line">          <span class="attr">&#125;,</span></span><br><span class="line">          <span class="attr">&#123;</span></span><br><span class="line">            <span class="meta">"from"</span>: <span class="string">"127.0.0.8" #ip大于等于"127.0.0.8"的ip</span></span><br><span class="line">          <span class="attr">&#125;</span></span><br><span class="line">        <span class="attr">]</span></span><br><span class="line">      <span class="attr">&#125;</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure><ul><li><strong>Java–range 范围聚合查询</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">aggRange</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">       <span class="comment">// 1.创建request</span></span><br><span class="line">       SearchRequest request = <span class="keyword">new</span> SearchRequest(index);</span><br><span class="line">       request.types(type);</span><br><span class="line">       <span class="comment">// 2. 指定使用聚合查询方式</span></span><br><span class="line">       SearchSourceBuilder builder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">       builder.aggregation(AggregationBuilders.range(<span class="string">"agg"</span>).field(<span class="string">"fee"</span>)</span><br><span class="line">                           .addUnboundedTo(<span class="number">30</span>)<span class="comment">//小于30</span></span><br><span class="line">                           .addRange(<span class="number">30</span>,<span class="number">60</span>)<span class="comment">//大于等于30小于60</span></span><br><span class="line">                           .addUnboundedFrom(<span class="number">60</span>));<span class="comment">//大于等于60</span></span><br><span class="line">       request.source(builder);</span><br><span class="line">       <span class="comment">// 3.执行查询</span></span><br><span class="line">       SearchResponse response = client.search(request, RequestOptions.DEFAULT);</span><br><span class="line">       <span class="comment">// 4.输出返回结果</span></span><br><span class="line">       Range agg = response.getAggregations().get(<span class="string">"agg"</span>);</span><br><span class="line">       <span class="keyword">for</span> (Range.Bucket bucket : agg.getBuckets()) &#123;</span><br><span class="line">           String key = bucket.getKeyAsString();</span><br><span class="line">           Object from = bucket.getFrom();</span><br><span class="line">           Object to = bucket.getTo();</span><br><span class="line">           <span class="keyword">long</span> docCount = bucket.getDocCount();<span class="comment">//文档数量</span></span><br><span class="line">           System.out.println(String.format(<span class="string">"key:%s,from:%s,to:%s,docCount:%s"</span>,                                                    key,from,to,docCount));</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="extended-stats统计聚合查询"><a href="#extended-stats统计聚合查询" class="headerlink" title="extended_stats统计聚合查询"></a>extended_stats统计聚合查询</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">他可以帮你查询指定field</span> <span class="string">的最大值,最小值,平均值,平方和...</span></span><br><span class="line"><span class="meta">使用</span> <span class="string">extended_stats</span></span><br></pre></td></tr></table></figure><ul><li><strong>restful风格–extended_stats统计聚合查询</strong></li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#统计聚合查询 extended_stats</span></span><br><span class="line"><span class="attr">POST</span> <span class="string">/index/type/_search</span></span><br><span class="line"><span class="attr">&#123;</span></span><br><span class="line">  <span class="meta">"aggs"</span>: <span class="string">&#123;</span></span><br><span class="line">    <span class="meta">"agg"</span>: <span class="string">&#123;</span></span><br><span class="line">      <span class="meta">"extended_stats"</span>: <span class="string">&#123;#这次查询的类型是统计聚合查询</span></span><br><span class="line">        <span class="meta">"field"</span>: <span class="string">"fee"</span></span><br><span class="line">      <span class="attr">&#125;</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure><ul><li><strong>Java–extended_stats统计聚合查询</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">aggExtendedStats</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 1.创建request</span></span><br><span class="line">        SearchRequest request = <span class="keyword">new</span> SearchRequest(index);</span><br><span class="line">        request.types(type);</span><br><span class="line">        <span class="comment">// 2. 指定使用聚合查询方式</span></span><br><span class="line">        SearchSourceBuilder builder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">    <span class="comment">//这次查询的类型是"extended_stats"统计聚合查询</span></span><br><span class="line">        builder.aggregation(AggregationBuilders.extendedStats(<span class="string">"agg"</span>).field(<span class="string">"fee"</span>));</span><br><span class="line">        request.source(builder);</span><br><span class="line">        <span class="comment">// 3.执行查询</span></span><br><span class="line">        SearchResponse response = client.search(request, RequestOptions.DEFAULT);</span><br><span class="line">        <span class="comment">// 4.输出返回结果</span></span><br><span class="line">        ExtendedStats extendedStats =  response.getAggregations().get(<span class="string">"agg"</span>);</span><br><span class="line">        System.out.println(<span class="string">"最大值："</span>+extendedStats.getMaxAsString()+</span><br><span class="line">                           <span class="string">",最小值："</span>+extendedStats.getMinAsString());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;cardinality去重计数聚合查询&quot;&gt;&lt;a href=&quot;#cardinality去重计数聚合查询&quot; class=&quot;headerlink&quot; title=&quot;cardinality去重计数聚合查询&quot;&gt;&lt;/a&gt;cardinality去重计数聚合查询&lt;/h4&gt;&lt;figure class=&quot;highlight properties&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;ES的聚合查询和Mysql的聚合查询类似,ES的聚合查询比Mysql更加强大,ES提供的统计数据的方式多种多样&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="ElasticSearch" scheme="https://Agonywy.github.io/categories/ElasticSearch/"/>
    
    
      <category term="ElasticSearch" scheme="https://Agonywy.github.io/tags/ElasticSearch/"/>
    
  </entry>
  
</feed>
